package com.redhat.ceylon.compiler.java.test.expression.operator;

abstract class OptimSuperclass<I, F, C, S, B> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    OptimSuperclass(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$I, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$F, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$C, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$B) {
        this.$reified$I = $reified$I;
        this.$reified$F = $reified$F;
        this.$reified$C = $reified$C;
        this.$reified$S = $reified$S;
        this.$reified$B = $reified$B;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$I;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$F;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$C;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$B;
    
    public abstract .java.lang.Object boxedIntegerArithmetic(final I n2);
    
    public abstract .java.lang.Object boxedFloatArithmetic(final F n2);
    
    public abstract .java.lang.Object boxedStringOperators(final S s2);
    
    public abstract .java.lang.Object boxedBooleanLogical(final B b2);
    
    public abstract .java.lang.Object boxedIntegerComparison(final I n2);
    
    public abstract .java.lang.Object boxedFloatComparison(final F n2);
    
    public abstract .java.lang.Object boxedStringComparison(final S s2);
    
    public abstract .java.lang.Object boxedCharacterComparison(final C c2);
    
    public abstract .java.lang.Object boxedBooleanComparison(final B b2);
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass.class, $reified$I, $reified$F, $reified$C, $reified$S, $reified$B);
    }
}
class Optim extends .com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass<.ceylon.language.Integer, .ceylon.language.Float, .ceylon.language.Character, .ceylon.language.String, .ceylon.language.Boolean> {
    
    Optim() {
        super(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Character.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$);
        this.fieldInteger = 0L;
    }
    
    private final long $getInteger$priv$() {
        return 1L;
    }
    
    private final double $getFloat$priv$() {
        return 1.0;
    }
    
    private final <T>T getBoxed$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t) {
        return t;
    }
    
    private final void unboxedIntegerArithmetic$priv$() {
        long n1 = 0L;
        long n2 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2;
        n1 = 0L;
        n1 = $getInteger$priv$();
        n1 = -n2;
        n1 = 0L;
        n1 = -$getInteger$priv$();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = n2 % n3;
        n1 = .ceylon.language.Integer.power(n2, n3);
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
        n1 = n2 %= n3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedIntegerArithmetic(final .ceylon.language.Integer n2) {
        long n1 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2.longValue();
        n1 = 0L;
        n1 = <.ceylon.language.Integer>getBoxed$priv$(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L)).longValue();
        n1 = n2.getNegated().longValue();
        n1 = 0L;
        n1 = <.ceylon.language.Integer>getBoxed$priv$(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L)).getNegated().longValue();
        n1 = n2.longValue() + n3;
        n1 = n2.longValue() - n3;
        n1 = n2.longValue() * n3;
        n1 = n2.longValue() / n3;
        n1 = n2.longValue() % n3;
        n1 = .ceylon.language.Integer.power(n2.longValue(), n3);
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmp$op$0 = .ceylon.language.Integer.instance(n3).plus(n2);
                n3 = $ceylontmp$op$0.longValue();
            }
            returning $ceylontmp$op$0;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmp$op$1 = .ceylon.language.Integer.instance(n3).times(n2);
                n3 = $ceylontmp$op$1.longValue();
            }
            returning $ceylontmp$op$1;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmp$op$2 = .ceylon.language.Integer.instance(n3).divided(n2);
                n3 = $ceylontmp$op$2.longValue();
            }
            returning $ceylontmp$op$2;
        ).longValue();
        n1 = (
            let
            {
                .ceylon.language.Integer $ceylontmp$op$3 = .ceylon.language.Integer.instance(n3).remainder(n2);
                n3 = $ceylontmp$op$3.longValue();
            }
            returning $ceylontmp$op$3;
        ).longValue();
        return null;
    }
    
    private final void unboxedFloatArithmetic$priv$() {
        double n1 = 0.0;
        double n2 = 0.0;
        double n3 = 0.0;
        n1 = n2;
        n1 = 0.0;
        n1 = $getFloat$priv$();
        n1 = -n2;
        n1 = -0.0;
        n1 = -$getFloat$priv$();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = .ceylon.language.Float.power(n2, n3);
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedFloatArithmetic(final .ceylon.language.Float n2) {
        double n1 = 0.0;
        double n3 = 0.0;
        n1 = n2.doubleValue();
        n1 = 0.0;
        n1 = <.ceylon.language.Float>getBoxed$priv$(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(0.0)).doubleValue();
        n1 = n2.getNegated().doubleValue();
        n1 = -0.0;
        n1 = <.ceylon.language.Float>getBoxed$priv$(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(0.0)).getNegated().doubleValue();
        n1 = n2.doubleValue() + n3;
        n1 = n2.doubleValue() - n3;
        n1 = n2.doubleValue() * n3;
        n1 = n2.doubleValue() / n3;
        n1 = .ceylon.language.Float.power(n2.doubleValue(), n3);
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmp$op$4 = .ceylon.language.Float.instance(n3).plus(n2);
                n3 = $ceylontmp$op$4.doubleValue();
            }
            returning $ceylontmp$op$4;
        ).doubleValue();
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmp$op$5 = .ceylon.language.Float.instance(n3).times(n2);
                n3 = $ceylontmp$op$5.doubleValue();
            }
            returning $ceylontmp$op$5;
        ).doubleValue();
        n1 = (
            let
            {
                .ceylon.language.Float $ceylontmp$op$6 = .ceylon.language.Float.instance(n3).divided(n2);
                n3 = $ceylontmp$op$6.doubleValue();
            }
            returning $ceylontmp$op$6;
        ).doubleValue();
        return null;
    }
    
    private final void unboxedCharacterArithmetic$priv$() {
        int n1 = 97;
        int n2 = 97;
        int n3 = 97;
        n1++;
        ++n1;
        n1--;
        --n1;
    }
    
    private final void unboxedBooleanLogical$priv$() {
        boolean b1 = false;
        boolean b2 = false;
        boolean b3 = false;
        b1 = b2;
        b1 = !b2;
        b1 = b2 && b3;
        b1 = b2 || b3;
        b1 = b2 |= b3;
        b1 = b2 &= b3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedBooleanLogical(final .ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean b3 = false;
        b1 = b2.booleanValue();
        b1 = !b2.booleanValue();
        b1 = b2.booleanValue() && b3;
        b1 = b2.booleanValue() || b3;
        b1 = b3 |= b2.booleanValue();
        b1 = b3 &= b2.booleanValue();
        return null;
    }
    
    private final void unboxedStringOperators$priv$() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        .java.lang.String s3 = "";
        s1 = s2 + s3;
        s1 = s2 += s3;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedStringOperators(final .ceylon.language.String s2) {
        .java.lang.String s1 = "";
        .java.lang.String s3 = "";
        s1 = s2.toString() + s3;
        s1 = (
            let
            {
                .ceylon.language.String $ceylontmp$op$7 = .ceylon.language.String.instance(s3).plus(s2);
                s3 = $ceylontmp$op$7.toString();
            }
            returning $ceylontmp$op$7;
        ).toString();
        return null;
    }
    private long fieldInteger;
    
    private final long getFieldInteger$priv$() {
        return fieldInteger;
    }
    
    private final void setFieldInteger$priv$(final long fieldInteger) {
        this.fieldInteger = fieldInteger;
    }
    
    private final long getFieldGetterInteger$priv$() {
        return 0L;
    }
    
    private final void setFieldGetterInteger$priv$(final long fieldGetterInteger) {
    }
    
    private final void nonOptimisableArithmetic$priv$() {
        
        final class localGetterInteger$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private localGetterInteger$getter$_() {
            }
            
            public long get_() {
                return 0L;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong localGetterInteger$getter$_ = new localGetterInteger$getter$_();
        
        final class localGetterInteger$setter$_ {
            
            private localGetterInteger$setter$_() {
            }
            private long value;
            
            public void set_(final long localGetterInteger) {
            }
        }
        final localGetterInteger$setter$_ localGetterInteger$setter$_ = new localGetterInteger$setter$_();
        setFieldInteger$priv$((
            let
            {
                long $ceylontmp$op$8 = getFieldInteger$priv$();
                setFieldInteger$priv$($ceylontmp$op$8 + 1);
            }
            returning $ceylontmp$op$8;
        ));
        this.setFieldInteger$priv$((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmp$opE$9 = this;
                long $ceylontmp$opV$10 = $ceylontmp$opE$9.getFieldInteger$priv$();
                $ceylontmp$opE$9.setFieldInteger$priv$($ceylontmp$opV$10 + 1);
            }
            returning $ceylontmp$opV$10;
        ));
        setFieldGetterInteger$priv$((
            let
            {
                long $ceylontmp$op$11 = getFieldGetterInteger$priv$();
                setFieldGetterInteger$priv$($ceylontmp$op$11 + 1);
            }
            returning $ceylontmp$op$11;
        ));
        localGetterInteger$setter$_.set_((
            let
            {
                long $ceylontmp$op$12 = localGetterInteger$getter$_.get_();
                localGetterInteger$setter$_.set_($ceylontmp$op$12 + 1);
            }
            returning $ceylontmp$op$12;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_((
            let
            {
                long $ceylontmp$op$13 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_($ceylontmp$op$13 + 1);
            }
            returning $ceylontmp$op$13;
        ));
        setFieldInteger$priv$((
            let
            {
                long $ceylontmp$op$14 = getFieldInteger$priv$() + 1;
                setFieldInteger$priv$($ceylontmp$op$14);
            }
            returning $ceylontmp$op$14;
        ));
        this.setFieldInteger$priv$((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmp$opE$15 = this;
                long $ceylontmp$opV$16 = $ceylontmp$opE$15.getFieldInteger$priv$() + 1;
                $ceylontmp$opE$15.setFieldInteger$priv$($ceylontmp$opV$16);
            }
            returning $ceylontmp$opV$16;
        ));
        setFieldGetterInteger$priv$((
            let
            {
                long $ceylontmp$op$17 = getFieldGetterInteger$priv$() + 1;
                setFieldGetterInteger$priv$($ceylontmp$op$17);
            }
            returning $ceylontmp$op$17;
        ));
        localGetterInteger$setter$_.set_((
            let
            {
                long $ceylontmp$op$18 = localGetterInteger$getter$_.get_() + 1;
                localGetterInteger$setter$_.set_($ceylontmp$op$18);
            }
            returning $ceylontmp$op$18;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_((
            let
            {
                long $ceylontmp$op$19 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.get_() + 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_($ceylontmp$op$19);
            }
            returning $ceylontmp$op$19;
        ));
        setFieldInteger$priv$((
            let
            {
                long $ceylontmp$op$20 = getFieldInteger$priv$() + getFieldInteger$priv$();
                setFieldInteger$priv$($ceylontmp$op$20);
            }
            returning $ceylontmp$op$20;
        ));
        this.setFieldInteger$priv$((
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmp$opE$21 = this;
                long $ceylontmp$opV$22 = $ceylontmp$opE$21.getFieldInteger$priv$() + this.getFieldInteger$priv$();
                $ceylontmp$opE$21.setFieldInteger$priv$($ceylontmp$opV$22);
            }
            returning $ceylontmp$opV$22;
        ));
        setFieldGetterInteger$priv$((
            let
            {
                long $ceylontmp$op$23 = getFieldGetterInteger$priv$() + getFieldGetterInteger$priv$();
                setFieldGetterInteger$priv$($ceylontmp$op$23);
            }
            returning $ceylontmp$op$23;
        ));
        localGetterInteger$setter$_.set_((
            let
            {
                long $ceylontmp$op$24 = localGetterInteger$getter$_.get_() + localGetterInteger$getter$_.get_();
                localGetterInteger$setter$_.set_($ceylontmp$op$24);
            }
            returning $ceylontmp$op$24;
        ));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_((
            let
            {
                long $ceylontmp$op$25 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.get_() + .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger_.set_($ceylontmp$op$25);
            }
            returning $ceylontmp$op$25;
        ));
    }
    
    private final void unboxedIntegerComparison$priv$() {
        long n1 = 0L;
        long n2 = 0L;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Integer.compare(n1, n2);
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedIntegerComparison(final .ceylon.language.Integer n2) {
        long n1 = 0L;
        boolean sync = false;
        sync = .ceylon.language.Integer.instance(n1).equals(n2);
        sync = !.ceylon.language.Integer.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Integer.compare(n1, n2.longValue());
        sync = n1 < n2.longValue();
        sync = n1 > n2.longValue();
        sync = n1 <= n2.longValue();
        sync = n1 >= n2.longValue();
        return null;
    }
    
    private final void unboxedFloatComparison$priv$() {
        double n1 = 0.0;
        double n2 = 0.0;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Float.compare(n1, n2);
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedFloatComparison(final .ceylon.language.Float n2) {
        double n1 = 0.0;
        boolean sync = false;
        sync = .ceylon.language.Float.instance(n1).equals(n2);
        sync = !.ceylon.language.Float.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Float.compare(n1, n2.doubleValue());
        sync = n1 < n2.doubleValue();
        sync = n1 > n2.doubleValue();
        sync = n1 <= n2.doubleValue();
        sync = n1 >= n2.doubleValue();
        return null;
    }
    
    private final void unboxedCharacterComparison$priv$() {
        int n1 = 97;
        int n2 = 97;
        boolean sync = false;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final .ceylon.language.Comparison c = .ceylon.language.Character.compare(n1, n2);
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedCharacterComparison(final .ceylon.language.Character n2) {
        int n1 = 97;
        boolean sync = false;
        sync = .ceylon.language.Character.instance(n1).equals(n2);
        sync = !.ceylon.language.Character.instance(n1).equals(n2);
        final .ceylon.language.Comparison c = .ceylon.language.Character.compare(n1, n2.intValue());
        sync = n1 < n2.intValue();
        sync = n1 > n2.intValue();
        sync = n1 <= n2.intValue();
        sync = n1 >= n2.intValue();
        return null;
    }
    
    private final void unboxedBooleanComparison$priv$() {
        boolean b1 = false;
        boolean b2 = false;
        boolean sync = false;
        sync = b1 == b2;
        sync = b1 == b2;
        sync = !(b1 == b2);
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedBooleanComparison(final .ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean sync = false;
        sync = .ceylon.language.Boolean.instance(b1) == b2;
        sync = .ceylon.language.Boolean.instance(b1).equals(b2);
        sync = !.ceylon.language.Boolean.instance(b1).equals(b2);
        return null;
    }
    
    private final void unboxedStringComparison$priv$() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        boolean sync = false;
        sync = s1.equals(s2);
        sync = !s1.equals(s2);
        final .ceylon.language.Comparison c = .ceylon.language.String.compare(s1, s2);
        sync = .ceylon.language.String.compare(s1, s2) == .ceylon.language.smaller_.get_();
        sync = .ceylon.language.String.compare(s1, s2) == .ceylon.language.larger_.get_();
        sync = .ceylon.language.String.compare(s1, s2) != .ceylon.language.larger_.get_();
        sync = .ceylon.language.String.compare(s1, s2) != .ceylon.language.smaller_.get_();
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedStringComparison(final .ceylon.language.String s2) {
        .java.lang.String s1 = "";
        boolean sync = false;
        sync = .ceylon.language.String.instance(s1).equals(s2);
        sync = !.ceylon.language.String.instance(s1).equals(s2);
        final .ceylon.language.Comparison c = .ceylon.language.String.compare(s1, s2.toString());
        sync = .ceylon.language.String.compare(s1, s2.toString()) == .ceylon.language.smaller_.get_();
        sync = .ceylon.language.String.compare(s1, s2.toString()) == .ceylon.language.larger_.get_();
        sync = .ceylon.language.String.compare(s1, s2.toString()) != .ceylon.language.larger_.get_();
        sync = .ceylon.language.String.compare(s1, s2.toString()) != .ceylon.language.smaller_.get_();
        return null;
    }
    
    private final void nonOptimisableComparison$priv$(final .java.lang.Object o) {
        .java.lang.String s1 = "";
        boolean b2 = false;
        boolean sync = false;
        sync = o == .ceylon.language.Boolean.instance(b2);
        sync = .ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
        sync = !.ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.Optim.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.Optim.class);
}
final class optimToplevelInteger_ {
    
    private optimToplevelInteger_() {
    }
    private static long value;
    private static volatile boolean $init$value = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = 0L;
            $initException$ = null;
            $init$value = true;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = 0L;
            $init$value = false;
        }
    }
    
    public static long get_() {
        if (optimToplevelInteger_.$init$value) {
            return value;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'optimToplevelInteger\' before it was set");
        }
    }
    
    public static void set_(final long optimToplevelInteger) {
        if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
        value = optimToplevelInteger;
    }
}