package com.redhat.ceylon.compiler.java.test.structure.method;

final class methodSpecifyingCallable_f_ {
    
    private methodSpecifyingCallable_f_() {
    }
    
    static .ceylon.language.Callable<? extends .ceylon.language.String> methodSpecifyingCallable_f() {
        throw new .ceylon.language.Exception(null, null);
    }
}
class MethodSpecifyingCallable implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodSpecifyingCallable() {
        this.noParam = new .com.redhat.ceylon.compiler.java.language.AbstractCallable(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .ceylon.language.Empty.$TypeDescriptor$, "Nothing()", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$() {
                return .ceylon.language.nothing_.get_();
            }
        };
        this.oneParam = new .com.redhat.ceylon.compiler.java.language.AbstractCallable(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Nothing(Integer)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final long i = ((.ceylon.language.Integer)$param$0).longValue();
                return .ceylon.language.nothing_.get_();
            }
        };
        this.oneSequencedParam = new .com.redhat.ceylon.compiler.java.language.AbstractCallable(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor$), "Nothing(Integer*)", (short)0){
            
            @.java.lang.Override
            public .java.lang.Object $call$() {
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$0;
                return $calltyped$(i);
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                return $calltyped$(i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$0}, $param$1));
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        $param$0,
                        $param$1}, .ceylon.language.empty_.get_());
                return $calltyped$(i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                        (.ceylon.language.Integer)$param$0,
                        (.ceylon.language.Integer)$param$1}, $param$2));
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2}, .ceylon.language.empty_.get_());
                return $calltyped$(i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                        (.ceylon.language.Integer)$param$0,
                        (.ceylon.language.Integer)$param$1,
                        (.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, $param$0));
            }
            
            private .java.lang.Object $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
                return .ceylon.language.nothing_.get_();
            }
        };
        this.secondSequencedParam = new .com.redhat.ceylon.compiler.java.language.AbstractCallable(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "Nothing(Integer, Integer*)", (short)1){
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(0))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                return $calltyped$(a, i);
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$1;
                return $calltyped$(a, i);
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{$param$1}, .ceylon.language.empty_.get_());
                return $calltyped$(a, i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                return $calltyped$(a, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$1}, $param$2));
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        $param$1,
                        $param$2}, .ceylon.language.empty_.get_());
                return $calltyped$(a, i$variadic$);
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                return $calltyped$(a, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                        (.ceylon.language.Integer)$param$1,
                        (.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                return $calltyped$(a, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .java.lang.Object $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                return $calltyped$(a, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 1, $param$0));
            }
            
            private .java.lang.Object $calltyped$(final long a, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
                return .ceylon.language.nothing_.get_();
            }
        };
    }
    
    private final .java.lang.String foo$priv$(final long i) {
        return .com.redhat.ceylon.compiler.java.test.structure.method.methodSpecifyingCallable_f_.methodSpecifyingCallable_f().$call$((.java.lang.Object).ceylon.language.Integer.instance(i)).toString();
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> noParam;
    
    private final .ceylon.language.Callable<? extends .java.lang.Object> getNoParam$priv$() {
        return noParam;
    }
    
    private final .java.lang.Object noParam1$priv$() {
        return getNoParam$priv$().$call$();
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> oneParam;
    
    private final .ceylon.language.Callable<? extends .java.lang.Object> getOneParam$priv$() {
        return oneParam;
    }
    
    private final .java.lang.Object oneParam1$priv$() {
        return getOneParam$priv$().$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> oneSequencedParam;
    
    private final .ceylon.language.Callable<? extends .java.lang.Object> getOneSequencedParam$priv$() {
        return oneSequencedParam;
    }
    
    private final .java.lang.Object oneSequencedParam0$priv$() {
        return getOneSequencedParam$priv$().$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_());
    }
    
    private final .java.lang.Object oneSequencedParam1$priv$() {
        return getOneSequencedParam$priv$().$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}, .ceylon.language.empty_.get_()));
    }
    
    private final .java.lang.Object oneSequencedParam2$priv$() {
        return getOneSequencedParam$priv$().$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)}, .ceylon.language.empty_.get_()));
    }
    
    private final .java.lang.Object oneSequencedParam3$priv$() {
        return getOneSequencedParam$priv$().$callvariadic$(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
                            
                            @.java.lang.Override
                            protected final .java.lang.Object $evaluate$(int $index$) {
                                switch ($index$) {
                                case 0: 
                                    return .ceylon.language.Integer.instance(1L);
                                
                                default: 
                                    return null;
                                
                                }
                            }
                        }.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return i;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence());
    }
    
    private final .java.lang.Object oneSequencedParam4$priv$() {
        return getOneSequencedParam$priv$().$callvariadic$((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> secondSequencedParam;
    
    private final .ceylon.language.Callable<? extends .java.lang.Object> getSecondSequencedParam$priv$() {
        return secondSequencedParam;
    }
    
    private final .java.lang.Object secondSequencedParam0$priv$() {
        return getSecondSequencedParam$priv$().$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
    }
    
    private final .java.lang.Object secondSequencedParam1$priv$() {
        return getSecondSequencedParam$priv$().$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(2L)}, .ceylon.language.empty_.get_()));
    }
    
    private final .java.lang.Object secondSequencedParam2$priv$() {
        return getSecondSequencedParam$priv$().$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
    }
    
    private final .java.lang.Object secondSequencedParam3$priv$() {
        return getSecondSequencedParam$priv$().$callvariadic$(.ceylon.language.Integer.instance(1L), new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
                            
                            @.java.lang.Override
                            protected final .java.lang.Object $evaluate$(int $index$) {
                                switch ($index$) {
                                case 0: 
                                    return .ceylon.language.Integer.instance(1L);
                                
                                default: 
                                    return null;
                                
                                }
                            }
                        }.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$1 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$1 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$1;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return i;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence());
    }
    
    private final .java.lang.Object secondSequencedParam4$priv$() {
        return getSecondSequencedParam$priv$().$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.method.MethodSpecifyingCallable.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodSpecifyingCallable.class);
}