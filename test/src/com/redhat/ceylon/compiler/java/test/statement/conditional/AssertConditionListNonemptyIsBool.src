package com.redhat.ceylon.compiler.java.test.statement.conditional;

class AssertConditionList implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    AssertConditionList() {
    }
    
    private final boolean m$priv$(final .ceylon.language.Sequential<? extends .java.lang.Object> x) {
        .java.lang.String $ceylontmp$assert$0 = null;
        final long y$4;
        final .ceylon.language.Sequence<? extends .java.lang.Object> x$2;
        .ceylon.language.Sequential<? extends .java.lang.Object> x$1 = null;
        if ((x$1 = x) instanceof .ceylon.language.Sequence) {
            x$2 = (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)x$1;
            .java.lang.Object y$3 = null;
            if ((y$3 = x$2.getFromFirst(0L)) instanceof .ceylon.language.Integer) {
                y$4 = ((.ceylon.language.Integer)y$3).longValue();
                if (y$4 > 0L) {
                } else {
                    $ceylontmp$assert$0 = .java.lang.System.lineSeparator() + "\tunviolated " + "nonempty x" + (.java.lang.System.lineSeparator() + "\tunviolated ") + "is Integer y = x[0]" + (.java.lang.System.lineSeparator() + "\tviolated ") + "y > 0";
                }
            } else {
                y$4 = 0L;
                $ceylontmp$assert$0 = .java.lang.System.lineSeparator() + "\tunviolated " + "nonempty x" + (.java.lang.System.lineSeparator() + "\tviolated ") + "is Integer y = x[0]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "y > 0";
            }
        } else {
            x$2 = null;
            y$4 = 0L;
            $ceylontmp$assert$0 = .java.lang.System.lineSeparator() + "\tviolated " + "nonempty x" + (.java.lang.System.lineSeparator() + "\tuntested ") + "is Integer y = x[0]" + (.java.lang.System.lineSeparator() + "\tuntested ") + "y > 0";
        }
        if ($ceylontmp$assert$0 != null) throw new .ceylon.language.AssertionError("Assertion failed" + $ceylontmp$assert$0);
        return y$4 == 1L;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.conditional.AssertConditionList.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.conditional.AssertConditionList.class);
}