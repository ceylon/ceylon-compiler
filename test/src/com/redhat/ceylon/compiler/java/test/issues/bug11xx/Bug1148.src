package com.redhat.ceylon.compiler.java.test.issues.bug11xx;

public final class bug1148_ {
    
    private bug1148_() {
    }
    
    public static void bug1148() {
        final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> d = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.java.lang.Object, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, .ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$))), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Float.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Character.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Character.$TypeDescriptor$))), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 4, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Iterable.class, .ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$)), "String({Character*})", (short)-1){
                        
                        @.java.lang.Override
                        public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                            final .ceylon.language.Iterable $ceylontmp$characters = (.ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$param$0;
                            return new .ceylon.language.String($ceylontmp$characters);
                        }
                    };
                
                case 1: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Float.$TypeDescriptor$), "Float(Float)", (short)-1){
                        
                        @.java.lang.Override
                        public .ceylon.language.Float $call$(final .java.lang.Object $param$0) {
                            final double $ceylontmp$float = ((.ceylon.language.Float)$param$0).doubleValue();
                            return new .ceylon.language.Float($ceylontmp$float);
                        }
                    };
                
                case 2: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer)", (short)-1){
                        
                        @.java.lang.Override
                        public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                            final long $ceylontmp$integer = ((.ceylon.language.Integer)$param$0).longValue();
                            return new .ceylon.language.Integer($ceylontmp$integer);
                        }
                    };
                
                case 3: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Character>(.ceylon.language.Character.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Character.$TypeDescriptor$), "Character(Character)", (short)-1){
                        
                        @.java.lang.Override
                        public .ceylon.language.Character $call$(final .java.lang.Object $param$0) {
                            final int $ceylontmp$character = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Character)$param$0).intValue());
                            return new .ceylon.language.Character($ceylontmp$character);
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        };
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.issues.bug11xx.bug1148_.bug1148();
    }
}