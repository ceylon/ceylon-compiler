package com.redhat.ceylon.compiler.java.test.annotations;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@.java.lang.annotation.Target({})
@interface EnumeratedReference$annotation$ {
    
    @.com.redhat.ceylon.compiler.java.metadata.EnumerationReference
    public abstract .java.lang.Class<? extends .ceylon.language.Comparison> comparison();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@interface EnumeratedReference$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference$annotation$[] value();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::SequencedAnnotation<com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReference,ceylon.language.meta.declaration::ClassOrInterfaceDeclaration,ceylon.language::Anything>"})
final class EnumeratedReference implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration, .java.lang.Object> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Jpa
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected EnumeratedReference() {
        super();
        this.comparison = null;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    EnumeratedReference(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.parseEnumerationReference(anno.comparison()));
    }
    
    EnumeratedReference(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    final .ceylon.language.Comparison comparison) {
        this.comparison = comparison;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .ceylon.language.Comparison comparison;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    public final .ceylon.language.Comparison getComparison() {
        return comparison;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference.class);
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference$annotation$.class;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference.class)
final class enumeratedReference_ {
    
    private enumeratedReference_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReference")
    static .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference enumeratedReference(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    final .ceylon.language.Comparison comparison) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReference(comparison);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@.java.lang.annotation.Target({})
@interface EnumeratedReferenceVariadic$annotation$ {
    
    @.com.redhat.ceylon.compiler.java.metadata.EnumerationReference
    public abstract .java.lang.Class<? extends .ceylon.language.Comparison>[] comparison();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@interface EnumeratedReferenceVariadic$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic$annotation$[] value();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::SequencedAnnotation<com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReferenceVariadic,ceylon.language.meta.declaration::ClassOrInterfaceDeclaration,ceylon.language::Anything>"})
final class EnumeratedReferenceVariadic implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration, .java.lang.Object> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    EnumeratedReferenceVariadic() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Comparison> $ceylontmp$comparison$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                this($ceylontmp$comparison$0);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    EnumeratedReferenceVariadic(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.<.ceylon.language.Comparison>parseEnumerationReferences(.ceylon.language.Comparison.$TypeDescriptor$, anno.comparison()));
    }
    
    EnumeratedReferenceVariadic(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison[]")
    final .ceylon.language.Sequential<? extends .ceylon.language.Comparison> comparison) {
        this.comparison = comparison;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .ceylon.language.Sequential<? extends .ceylon.language.Comparison> comparison;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison[]")
    public final .ceylon.language.Sequential<? extends .ceylon.language.Comparison> getComparison() {
        return comparison;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic.class);
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic$annotation$.class;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {256},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic.class)
final class enumeratedReferenceVariadic_ {
    
    private enumeratedReferenceVariadic_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic enumeratedReferenceVariadic() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Comparison> $ceylontmp$comparison$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning enumeratedReferenceVariadic($ceylontmp$comparison$1);
        );
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReferenceVariadic")
    static .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic enumeratedReferenceVariadic(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison[]")
    final .ceylon.language.Sequential<? extends .ceylon.language.Comparison> comparison) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceVariadic(comparison);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@.java.lang.annotation.Target({})
@interface EnumeratedReferenceDefaulted$annotation$ {
    
    @.com.redhat.ceylon.compiler.java.metadata.EnumerationReference
    public abstract .java.lang.Class<? extends .ceylon.language.Comparison> comparison() default .ceylon.language.larger_.class;
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@.com.redhat.ceylon.compiler.java.metadata.Ignore
@interface EnumeratedReferenceDefaulted$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted$annotation$[] value();
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::SequencedAnnotation<com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReferenceDefaulted,ceylon.language.meta.declaration::ClassOrInterfaceDeclaration,ceylon.language::Anything>"})
final class EnumeratedReferenceDefaulted implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted, .ceylon.language.meta.declaration.ClassOrInterfaceDeclaration, .java.lang.Object> {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    EnumeratedReferenceDefaulted() {
        (
            let
            {
                .ceylon.language.Comparison $ceylontmp$comparison$2 = .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted.$default$comparison();
                this($ceylontmp$comparison$2);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    EnumeratedReferenceDefaulted(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.parseEnumerationReference(anno.comparison()));
    }
    
    EnumeratedReferenceDefaulted(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    final .ceylon.language.Comparison comparison) {
        this.comparison = comparison;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .ceylon.language.Comparison comparison;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    public final .ceylon.language.Comparison getComparison() {
        return comparison;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static .ceylon.language.Comparison $default$comparison() {
        return .ceylon.language.larger_.get_();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted.class);
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted$annotation$.class;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted.class)
final class enumeratedReferenceDefaulted_ {
    
    private enumeratedReferenceDefaulted_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted enumeratedReferenceDefaulted() {
        return (
            let
            {
                .ceylon.language.Comparison $ceylontmp$comparison$3 = .com.redhat.ceylon.compiler.java.test.annotations.enumeratedReferenceDefaulted_.enumeratedReferenceDefaulted$comparison();
            }
            returning enumeratedReferenceDefaulted($ceylontmp$comparison$3);
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.ObjectValue(.ceylon.language.smaller_.class)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Comparison enumeratedReferenceDefaulted$comparison() {
        return .ceylon.language.smaller_.get_();
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.annotations::EnumeratedReferenceDefaulted")
    static .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted enumeratedReferenceDefaulted(@.com.redhat.ceylon.compiler.java.metadata.Name("comparison")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Comparison")
    final .ceylon.language.Comparison comparison) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.EnumeratedReferenceDefaulted(comparison);
    }
}