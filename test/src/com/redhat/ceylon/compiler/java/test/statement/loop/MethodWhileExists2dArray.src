package com.redhat.ceylon.compiler.java.test.statement.loop;

class MethodWhileExists2dArray implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodWhileExists2dArray() {
    }
    
    private final void ints$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.ceylon.language.Integer>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.ceylon.language.Integer>>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Integer.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.ceylon.language.Integer>arrayOfSize(.ceylon.language.Integer.$TypeDescriptor$, 2L, .ceylon.language.Integer.instance(0L)));
        loop_0: while (true) {
            .ceylon.language.Array<.ceylon.language.Integer> r$0;
            if ((r$0 = t.getFromFirst(0L)) != null) {
                final .ceylon.language.Array<.ceylon.language.Integer> r$1 = r$0;
                r$1.set(0L, .ceylon.language.Integer.instance(100L));
            } else {
                break loop_0;
            }
        }
    }
    
    private final void strings$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.ceylon.language.String>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.ceylon.language.String>>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.String.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.ceylon.language.String>arrayOfSize(.ceylon.language.String.$TypeDescriptor$, 2L, .ceylon.language.String.instance("")));
        loop_1: while (true) {
            .ceylon.language.Array<.ceylon.language.String> r$2;
            if ((r$2 = t.getFromFirst(0L)) != null) {
                final .ceylon.language.Array<.ceylon.language.String> r$3 = r$2;
                r$3.set(0L, .ceylon.language.String.instance(""));
            } else {
                break loop_1;
            }
        }
    }
    
    private final void nulls$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Null.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.ceylon.language.Null.$TypeDescriptor$, 2L, null));
        loop_2: while (true) {
            .ceylon.language.Array<.java.lang.Object> r$4;
            if ((r$4 = t.getFromFirst(0L)) != null) {
                final .ceylon.language.Array<.java.lang.Object> r$5 = r$4;
                r$5.set(0L, null);
            } else {
                break loop_2;
            }
        }
    }
    
    private final void objects$priv$(final .java.lang.Object obj) {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Object.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.ceylon.language.Object.$TypeDescriptor$, 2L, obj));
        loop_3: while (true) {
            .ceylon.language.Array<.java.lang.Object> r$6;
            if ((r$6 = t.getFromFirst(0L)) != null) {
                final .ceylon.language.Array<.java.lang.Object> r$7 = r$6;
                r$7.set(0L, obj);
            } else {
                break loop_3;
            }
        }
    }
    
    private final void union$priv$(final .java.lang.Object obj) {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$)), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), 2L, obj));
        loop_4: while (true) {
            .ceylon.language.Array r$8;
            if ((r$8 = (.ceylon.language.Array<.java.lang.Object>)((.ceylon.language.List<? extends .ceylon.language.Array<.java.lang.Object>>)(.ceylon.language.List)t).getFromFirst(0L)) != null) {
                final .ceylon.language.Array r$9 = r$8;
                r$9.set(0L, obj);
            } else {
                break loop_4;
            }
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.MethodWhileExists2dArray.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.MethodWhileExists2dArray.class);
}