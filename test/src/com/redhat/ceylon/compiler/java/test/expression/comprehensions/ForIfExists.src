package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfExists implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ForIfExists() {
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> xs) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    private long x$2;
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .ceylon.language.Integer x = this.x;
                            .ceylon.language.Integer x$1 = null;
                            if ((x$1 = x) != null) {
                                x$2 = x$1.longValue();
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final long x$2 = this.x$2;
                            final .ceylon.language.Integer x = this.x;
                            return .ceylon.language.Integer.instance(x$2);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence();
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m2(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> xs) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$3 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$3 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.ceylon.language.Integer)$ceylontmp$item$3;
                            return true;
                        }
                    }
                    private long y$5;
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .ceylon.language.Integer x = this.x;
                            .ceylon.language.Integer y$4 = null;
                            if ((y$4 = x) != null) {
                                y$5 = y$4.longValue();
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final long y$5 = this.y$5;
                            final .ceylon.language.Integer x = this.x;
                            return .ceylon.language.Integer.instance(y$5);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExists.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExists.class);
}