package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class defaultFunctionReference_ {
    
    private defaultFunctionReference_() {
    }
    
    static void defaultFunctionReference() {
        (
            let
            {
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$0 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_.defaultFunctionReference$f();
                defaultFunctionReference($ceylontmp$f$0);
            }
            returning null;
        );
    }
    
    public static final .ceylon.language.Callable<? extends .java.lang.Object> defaultFunctionReference$f() {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Anything(Object)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final .java.lang.Object o = $param$0;
                return (
                    let
                    {
                        .ceylon.language.print_.print(o);
                    }
                    returning null;
                );
            }
        };
    }
    
    static void defaultFunctionReference(final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class defaultFunctionReference2_ {
    
    private defaultFunctionReference2_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void defaultFunctionReference2() {
        (
            let
            {
                .java.lang.String $ceylontmp$s$1 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$s();
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$2 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$f($ceylontmp$s$1);
                defaultFunctionReference2($ceylontmp$s$1, $ceylontmp$f$2);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .java.lang.String defaultFunctionReference2$s() {
        return "hi";
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void defaultFunctionReference2(final .java.lang.String s) {
        (
            let
            {
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$3 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2$f(s);
                defaultFunctionReference2(s, $ceylontmp$f$3);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Callable<? extends .java.lang.Object> defaultFunctionReference2$f(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Object.$TypeDescriptor$), "Anything(Object*)", (short)0)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration
        @.com.redhat.ceylon.compiler.java.metadata.Name("f")
        @.com.redhat.ceylon.compiler.java.metadata.Method
        {
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$() {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o = (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)$param$0;
                return $calltyped$(o);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$0});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{$param$0}, $param$1));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                        $param$0,
                        $param$1});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                        $param$0,
                        $param$1}, $param$2));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.Sequential<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2}, $param$3));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, $param$0));
            }
            
            private .java.lang.Object $calltyped$(final .ceylon.language.Sequential<? extends .java.lang.Object> o) {
                return (
                    let
                    {
                        .ceylon.language.print_.print(.ceylon.language.String.instance(s + o.toString()));
                    }
                    returning null;
                );
            }
        };
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void defaultFunctionReference2(@.com.redhat.ceylon.compiler.java.metadata.Name("s")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    final .java.lang.String s, @.com.redhat.ceylon.compiler.java.metadata.Name("f")
    @.com.redhat.ceylon.compiler.java.metadata.FunctionalParameter("!(o*)")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything(ceylon.language::Object*)")
    final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}));
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class defaultFunctionReference3_ {
    
    private defaultFunctionReference3_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void defaultFunctionReference3() {
        (
            let
            {
                .java.lang.String $ceylontmp$s$4 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference3_.defaultFunctionReference3$s();
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$5 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference3_.defaultFunctionReference3$f($ceylontmp$s$4);
                defaultFunctionReference3($ceylontmp$s$4, $ceylontmp$f$5);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .java.lang.String defaultFunctionReference3$s() {
        return "hi";
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    static void defaultFunctionReference3(final .java.lang.String s) {
        (
            let
            {
                .ceylon.language.Callable<? extends .java.lang.Object> $ceylontmp$f$6 = .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference3_.defaultFunctionReference3$f(s);
                defaultFunctionReference3(s, $ceylontmp$f$6);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .ceylon.language.Callable<? extends .java.lang.Object> defaultFunctionReference3$f(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Object.$TypeDescriptor$), "Anything(Object+)", (short)0)
        @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration
        @.com.redhat.ceylon.compiler.java.metadata.Name("f")
        @.com.redhat.ceylon.compiler.java.metadata.Method
        {
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final .ceylon.language.Sequence<? extends .java.lang.Object> o = (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)$param$0;
                return $calltyped$(o);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequence<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$0});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                return $calltyped$((.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{$param$0}, $param$1));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.Sequence<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                        $param$0,
                        $param$1});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                return $calltyped$((.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                        $param$0,
                        $param$1}, $param$2));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.Sequence<? extends .java.lang.Object> o$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2});
                return $calltyped$(o$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                return $calltyped$((.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2}, $param$3));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$(final .java.lang.Object... $param$0) {
                return $calltyped$((.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $callvariadic$(final .java.lang.Object... $param$0) {
                return $calltyped$((.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Object.$TypeDescriptor$, 1, $param$0));
            }
            
            private .java.lang.Object $calltyped$(final .ceylon.language.Sequence<? extends .java.lang.Object> o) {
                return (
                    let
                    {
                        .ceylon.language.print_.print(.ceylon.language.String.instance(s + o.toString()));
                    }
                    returning null;
                );
            }
        };
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void defaultFunctionReference3(@.com.redhat.ceylon.compiler.java.metadata.Name("s")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    final .java.lang.String s, @.com.redhat.ceylon.compiler.java.metadata.Name("f")
    @.com.redhat.ceylon.compiler.java.metadata.FunctionalParameter("!(o+)")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything(ceylon.language::Object+)")
    final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}));
    }
}
final class defaultFunctionReference_call_ {
    
    private defaultFunctionReference_call_() {
    }
    
    static void defaultFunctionReference_call() {
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference_.defaultFunctionReference();
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference2_.defaultFunctionReference2();
        .com.redhat.ceylon.compiler.java.test.expression.invoke.defaultFunctionReference3_.defaultFunctionReference3();
    }
}