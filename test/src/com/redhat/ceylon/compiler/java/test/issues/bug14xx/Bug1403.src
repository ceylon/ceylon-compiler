package com.redhat.ceylon.compiler.java.test.issues.bug14xx;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class coalesce_ {
    
    private coalesce_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{Element&ceylon.language::Object*}")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "Element",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public static <Element>.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> coalesce(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, @.com.redhat.ceylon.compiler.java.metadata.Name("values")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{Element*}")
    @.ceylon.language.DocAnnotation$annotation$(description = "The values, some of which may be null.")
    final .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> values) {
        return (.ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object>).ceylon.language.nothing_.get_();
    }
}
class Bug1403 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected Bug1403() {
        super();
    }
    
    Bug1403(final .ceylon.language.Sequence<? extends .ceylon.language.String> attrs) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403.class);
}
final class bug1403_ {
    
    private bug1403_() {
    }
    
    static void bug1403() {
        new .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}, (
            let
            {
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$0$reified$0 = .ceylon.language.String.$TypeDescriptor$;
                .ceylon.language.Iterable arg$0$0 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
                    
                    @.java.lang.Override
                    protected final .java.lang.Object $evaluate$(int $index$) {
                        switch ($index$) {
                        case 0: 
                            return .ceylon.language.String.instance("");
                        
                        default: 
                            return null;
                        
                        }
                    }
                };
            }
            returning .com.redhat.ceylon.compiler.java.test.issues.bug14xx.coalesce_.<.ceylon.language.String>coalesce(arg$0$reified$0, arg$0$0);
        ).sequence())));
        new .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}, new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("");
                
                default: 
                    return null;
                
                }
            }
        }.sequence())));
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> it = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("");
                
                default: 
                    return null;
                
                }
            }
        };
        new .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}, it.sequence())));
        new .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}, (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}))));
        final .ceylon.language.Sequence<? extends .ceylon.language.String> seq = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")});
        new .com.redhat.ceylon.compiler.java.test.issues.bug14xx.Bug1403(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")}, (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)seq)));
    }
}