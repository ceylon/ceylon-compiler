package com.redhat.ceylon.compiler.java.test.issues.bug09xx;

final class bug_935_collectMatches_ {
    
    private bug_935_collectMatches_() {
    }
    
    static <Element>.ceylon.language.Sequence bug_935_collectMatches(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .ceylon.language.Sequential<? extends Element> data, final .ceylon.language.Callable<? extends .ceylon.language.Integer> search) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>> ok = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>>((.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final VariableBox<.ceylon.language.Sequential<? extends Element>> ko = new VariableBox<.ceylon.language.Sequential<? extends Element>>((.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> iterable$3 = data;
        final boolean isTuple$4 = iterable$3 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$3).$getArray$() != null;
        .java.lang.Object elem$0 = null;
        final .java.lang.Object array$5;
        int i$6 = 0;
        final int length$7;
        if (isTuple$4) {
            array$5 = ((.ceylon.language.Tuple)iterable$3).$getArray$();
            i$6 = ((.ceylon.language.Tuple)iterable$3).$getFirst$();
            length$7 = i$6 + ((.ceylon.language.Tuple)iterable$3).$getLength$();
        } else {
            array$5 = null;
            length$7 = 0;
        }
        .ceylon.language.Iterator<? extends Element> element$iterator$$1 = isTuple$4 ? null : iterable$3.iterator();
        loop_0: while (isTuple$4 ? i$6 < length$7 : !((elem$0 = element$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$4) elem$0 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$5, i$6++);
            final Element element = (Element)elem$0;
            final long result = search.$call$((.java.lang.Object)element).longValue();
            if (result > 0L) {
                ok.ref = (.ceylon.language.Sequence<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$, $reified$Element), new .java.lang.Object[]{(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, $reified$Element), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(result),
                        element})}, (.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)ok.ref);
            } else {
                ko.ref = (.ceylon.language.Sequence<? extends Element>).ceylon.language.Tuple.instance($reified$Element, new .java.lang.Object[]{element}, ko.ref);
            }
        }
        return (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$, $reified$Element)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, $reified$Element)), new .java.lang.Object[]{
                ((.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)ok.ref).sequence(),
                ko.ref.sequence()});
    }
}
final class bug_935_test_ {
    
    private bug_935_test_() {
    }
    
    static void bug_935_test() {
        final .ceylon.language.Sequence results = .com.redhat.ceylon.compiler.java.test.issues.bug09xx.bug_935_collectMatches_.<.ceylon.language.String>bug_935_collectMatches(.ceylon.language.String.$TypeDescriptor$, (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("Merry Christmas"),
                .ceylon.language.String.instance("Happy Holidays")}), new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "Integer(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                return .ceylon.language.Integer.instance(.ceylon.language.String.getSize(s));
            }
        });
        .ceylon.language.print_.print(.ceylon.language.String.instance("Uppercase letters: "));
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iterable$10 = (.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)results.getFromFirst(0L);
        final boolean isTuple$11 = iterable$10 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$10).$getArray$() != null;
        .java.lang.Object elem$8 = null;
        final .java.lang.Object array$12;
        int i$13 = 0;
        final int length$14;
        if (isTuple$11) {
            array$12 = ((.ceylon.language.Tuple)iterable$10).$getArray$();
            i$13 = ((.ceylon.language.Tuple)iterable$10).$getFirst$();
            length$14 = i$13 + ((.ceylon.language.Tuple)iterable$10).$getLength$();
        } else {
            array$12 = null;
            length$14 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> result$iterator$$9 = isTuple$11 ? null : iterable$10.iterator();
        loop_1: while (isTuple$11 ? i$13 < length$14 : !((elem$8 = result$iterator$$9.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$11) elem$8 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$12, i$13++);
            final .ceylon.language.Sequence result = (.ceylon.language.Sequence)elem$8;
            .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("Size: ").append(((.ceylon.language.Integer)result.getFromFirst(0L)).toString()).append(", for: \'").append(((.ceylon.language.String)result.getFromFirst(1L)).toString()).append("\'").toString()));
        }
    }
}