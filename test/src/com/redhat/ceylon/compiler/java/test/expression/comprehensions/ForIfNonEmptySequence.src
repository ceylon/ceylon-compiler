package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfNonEmptySequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ForIfNonEmptySequence() {
    }
    
    public final void m(final .ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> xs) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> $iterator$0;
                    private .ceylon.language.Sequential<? extends .ceylon.language.Integer> x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    private .ceylon.language.Sequence<? extends .ceylon.language.Integer> x$2;
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x = this.x;
                            .ceylon.language.Sequential<? extends .ceylon.language.Integer> x$1 = null;
                            if ((x$1 = x) instanceof .ceylon.language.Sequence) {
                                x$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)x$1;
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> x$2 = this.x$2;
                            final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x = this.x;
                            return (.ceylon.language.Integer)(.java.lang.Object)x$2.getFirst();
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    public final void mvar(final .ceylon.language.Sequential<? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> xs) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Sequential<? extends .ceylon.language.Integer>> $iterator$0;
                    private .ceylon.language.Sequential<? extends .ceylon.language.Integer> x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$3 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$3 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$ceylontmp$item$3;
                            return true;
                        }
                    }
                    private .ceylon.language.Sequence<? extends .ceylon.language.Integer> s$5;
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x = this.x;
                            .ceylon.language.Sequential<? extends .ceylon.language.Integer> s$4 = null;
                            if ((s$4 = x) instanceof .ceylon.language.Sequence) {
                                s$5 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)s$4;
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s$5 = this.s$5;
                            final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x = this.x;
                            return (.ceylon.language.Integer)(.java.lang.Object)s$5.getFirst();
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfNonEmptySequence.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfNonEmptySequence.class);
}