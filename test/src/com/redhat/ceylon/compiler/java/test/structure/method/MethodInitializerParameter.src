package com.redhat.ceylon.compiler.java.test.structure.method;

class MethodInitializerParameter<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected MethodInitializerParameter(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        super();
        this.$reified$T = $reified$T;
        this.t = null;
    }
    
    MethodInitializerParameter(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t) {
        this.$reified$T = $reified$T;
        this.t = t;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    private final T t;
    
    private final T getT$priv$() {
        return t;
    }
    
    private final void unary$priv$(final .ceylon.language.Callable<? extends .java.lang.Object> m) {
        m.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        (
            let
            {
                .ceylon.language.Integer arg$0$0 = .ceylon.language.Integer.instance(1L);
                m.$call$(arg$0$0);
            }
            returning null;
        );
    }
    
    private final void nary$priv$(final .ceylon.language.Callable<? extends .java.lang.Object> m) {
        m.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L), .ceylon.language.Integer.instance(4L));
        (
            let
            {
                .ceylon.language.Integer arg$1$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Integer arg$1$1 = .ceylon.language.Integer.instance(2L);
                .ceylon.language.Integer arg$1$2 = .ceylon.language.Integer.instance(3L);
                .ceylon.language.Integer arg$1$3 = .ceylon.language.Integer.instance(4L);
                m.$call$(arg$1$0, arg$1$1, arg$1$2, arg$1$3);
            }
            returning null;
        );
    }
    
    private final void sequenced$priv$(final .ceylon.language.Callable<? extends .java.lang.Object> m) {
        m.$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        m.$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(2L)}, .ceylon.language.empty_.get_()));
        m.$callvariadic$((.java.lang.Object).ceylon.language.Integer.instance(1L), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        (
            let
            {
                .ceylon.language.Integer arg$2$0 = .ceylon.language.Integer.instance(1L);
                .ceylon.language.Sequential arg$2$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m.$callvariadic$(arg$2$0, arg$2$1);
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> arg$3$1 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.Integer.instance(2L),
                        .ceylon.language.Integer.instance(3L)});
                .ceylon.language.Integer arg$3$0 = .ceylon.language.Integer.instance(1L);
                m.$callvariadic$(arg$3$0, arg$3$1);
            }
            returning null;
        );
    }
    
    private final void typeParameter$priv$(final .ceylon.language.Callable<? extends T> m) {
        m.$call$((.java.lang.Object)getT$priv$());
        (
            let
            {
                T arg$4$0 = getT$priv$();
            }
            returning m.$call$(arg$4$0);
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodInitializerParameter.class, $reified$T);
    }
}