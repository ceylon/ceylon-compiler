package com.redhat.ceylon.compiler.java.test.expression.instantiation;

class Foo implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    Foo() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$name$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                this($ceylontmp$name$0);
            }
            returning null;
        );
    }
    
    Foo(final .ceylon.language.Sequential<? extends .ceylon.language.String> name) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.instantiation.Foo.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.instantiation.Foo.class);
}
class Bar extends .com.redhat.ceylon.compiler.java.test.expression.instantiation.Foo {
    
    protected Bar() {
        super();
    }
    
    Bar(final .java.lang.String name1, final .java.lang.String name2) {
        super((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance(name1),
                .ceylon.language.String.instance(name2)}, .ceylon.language.empty_.get_()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.instantiation.Bar.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.instantiation.Bar.class);
}
class FooNonempty implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected FooNonempty() {
        super();
    }
    
    FooNonempty(final .ceylon.language.Sequence<? extends .ceylon.language.String> name) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.instantiation.FooNonempty.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.instantiation.FooNonempty.class);
}
class BarNonempty extends .com.redhat.ceylon.compiler.java.test.expression.instantiation.FooNonempty {
    
    protected BarNonempty() {
        super();
    }
    
    BarNonempty(final .java.lang.String name1, final .java.lang.String name2) {
        super((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance(name1),
                .ceylon.language.String.instance(name2)}, .ceylon.language.empty_.get_()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.instantiation.BarNonempty.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.instantiation.BarNonempty.class);
}