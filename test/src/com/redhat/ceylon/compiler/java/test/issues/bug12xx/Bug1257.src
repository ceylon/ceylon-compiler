package com.redhat.ceylon.compiler.java.test.issues.bug12xx;

final class bug1257SpreadTypeArg_ {
    
    private bug1257SpreadTypeArg_() {
    }
    
    static <Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>void bug1257SpreadTypeArg(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Args args) {
        final .ceylon.language.Sequence<? extends .java.lang.Object> tup = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, (.ceylon.language.Sequential<? extends .java.lang.Object>)(.ceylon.language.Sequential)args);
    }
}
final class bug1257SpreadNoneptyTypeArg_ {
    
    private bug1257SpreadNoneptyTypeArg_() {
    }
    
    static <Args extends .ceylon.language.Sequence<? extends .java.lang.Object>>void bug1257SpreadNoneptyTypeArg(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Args args) {
        final .ceylon.language.Sequence<? extends .java.lang.Object> tup = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)args);
    }
}
final class bug1257SpreadEmptyIterTypeArg_ {
    
    private bug1257SpreadEmptyIterTypeArg_() {
    }
    
    static <Args extends .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>>void bug1257SpreadEmptyIterTypeArg(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Args args) {
        final .ceylon.language.Sequence<? extends .java.lang.Object> tup = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, .com.redhat.ceylon.compiler.java.Util.sequentialOf(.ceylon.language.Object.$TypeDescriptor$, (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)args));
    }
}
final class bug1257SpreadNonemptyIterTypeArg_ {
    
    private bug1257SpreadNonemptyIterTypeArg_() {
    }
    
    static <Args extends .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>>void bug1257SpreadNonemptyIterTypeArg(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Args args) {
        final .ceylon.language.Sequence<? extends .java.lang.Object> tup = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialOf(.ceylon.language.Object.$TypeDescriptor$, (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object>)(.ceylon.language.Iterable)args));
    }
}
final class bug1257SpreadUnkIterTypeArg_ {
    
    private bug1257SpreadUnkIterTypeArg_() {
    }
    
    static <Args extends .ceylon.language.Iterable<? extends .java.lang.Object, ? extends Abs>, Abs>void bug1257SpreadUnkIterTypeArg(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Abs, final Args args) {
        final .ceylon.language.Sequence<? extends .java.lang.Object> tup = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, .com.redhat.ceylon.compiler.java.Util.sequentialOf(.ceylon.language.Object.$TypeDescriptor$, (.ceylon.language.Iterable<? extends .java.lang.Object, ? extends Abs>)(.ceylon.language.Iterable)args));
    }
}