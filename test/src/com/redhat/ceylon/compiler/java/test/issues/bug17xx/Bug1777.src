package com.redhat.ceylon.compiler.java.test.issues.bug17xx;

public interface Bug1777<Element> extends .ceylon.language.Iterable<Element, .java.lang.Object> {
    
    public .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777$impl<Element> $com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$impl();
    
    public <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial);
    
    public abstract <Result>.ceylon.language.Callable<? extends Result> foldFormal(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial);
}
public final class Bug1777$impl<Element> {
    
    public Bug1777$impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777<Element> $this) {
        this.$reified$Element = $reified$Element;
        this.$this = $this;
    }
    private .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    private final .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777<Element> $this;
    
    public void $refine$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    
    public <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<Result>($reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, $reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$Result, $reified$Element))), "Result(Result(Result, Element))", (short)-1){
            
            @.java.lang.Override
            public Result $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Callable<? extends Result> accumulating = (.ceylon.language.Callable<? extends Result>)(.ceylon.language.Callable)$param$0;
                Result partial = initial;
                .java.lang.Object elem$0;
                .ceylon.language.Iterator<? extends Element> elem$iterator$$1 = $this.iterator();
                loop_0: while (!((elem$0 = elem$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
                    final Element elem = (Element)elem$0;
                    partial = accumulating.$call$((.java.lang.Object)partial, elem);
                }
                return partial;
            }
        };
    }
}
public abstract class Bug1777_Impl<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777<Element> {
    
    public Bug1777_Impl(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
        this.$com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$this$ = new .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777$impl<Element>($reified$Element, this);
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl($reified$Element, .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    protected final .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777$impl<Element> $com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$this$;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777$impl<Element> $com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$impl() {
        return $com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$this$;
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $com$redhat$ceylon$compiler$java$test$issues$bug17xx$Bug1777$this$.foldd($reified$Result, initial);
    }
    protected final .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends Element, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getPaired() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getPaired();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public Element getLast() {
        return (Element)$ceylon$language$Iterable$this$.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Iterable$this$.toString();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this$.getEmpty();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getExceptLast() {
        return $ceylon$language$Iterable$this$.getExceptLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this$.getRest();
    }
    
    @.java.lang.Override
    public Element getFirst() {
        return (Element)$ceylon$language$Iterable$this$.getFirst();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this$.getSize();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this$.contains(element);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$Iterable$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$Iterable$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public Element getFromFirst(final long index) {
        return $ceylon$language$Iterable$this$.getFromFirst(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> sequence() {
        return $ceylon$language$Iterable$this$.sequence();
    }
    
    @.java.lang.Override
    public .java.lang.Object each(final .ceylon.language.Callable<? extends .java.lang.Object> step) {
        return $ceylon$language$Iterable$this$.each(step);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Result, OtherAbsent>.ceylon.language.Iterable flatMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>> collecting) {
        return (.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.flatMap($reified$Result, $reified$OtherAbsent, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Type>.ceylon.language.Iterable narrow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Type) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.narrow($reified$Type);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial);
    }
    
    @.java.lang.Override
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> scan(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.scan($reified$Result, initial);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.find(selecting);
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locate(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locate(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locateLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locateLast(selecting);
    }
    
    @.java.lang.Override
    public Element max(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return (Element)$ceylon$language$Iterable$this$.max(comparing);
    }
    
    @.java.lang.Override
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return $ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> repeat(final long times) {
        return $ceylon$language$Iterable$this$.repeat(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object> partition(final long length) {
        return $ceylon$language$Iterable$this$.partition(length);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable product(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.product($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public final <Other>long interpose$step(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return $ceylon$language$Iterable$this$.interpose$step($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (
            let
            {
                long $ceylontmp$step$2 = interpose$step($reified$Other, element);
            }
            returning interpose$canonical$($reified$Other, element, $ceylontmp$step$2);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    private <Other>.ceylon.language.Iterable interpose$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_Impl.class, $reified$Element);
    }
}
public abstract class Bug1777_2<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Iterable<Element, .java.lang.Object> {
    
    public Bug1777_2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl($reified$Element, .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    protected final .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends Element, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getPaired() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getPaired();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public Element getLast() {
        return (Element)$ceylon$language$Iterable$this$.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Iterable$this$.toString();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Iterable$this$.getEmpty();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getExceptLast() {
        return $ceylon$language$Iterable$this$.getExceptLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this$.getRest();
    }
    
    @.java.lang.Override
    public Element getFirst() {
        return (Element)$ceylon$language$Iterable$this$.getFirst();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this$.getSize();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Iterable$this$.contains(element);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$Iterable$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$Iterable$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public Element getFromFirst(final long index) {
        return $ceylon$language$Iterable$this$.getFromFirst(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> sequence() {
        return $ceylon$language$Iterable$this$.sequence();
    }
    
    @.java.lang.Override
    public .java.lang.Object each(final .ceylon.language.Callable<? extends .java.lang.Object> step) {
        return $ceylon$language$Iterable$this$.each(step);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Result, OtherAbsent>.ceylon.language.Iterable flatMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>> collecting) {
        return (.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.flatMap($reified$Result, $reified$OtherAbsent, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Type>.ceylon.language.Iterable narrow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Type) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.narrow($reified$Type);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial);
    }
    
    @.java.lang.Override
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> scan(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.scan($reified$Result, initial);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.find(selecting);
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locate(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locate(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locateLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locateLast(selecting);
    }
    
    @.java.lang.Override
    public Element max(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return (Element)$ceylon$language$Iterable$this$.max(comparing);
    }
    
    @.java.lang.Override
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return $ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> repeat(final long times) {
        return $ceylon$language$Iterable$this$.repeat(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object> partition(final long length) {
        return $ceylon$language$Iterable$this$.partition(length);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable product(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.product($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public final <Other>long interpose$step(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return $ceylon$language$Iterable$this$.interpose$step($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (
            let
            {
                long $ceylontmp$step$3 = interpose$step($reified$Other, element);
            }
            returning interpose$canonical$($reified$Other, element, $ceylontmp$step$3);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    private <Other>.ceylon.language.Iterable interpose$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    
    public <Result>.ceylon.language.Callable<? extends Result> foldd(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<Result>($reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, $reified$Result, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$Result, $reified$Element))), "Result(Result(Result, Element))", (short)-1){
            
            @.java.lang.Override
            public Result $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Callable<? extends Result> accumulating = (.ceylon.language.Callable<? extends Result>)(.ceylon.language.Callable)$param$0;
                Result partial = initial;
                .java.lang.Object elem$4;
                .ceylon.language.Iterator<? extends Element> elem$iterator$$5 = .com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_2<Element>.this.iterator();
                loop_1: while (!((elem$4 = elem$iterator$$5.next()) instanceof .ceylon.language.Finished)) {
                    final Element elem = (Element)elem$4;
                    partial = accumulating.$call$((.java.lang.Object)partial, elem);
                }
                return partial;
            }
        };
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug17xx.Bug1777_2.class, $reified$Element);
    }
}