package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class spreadArguments_ {
    
    private spreadArguments_() {
    }
    
    static void spreadArguments(final long i, final .java.lang.String s) {
    }
}
class SpreadArguments<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    protected SpreadArguments(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        super();
        this.$reified$T = $reified$T;
    }
    
    SpreadArguments(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long i, final T s) {
        this.$reified$T = $reified$T;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    
    public final void m(final long i, final T s) {
    }
    
    public final void m2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends T> $ceylontmp$s$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m2$canonical$(i, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    private void m2$canonical$(final long i, final .ceylon.language.Sequential<? extends T> s) {
    }
    
    public final void m2(final long i, final .ceylon.language.Sequential<? extends T> s) {
        (
            let
            {
                m2$canonical$(i, s);
            }
            returning null;
        );
    }
    
    public final void m3(final long i, final .ceylon.language.Sequence<? extends T> s) {
    }
    
    private final void spreadTuple$priv$(final .ceylon.language.Sequence args) {
        (
            let
            {
                .ceylon.language.Sequential tuple$1 = (.ceylon.language.Sequential)args;
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(((.ceylon.language.Integer)tuple$1.get(.ceylon.language.Integer.instance(0L))).longValue(), ((.ceylon.language.String)tuple$1.get(.ceylon.language.Integer.instance(1L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$3 = (.ceylon.language.Sequential)args.getRest();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.spreadArguments_.spreadArguments(0L, ((.ceylon.language.String)tuple$3.get(.ceylon.language.Integer.instance(0L))).toString());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$5 = (.ceylon.language.Sequential)args;
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, ((.ceylon.language.Integer)tuple$5.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.String)tuple$5.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$7 = (.ceylon.language.Sequential)args.getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, 0L, (.ceylon.language.String)tuple$7.get(.ceylon.language.Integer.instance(0L)));
        );
        final .ceylon.language.Callable<? extends .java.lang.Object> f = (.ceylon.language.Callable<? extends .java.lang.Object>).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Sequential tuple$9 = (.ceylon.language.Sequential)args;
            }
            returning f.$call$((.ceylon.language.Integer)tuple$9.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.String)tuple$9.get(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$11 = (.ceylon.language.Sequential)args.getRest();
            }
            returning f.$call$(.ceylon.language.Integer.instance(1L), (.ceylon.language.String)tuple$11.get(.ceylon.language.Integer.instance(0L)));
        );
        final .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String> sa = (.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Sequential tuple$13 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                sa.m2(((.ceylon.language.Integer)tuple$13.get(.ceylon.language.Integer.instance(0L))).longValue());
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$15 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m2(((.ceylon.language.Integer)tuple$15.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$15.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$17 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                sa.m3(((.ceylon.language.Integer)tuple$17.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$17.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$19 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m2(((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$19.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$21 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                sa.m3(((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$21.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        final .ceylon.language.Sequence t = (.ceylon.language.Sequence).ceylon.language.nothing_.get_();
        (
            let
            {
                .ceylon.language.Sequential tuple$23 = (.ceylon.language.Sequential)t;
                sa.m2(((.ceylon.language.Integer)tuple$23.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$23.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$25 = (.ceylon.language.Sequential)t;
                sa.m3(((.ceylon.language.Integer)tuple$25.get(.ceylon.language.Integer.instance(0L))).longValue(), (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$25.spanFrom(.ceylon.language.Integer.instance(1L)));
            }
            returning null;
        );
    }
    
    private final void spreadTupleWithSpreadOp$priv$(final .ceylon.language.Sequence args) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> iter = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object>).ceylon.language.nothing_.get_();
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$27$iterable$ = iter;
                .ceylon.language.Sequential tuple$28 = (.ceylon.language.Sequential)args;
                final long spread$27$arg$0 = ((.ceylon.language.Integer)tuple$28.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.String spread$27$arg$1 = (.ceylon.language.String)tuple$28.get(.ceylon.language.Integer.instance(1L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$27$iterator$ = spread$27$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$27$element$;
                            if (!((spread$27$element$ = spread$27$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$27$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$27$element$).m(spread$27$arg$0, spread$27$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$27$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$29$iterable$ = iter;
                .ceylon.language.Sequential tuple$30 = (.ceylon.language.Sequential)args.getRest();
                final long spread$29$arg$0 = 0L;
                final .ceylon.language.String spread$29$arg$1 = (.ceylon.language.String)tuple$30.get(.ceylon.language.Integer.instance(0L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$29$iterator$ = spread$29$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$29$element$;
                            if (!((spread$29$element$ = spread$29$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$29$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$29$element$).m(spread$29$arg$0, spread$29$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$29$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$31$iterable$ = iter;
                final long spread$31$arg$0 = 0L;
                final .ceylon.language.Sequential<? extends .ceylon.language.String> spread$31$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)args.getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$31$iterator$ = spread$31$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$31$element$;
                            if (!((spread$31$element$ = spread$31$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$31$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$31$element$).m2(spread$31$arg$0, spread$31$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$31$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$32$iterable$ = iter;
                final long spread$32$arg$0 = 0L;
                final .ceylon.language.Sequence<? extends .ceylon.language.String> spread$32$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)args.getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$32$iterator$ = spread$32$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$32$element$;
                            if (!((spread$32$element$ = spread$32$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$32$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$32$element$).m3(spread$32$arg$0, spread$32$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$32$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$33$iterable$ = iter;
                final long spread$33$arg$0 = 0L;
                final .ceylon.language.Sequential<? extends .ceylon.language.String> spread$33$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Sequence<? extends .ceylon.language.String>)args.getRest()).getRest();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$33$iterator$ = spread$33$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$33$element$;
                            if (!((spread$33$element$ = spread$33$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$33$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$33$element$).m2(spread$33$arg$0, spread$33$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$33$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$34$iterable$ = iter;
                .ceylon.language.Sequential tuple$35 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(0L)});
                final long spread$34$arg$0 = ((.ceylon.language.Integer)tuple$35.get(.ceylon.language.Integer.instance(0L))).longValue();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$34$iterator$ = spread$34$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$34$element$;
                            if (!((spread$34$element$ = spread$34$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$34$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$34$element$).m2(spread$34$arg$0);
                                    }
                                    returning null;
                                );
                            }
                            return spread$34$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$36$iterable$ = iter;
                .ceylon.language.Sequential tuple$37 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                final long spread$36$arg$0 = ((.ceylon.language.Integer)tuple$37.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.String> spread$36$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$37.spanFrom(.ceylon.language.Integer.instance(1L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$36$iterator$ = spread$36$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$36$element$;
                            if (!((spread$36$element$ = spread$36$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$36$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$36$element$).m2(spread$36$arg$0, spread$36$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$36$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$38$iterable$ = iter;
                .ceylon.language.Sequential tuple$39 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello")});
                final long spread$38$arg$0 = ((.ceylon.language.Integer)tuple$39.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.String> spread$38$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$39.spanFrom(.ceylon.language.Integer.instance(1L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$38$iterator$ = spread$38$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$38$element$;
                            if (!((spread$38$element$ = spread$38$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$38$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$38$element$).m3(spread$38$arg$0, spread$38$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$38$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$40$iterable$ = iter;
                .ceylon.language.Sequential tuple$41 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                final long spread$40$arg$0 = ((.ceylon.language.Integer)tuple$41.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.String> spread$40$arg$1 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)tuple$41.spanFrom(.ceylon.language.Integer.instance(1L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$40$iterator$ = spread$40$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$40$element$;
                            if (!((spread$40$element$ = spread$40$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$40$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$40$element$).m2(spread$40$arg$0, spread$40$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$40$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$42$iterable$ = iter;
                .ceylon.language.Sequential tuple$43 = (.ceylon.language.Sequential)(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(0L),
                        .ceylon.language.String.instance("hello"),
                        .ceylon.language.String.instance("world")});
                final long spread$42$arg$0 = ((.ceylon.language.Integer)tuple$43.get(.ceylon.language.Integer.instance(0L))).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.String> spread$42$arg$1 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)tuple$43.spanFrom(.ceylon.language.Integer.instance(1L));
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$42$iterator$ = spread$42$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$42$element$;
                            if (!((spread$42$element$ = spread$42$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$42$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$42$element$).m3(spread$42$arg$0, spread$42$arg$1);
                                    }
                                    returning null;
                                );
                            }
                            return spread$42$element$;
                        }
                    };
                }
            }.sequence();
        );
    }
    
    public final void m4() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$i$44 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m4$canonical$($ceylontmp$i$44);
            }
            returning null;
        );
    }
    
    private void m4$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
    }
    
    public final void m4(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> i) {
        (
            let
            {
                m4$canonical$(i);
            }
            returning null;
        );
    }
    
    private final void spreadIterator$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        m4(iter.sequence());
        m4(nonEmptyIter.sequence());
    }
    
    private final void spreadIteratorWithSpreadOp$priv$(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> nonEmptyIter) {
        final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> sas = (.ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object>).ceylon.language.nothing_.get_();
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$45$iterable$ = sas;
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$45$arg$0 = iter.sequence();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$45$iterator$ = spread$45$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$45$element$;
                            if (!((spread$45$element$ = spread$45$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$45$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$45$element$).m4(spread$45$arg$0);
                                    }
                                    returning null;
                                );
                            }
                            return spread$45$element$;
                        }
                    };
                }
            }.sequence();
        );
        (
            let
            {
                final .ceylon.language.Iterable<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>, ? extends .java.lang.Object> spread$46$iterable$ = sas;
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> spread$46$arg$0 = nonEmptyIter.sequence();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .java.lang.Object> iterator() {
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>> spread$46$iterator$ = spread$46$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$46$element$;
                            if (!((spread$46$element$ = spread$46$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$46$element$ = (
                                    let
                                    {
                                        ((.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments<.ceylon.language.String>)(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments)spread$46$element$).m4(spread$46$arg$0);
                                    }
                                    returning null;
                                );
                            }
                            return spread$46$element$;
                        }
                    };
                }
            }.sequence();
        );
    }
    
    private final void spreadTupleWithDefaultedAndSequenced$priv$() {
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer, Integer=, Integer*)", (short)2){
            
            private final long $default$b(final long a) {
                return 2L;
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(0))).longValue();
                final long b = ((.ceylon.language.Integer)$param$0.get(.ceylon.language.Integer.instance(1))).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(2));
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = $default$b(a);
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$2});
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = $param$0.length > 1 ? ((.ceylon.language.Integer)$param$0[1]).longValue() : $default$b(a);
                return $calltyped$(a, b, $spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 1, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(final long a, final long b, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, true, -1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer, Integer, Integer+)", (short)2){
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)$param$2;
                return $calltyped$(a, b, c);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$2});
                return $calltyped$(a, b, c$variadic$);
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                final long a = ((.ceylon.language.Integer)$param$0).longValue();
                final long b = ((.ceylon.language.Integer)$param$1).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.Integer)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            public .ceylon.language.Integer $callvariadic$(final .java.lang.Object... $param$0) {
                final long a = ((.ceylon.language.Integer)$param$0[0]).longValue();
                final long b = ((.ceylon.language.Integer)$param$0[1]).longValue();
                return $calltyped$(a, b, (.ceylon.language.Sequence)$spreadVarargs$(.ceylon.language.Integer.$TypeDescriptor$, 3, $param$0));
            }
            
            private .ceylon.language.Integer $calltyped$(final long a, final long b, final .ceylon.language.Sequence<? extends .ceylon.language.Integer> c) {
                return .ceylon.language.Integer.instance(1L);
            }
        };
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> one = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)});
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> two = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> three = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)});
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> four = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L)});
        (
            let
            {
                .ceylon.language.Sequential tuple$47 = (.ceylon.language.Sequential)one;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$47.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$49 = (.ceylon.language.Sequential)two;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$49.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$49.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$51 = (.ceylon.language.Sequential)three;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$51.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$51.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$51.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$53 = (.ceylon.language.Sequential)three;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$53.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$53.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$53.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$55 = (.ceylon.language.Sequential)four;
            }
            returning f.$callvariadic$((.ceylon.language.Integer)tuple$55.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$55.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$55.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$57 = (.ceylon.language.Sequential)four;
            }
            returning f2.$callvariadic$((.ceylon.language.Integer)tuple$57.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Integer)tuple$57.get(.ceylon.language.Integer.instance(1L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$57.spanFrom(.ceylon.language.Integer.instance(2L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$59 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$61 = (.ceylon.language.Sequential)one;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$61.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$63 = (.ceylon.language.Sequential)two;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$63.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$63.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$65 = (.ceylon.language.Sequential)two;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$65.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$65.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$67 = (.ceylon.language.Sequential)three;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$67.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$67.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$69 = (.ceylon.language.Sequential)three;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$69.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$69.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$71 = (.ceylon.language.Sequential)four;
            }
            returning f.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$71.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)tuple$71.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$73 = (.ceylon.language.Sequential)four;
            }
            returning f2.$callvariadic$(.ceylon.language.Integer.instance(1L), (.ceylon.language.Integer)tuple$73.get(.ceylon.language.Integer.instance(0L)), (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)tuple$73.spanFrom(.ceylon.language.Integer.instance(1L)));
        );
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)one);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)one);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)two);
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)two);
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)one, new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)one, new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
        f.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)two, new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
        f2.$callvariadic$(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential)two, new .java.lang.Object[]{.ceylon.language.Integer.instance(3L)})));
    }
    
    private final <Arg, Args extends .ceylon.language.Sequential<? extends Arg>>void spreadParameterised$priv$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Arg, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final Arg arg, final Args args, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f, final .ceylon.language.Callable<? extends .ceylon.language.Integer> f2) {
        final long i1 = .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>apply(f, (.ceylon.language.Sequential)args).longValue();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.SpreadArguments.class, $reified$T);
    }
}