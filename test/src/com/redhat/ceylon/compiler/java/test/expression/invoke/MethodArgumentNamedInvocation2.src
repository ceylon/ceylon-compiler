package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class methodArgumentNamedIncovation2_ {
    
    private methodArgumentNamedIncovation2_() {
    }
    
    static <A, B>void methodArgumentNamedIncovation2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$A, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$B, final A a) {
        
        final class callFunction_ {
            
            private callFunction_() {
            }
            
            <X, Y>void callFunction(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Y, final .ceylon.language.Callable<? extends X> f) {
            }
        }
        final callFunction_ callFunction = new callFunction_();
        (
            let
            {
                .ceylon.language.Callable arg$0$0 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final long i = ((.ceylon.language.Integer)$param$0).longValue();
                        return .ceylon.language.String.instance(.ceylon.language.Integer.toString((
                            let
                            {
                                long base$1 = i;
                            }
                            returning base$1 * base$1;
                        )));
                    }
                };
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$0$reified$0 = .ceylon.language.String.$TypeDescriptor$;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$0$reified$1 = .ceylon.language.Integer.$TypeDescriptor$;
                callFunction.<.ceylon.language.String, .ceylon.language.Integer>callFunction(arg$0$reified$0, arg$0$reified$1, arg$0$0);
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Callable arg$2$0 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<A>($reified$A, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$B), "A(B)", (short)-1){
                    
                    @.java.lang.Override
                    public A $call$(final .java.lang.Object $param$0) {
                        final B i = (B)$param$0;
                        return a;
                    }
                };
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$2$reified$0 = $reified$A;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$2$reified$1 = $reified$B;
                callFunction.<A, B>callFunction(arg$2$reified$0, arg$2$reified$1, arg$2$0);
            }
            returning null;
        );
    }
}