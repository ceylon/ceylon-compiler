package com.redhat.ceylon.compiler.java.test.expression.invoke;

abstract class TypeFamily<N extends .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<N, E>.Node, E extends .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<N, E>.Edge> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    TypeFamily(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$N, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$E) {
        this.$reified$N = $reified$N;
        this.$reified$E = $reified$E;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$N;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$E;
    
    public abstract .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<N, E>.Edge Edge$new$(final N n1, final N n2);
    
    public abstract class Edge implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Edge(final N n1, final N n2) {
            this.n1 = n1;
            this.n2 = n2;
        }
        private final N n1;
        
        public final N getN1() {
            return n1;
        }
        private final N n2;
        
        public final N getN2() {
            return n2;
        }
        
        public final boolean touches(final N node) {
            return ((N)getN1()).equals((N)node) || ((N)getN2()).equals((N)node);
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.class, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.this.$reified$N, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.this.$reified$E), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.Edge.class));
        }
    }
    
    public abstract .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<N, E>.Node Node$new$();
    
    public abstract class Node implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Node() {
        }
        
        public boolean touches(final E edge) {
            return ((.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<N, E>.Edge)edge).touches((N)this);
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.class, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.this.$reified$N, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.this.$reified$E), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.Node.class));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily.class, $reified$N, $reified$E);
    }
}
class TypeFamilyBasic extends .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge> {
    
    TypeFamilyBasic() {
        super(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node.class)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge.class)));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node Node$new$() {
        return new Node();
    }
    
    public class Node extends .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge>.Node {
        
        protected Node() {
            super();
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node.class));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge Edge$new$(final .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node n1, final .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node n2) {
        return new Edge(n1, n2);
    }
    
    public class Edge extends .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamily<.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node, .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge>.Edge {
        
        protected Edge(final .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node n1, final .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Node n2) {
            super(n1, n2);
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.Edge.class));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.TypeFamilyBasic.class);
}