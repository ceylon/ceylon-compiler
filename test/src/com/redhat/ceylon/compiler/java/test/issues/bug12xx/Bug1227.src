package com.redhat.ceylon.compiler.java.test.issues.bug12xx;

final class bug1227_ifBreak_returnElse_ {
    
    private bug1227_ifBreak_returnElse_() {
    }
    
    static long bug1227_ifBreak_returnElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$0 = 0L;
        boolean doforelse$1 = true;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$6 = l;
        final boolean isArray$7 = iterable$6 instanceof .ceylon.language.Array;
        final boolean isTuple$8 = iterable$6 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$6).$getArray$() != null;
        .java.lang.Object elem$2 = null;
        final .java.lang.Object array$9;
        int i$10 = 0;
        final int length$11;
        if (isTuple$8) {
            array$9 = ((.ceylon.language.Tuple)iterable$6).$getArray$();
            i$10 = ((.ceylon.language.Tuple)iterable$6).$getFirst$();
            length$11 = i$10 + ((.ceylon.language.Tuple)iterable$6).$getLength$();
        } else if (isArray$7) {
            array$9 = ((.ceylon.language.Array)iterable$6).toArray();
            length$11 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$9);
        } else {
            array$9 = null;
            length$11 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$3 = isTuple$8 || isArray$7 ? null : iterable$6.iterator();
        loop_0: while (isTuple$8 || isArray$7 ? i$10 < length$11 : !((elem$2 = index$iterator$$3.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$8 || isArray$7) elem$2 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$9, i$10++);
            final long index = ((.ceylon.language.Integer)elem$2).longValue();
            if (someBoolean) {
                from$0 = index;
                final long from$5 = from$0;
                
                final class ohNo_ {
                    
                    private ohNo_() {
                    }
                    
                    long ohNo() {
                        return from$5 + 1L;
                    }
                }
                final ohNo_ ohNo = new ohNo_();
                doforelse$1 = false;
                break loop_0;
            }
        }
        if (doforelse$1) {
            return 0L;
        }
        from = from$0;
        return from;
    }
}
final class bug1227_ifBreak_returnElse_opt_ {
    
    private bug1227_ifBreak_returnElse_opt_() {
    }
    
    static long bug1227_ifBreak_returnElse_opt() {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$12 = 0L;
        boolean doforelse$13 = true;
        final long $ceylontmp$first$15 = 1L;
        final long $ceylontmp$last$16 = 10L;
        final boolean $ceylontmp$increasing$17 = .ceylon.language.Integer.offset($ceylontmp$last$16, $ceylontmp$first$15) >= 0;
        final long $ceylontmp$incr$18 = $ceylontmp$increasing$17 ? 1L : -1L;
        long index$21 = $ceylontmp$first$15;
        long $ceylontmp$element$20 = $ceylontmp$first$15;
        boolean $ceylontmp$f$19 = false;
        loop_1: do {
            if ($ceylontmp$f$19) $ceylontmp$element$20 += $ceylontmp$incr$18;
            $ceylontmp$f$19 = true;
            index$21 = $ceylontmp$element$20;
            final long index = index$21;
            $ceylontmp$continue$14: do {
                if (someBoolean) {
                    from$12 = index;
                    final long from$23 = from$12;
                    doforelse$13 = false;
                    break loop_1;
                }
            }             while (false);
        }         while ($ceylontmp$increasing$17 ? index$21 - $ceylontmp$last$16 != 0L : index$21 - $ceylontmp$last$16 != 0L);
        if (doforelse$13) {
            return 0L;
        }
        from = from$12;
        return from;
    }
}
final class bug1227_ifBreak_specifiedElse_ {
    
    private bug1227_ifBreak_specifiedElse_() {
    }
    
    static long bug1227_ifBreak_specifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$24 = 0L;
        boolean doforelse$25 = true;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$30 = l;
        final boolean isArray$31 = iterable$30 instanceof .ceylon.language.Array;
        final boolean isTuple$32 = iterable$30 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$30).$getArray$() != null;
        .java.lang.Object elem$26 = null;
        final .java.lang.Object array$33;
        int i$34 = 0;
        final int length$35;
        if (isTuple$32) {
            array$33 = ((.ceylon.language.Tuple)iterable$30).$getArray$();
            i$34 = ((.ceylon.language.Tuple)iterable$30).$getFirst$();
            length$35 = i$34 + ((.ceylon.language.Tuple)iterable$30).$getLength$();
        } else if (isArray$31) {
            array$33 = ((.ceylon.language.Array)iterable$30).toArray();
            length$35 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$33);
        } else {
            array$33 = null;
            length$35 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$27 = isTuple$32 || isArray$31 ? null : iterable$30.iterator();
        loop_2: while (isTuple$32 || isArray$31 ? i$34 < length$35 : !((elem$26 = index$iterator$$27.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$32 || isArray$31) elem$26 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$33, i$34++);
            final long index = ((.ceylon.language.Integer)elem$26).longValue();
            if (someBoolean) {
                from$24 = index;
                final long from$29 = from$24;
                final long x = from$29 + 1L;
                doforelse$25 = false;
                break loop_2;
            }
        }
        if (doforelse$25) {
            from$24 = 0L;
            final long from$36 = from$24;
        }
        from = from$24;
        return from;
    }
}
final class bug1227_ifBreak_specifiedElse_opt_ {
    
    private bug1227_ifBreak_specifiedElse_opt_() {
    }
    
    static long bug1227_ifBreak_specifiedElse_opt() {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$37 = 0L;
        boolean doforelse$38 = true;
        final long $ceylontmp$first$40 = 1L;
        final long $ceylontmp$last$41 = 10L;
        final boolean $ceylontmp$increasing$42 = .ceylon.language.Integer.offset($ceylontmp$last$41, $ceylontmp$first$40) >= 0;
        final long $ceylontmp$incr$43 = $ceylontmp$increasing$42 ? 1L : -1L;
        long index$46 = $ceylontmp$first$40;
        long $ceylontmp$element$45 = $ceylontmp$first$40;
        boolean $ceylontmp$f$44 = false;
        loop_3: do {
            if ($ceylontmp$f$44) $ceylontmp$element$45 += $ceylontmp$incr$43;
            $ceylontmp$f$44 = true;
            index$46 = $ceylontmp$element$45;
            final long index = index$46;
            $ceylontmp$continue$39: do {
                if (someBoolean) {
                    from$37 = index;
                    final long from$48 = from$37;
                    final long x = from$48 + 1L;
                    doforelse$38 = false;
                    break loop_3;
                }
            }             while (false);
        }         while ($ceylontmp$increasing$42 ? index$46 - $ceylontmp$last$41 != 0L : index$46 - $ceylontmp$last$41 != 0L);
        if (doforelse$38) {
            from$37 = 0L;
            final long from$49 = from$37;
        }
        from = from$37;
        return from;
    }
}
final class bug1227_ifBreak_elseBreak_specifiedElse_ {
    
    private bug1227_ifBreak_elseBreak_specifiedElse_() {
    }
    
    static long bug1227_ifBreak_elseBreak_specifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$50 = 0L;
        boolean doforelse$51 = true;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$57 = l;
        final boolean isArray$58 = iterable$57 instanceof .ceylon.language.Array;
        final boolean isTuple$59 = iterable$57 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$57).$getArray$() != null;
        .java.lang.Object elem$52 = null;
        final .java.lang.Object array$60;
        int i$61 = 0;
        final int length$62;
        if (isTuple$59) {
            array$60 = ((.ceylon.language.Tuple)iterable$57).$getArray$();
            i$61 = ((.ceylon.language.Tuple)iterable$57).$getFirst$();
            length$62 = i$61 + ((.ceylon.language.Tuple)iterable$57).$getLength$();
        } else if (isArray$58) {
            array$60 = ((.ceylon.language.Array)iterable$57).toArray();
            length$62 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$60);
        } else {
            array$60 = null;
            length$62 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$53 = isTuple$59 || isArray$58 ? null : iterable$57.iterator();
        loop_4: while (isTuple$59 || isArray$58 ? i$61 < length$62 : !((elem$52 = index$iterator$$53.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$59 || isArray$58) elem$52 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$60, i$61++);
            final long index = ((.ceylon.language.Integer)elem$52).longValue();
            if (someBoolean) {
                from$50 = index;
                final long from$56 = from$50;
                
                final class ohNo_ {
                    
                    private ohNo_() {
                    }
                    
                    long ohNo() {
                        return from$56 + 1L;
                    }
                }
                final ohNo_ ohNo = new ohNo_();
                doforelse$51 = false;
                break loop_4;
            } else {
                from$50 = index + 1L;
                final long from$55 = from$50;
                
                class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
                    
                    C() {
                        final long x = from$55;
                    }
                    
                    @.java.lang.Override
                    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.issues.bug12xx.bug1227_ifBreak_elseBreak_specifiedElse_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                    }
                }
                doforelse$51 = false;
                break loop_4;
            }
        }
        if (doforelse$51) {
            from$50 = 0L;
            final long from$63 = from$50;
        }
        from = from$50;
        return from;
    }
}
final class bug1227_ifBreak_elseBreak_specifiedElse_opt_ {
    
    private bug1227_ifBreak_elseBreak_specifiedElse_opt_() {
    }
    
    static long bug1227_ifBreak_elseBreak_specifiedElse_opt() {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$64 = 0L;
        boolean doforelse$65 = true;
        final long $ceylontmp$first$67 = 1L;
        final long $ceylontmp$last$68 = 10L;
        final boolean $ceylontmp$increasing$69 = .ceylon.language.Integer.offset($ceylontmp$last$68, $ceylontmp$first$67) >= 0;
        final long $ceylontmp$incr$70 = $ceylontmp$increasing$69 ? 1L : -1L;
        long index$73 = $ceylontmp$first$67;
        long $ceylontmp$element$72 = $ceylontmp$first$67;
        boolean $ceylontmp$f$71 = false;
        loop_5: do {
            if ($ceylontmp$f$71) $ceylontmp$element$72 += $ceylontmp$incr$70;
            $ceylontmp$f$71 = true;
            index$73 = $ceylontmp$element$72;
            final long index = index$73;
            $ceylontmp$continue$66: do {
                if (someBoolean) {
                    from$64 = index;
                    final long from$76 = from$64;
                    
                    final class ohNo_ {
                        
                        private ohNo_() {
                        }
                        
                        long ohNo() {
                            return from$76 + 1L;
                        }
                    }
                    final ohNo_ ohNo = new ohNo_();
                    doforelse$65 = false;
                    break loop_5;
                } else {
                    from$64 = index + 1L;
                    final long from$75 = from$64;
                    
                    class C implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
                        
                        C() {
                            final long x = from$75;
                        }
                        
                        @.java.lang.Override
                        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.issues.bug12xx.bug1227_ifBreak_elseBreak_specifiedElse_opt_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(C.class));
                        }
                    }
                    doforelse$65 = false;
                    break loop_5;
                }
            }             while (false);
        }         while ($ceylontmp$increasing$69 ? index$73 - $ceylontmp$last$68 != 0L : index$73 - $ceylontmp$last$68 != 0L);
        if (doforelse$65) {
            from$64 = 0L;
            final long from$77 = from$64;
        }
        from = from$64;
        return from;
    }
}
final class bug1227_ifReturn_specifiedElse_ {
    
    private bug1227_ifReturn_specifiedElse_() {
    }
    
    static long bug1227_ifReturn_specifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$78 = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$83 = l;
        final boolean isArray$84 = iterable$83 instanceof .ceylon.language.Array;
        final boolean isTuple$85 = iterable$83 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$83).$getArray$() != null;
        .java.lang.Object elem$79 = null;
        final .java.lang.Object array$86;
        int i$87 = 0;
        final int length$88;
        if (isTuple$85) {
            array$86 = ((.ceylon.language.Tuple)iterable$83).$getArray$();
            i$87 = ((.ceylon.language.Tuple)iterable$83).$getFirst$();
            length$88 = i$87 + ((.ceylon.language.Tuple)iterable$83).$getLength$();
        } else if (isArray$84) {
            array$86 = ((.ceylon.language.Array)iterable$83).toArray();
            length$88 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$86);
        } else {
            array$86 = null;
            length$88 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$80 = isTuple$85 || isArray$84 ? null : iterable$83.iterator();
        loop_6: while (isTuple$85 || isArray$84 ? i$87 < length$88 : !((elem$79 = index$iterator$$80.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$85 || isArray$84) elem$79 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$86, i$87++);
            final long index = ((.ceylon.language.Integer)elem$79).longValue();
            if (someBoolean) {
                from$78 = index;
                final long from$82 = from$78;
                
                final class ohNo_ {
                    
                    private ohNo_() {
                    }
                    
                    long ohNo() {
                        return from$82 + 1L;
                    }
                }
                final ohNo_ ohNo = new ohNo_();
                return from$78;
            }
        }
        from$78 = 0L;
        final long from$89 = from$78;
        from = from$78;
        return from;
    }
}
final class bug1227_ifReturn_specifiedElse_opt_ {
    
    private bug1227_ifReturn_specifiedElse_opt_() {
    }
    
    static long bug1227_ifReturn_specifiedElse_opt() {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$90 = 0L;
        final long $ceylontmp$first$92 = 1L;
        final long $ceylontmp$last$93 = 10L;
        final boolean $ceylontmp$increasing$94 = .ceylon.language.Integer.offset($ceylontmp$last$93, $ceylontmp$first$92) >= 0;
        final long $ceylontmp$incr$95 = $ceylontmp$increasing$94 ? 1L : -1L;
        long index$98 = $ceylontmp$first$92;
        long $ceylontmp$element$97 = $ceylontmp$first$92;
        boolean $ceylontmp$f$96 = false;
        loop_7: do {
            if ($ceylontmp$f$96) $ceylontmp$element$97 += $ceylontmp$incr$95;
            $ceylontmp$f$96 = true;
            index$98 = $ceylontmp$element$97;
            final long index = index$98;
            $ceylontmp$continue$91: do {
                if (someBoolean) {
                    from$90 = index;
                    final long from$100 = from$90;
                    
                    final class ohNo_ {
                        
                        private ohNo_() {
                        }
                        
                        long ohNo() {
                            return from$100 + 1L;
                        }
                    }
                    final ohNo_ ohNo = new ohNo_();
                    return from$90;
                }
            }             while (false);
        }         while ($ceylontmp$increasing$94 ? index$98 - $ceylontmp$last$93 != 0L : index$98 - $ceylontmp$last$93 != 0L);
        from$90 = 0L;
        final long from$101 = from$90;
        from = from$90;
        return from;
    }
}
final class bug1227_ifThrow_specifiedElse_ {
    
    private bug1227_ifThrow_specifiedElse_() {
    }
    
    static long bug1227_ifThrow_specifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$102 = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$107 = l;
        final boolean isArray$108 = iterable$107 instanceof .ceylon.language.Array;
        final boolean isTuple$109 = iterable$107 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$107).$getArray$() != null;
        .java.lang.Object elem$103 = null;
        final .java.lang.Object array$110;
        int i$111 = 0;
        final int length$112;
        if (isTuple$109) {
            array$110 = ((.ceylon.language.Tuple)iterable$107).$getArray$();
            i$111 = ((.ceylon.language.Tuple)iterable$107).$getFirst$();
            length$112 = i$111 + ((.ceylon.language.Tuple)iterable$107).$getLength$();
        } else if (isArray$108) {
            array$110 = ((.ceylon.language.Array)iterable$107).toArray();
            length$112 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$110);
        } else {
            array$110 = null;
            length$112 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$104 = isTuple$109 || isArray$108 ? null : iterable$107.iterator();
        loop_8: while (isTuple$109 || isArray$108 ? i$111 < length$112 : !((elem$103 = index$iterator$$104.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$109 || isArray$108) elem$103 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$110, i$111++);
            final long index = ((.ceylon.language.Integer)elem$103).longValue();
            if (someBoolean) {
                from$102 = index;
                final long from$106 = from$102;
                throw new .ceylon.language.Exception(null, null);
            }
        }
        from$102 = 0L;
        final long from$113 = from$102;
        from = from$102;
        return from;
    }
}
final class bug1227_ifThrow_specifiedElse_opt_ {
    
    private bug1227_ifThrow_specifiedElse_opt_() {
    }
    
    static long bug1227_ifThrow_specifiedElse_opt() {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$114 = 0L;
        final long $ceylontmp$first$116 = 1L;
        final long $ceylontmp$last$117 = 10L;
        final boolean $ceylontmp$increasing$118 = .ceylon.language.Integer.offset($ceylontmp$last$117, $ceylontmp$first$116) >= 0;
        final long $ceylontmp$incr$119 = $ceylontmp$increasing$118 ? 1L : -1L;
        long index$122 = $ceylontmp$first$116;
        long $ceylontmp$element$121 = $ceylontmp$first$116;
        boolean $ceylontmp$f$120 = false;
        loop_9: do {
            if ($ceylontmp$f$120) $ceylontmp$element$121 += $ceylontmp$incr$119;
            $ceylontmp$f$120 = true;
            index$122 = $ceylontmp$element$121;
            final long index = index$122;
            $ceylontmp$continue$115: do {
                if (someBoolean) {
                    from$114 = index;
                    final long from$124 = from$114;
                    throw new .ceylon.language.Exception(null, null);
                }
            }             while (false);
        }         while ($ceylontmp$increasing$118 ? index$122 - $ceylontmp$last$117 != 0L : index$122 - $ceylontmp$last$117 != 0L);
        from$114 = 0L;
        final long from$125 = from$114;
        from = from$114;
        return from;
    }
}
final class bug1227_for2_ifReturn_specifiedElse_ {
    
    private bug1227_for2_ifReturn_specifiedElse_() {
    }
    
    static long bug1227_for2_ifReturn_specifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        long from$126 = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$139 = l;
        final boolean isArray$140 = iterable$139 instanceof .ceylon.language.Array;
        final boolean isTuple$141 = iterable$139 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$139).$getArray$() != null;
        .java.lang.Object elem$127 = null;
        final .java.lang.Object array$142;
        int i$143 = 0;
        final int length$144;
        if (isTuple$141) {
            array$142 = ((.ceylon.language.Tuple)iterable$139).$getArray$();
            i$143 = ((.ceylon.language.Tuple)iterable$139).$getFirst$();
            length$144 = i$143 + ((.ceylon.language.Tuple)iterable$139).$getLength$();
        } else if (isArray$140) {
            array$142 = ((.ceylon.language.Array)iterable$139).toArray();
            length$144 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$142);
        } else {
            array$142 = null;
            length$144 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$128 = isTuple$141 || isArray$140 ? null : iterable$139.iterator();
        loop_10: while (isTuple$141 || isArray$140 ? i$143 < length$144 : !((elem$127 = index$iterator$$128.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$141 || isArray$140) elem$127 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$142, i$143++);
            final long index = ((.ceylon.language.Integer)elem$127).longValue();
            final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$133 = l;
            final boolean isArray$134 = iterable$133 instanceof .ceylon.language.Array;
            final boolean isTuple$135 = iterable$133 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$133).$getArray$() != null;
            .java.lang.Object elem$129 = null;
            final .java.lang.Object array$136;
            int i$137 = 0;
            final int length$138;
            if (isTuple$135) {
                array$136 = ((.ceylon.language.Tuple)iterable$133).$getArray$();
                i$137 = ((.ceylon.language.Tuple)iterable$133).$getFirst$();
                length$138 = i$137 + ((.ceylon.language.Tuple)iterable$133).$getLength$();
            } else if (isArray$134) {
                array$136 = ((.ceylon.language.Array)iterable$133).toArray();
                length$138 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$136);
            } else {
                array$136 = null;
                length$138 = 0;
            }
            .ceylon.language.Iterator<? extends .ceylon.language.Integer> index2$iterator$$130 = isTuple$135 || isArray$134 ? null : iterable$133.iterator();
            loop_11: while (isTuple$135 || isArray$134 ? i$137 < length$138 : !((elem$129 = index2$iterator$$130.next()) instanceof .ceylon.language.Finished)) {
                if (isTuple$135 || isArray$134) elem$129 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$136, i$137++);
                final long index2 = ((.ceylon.language.Integer)elem$129).longValue();
                if (someBoolean) {
                    from$126 = index + index2;
                    final long from$132 = from$126;
                    return from$126;
                }
            }
            from = from$126;
        }
        from = 0L;
        final long from$145 = from;
        return from;
    }
}
final class bug1227_declaredInside_ {
    
    private bug1227_declaredInside_() {
    }
    
    static long bug1227_declaredInside(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        boolean doforelse$146 = true;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$150 = l;
        final boolean isArray$151 = iterable$150 instanceof .ceylon.language.Array;
        final boolean isTuple$152 = iterable$150 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$150).$getArray$() != null;
        .java.lang.Object elem$147 = null;
        final .java.lang.Object array$153;
        int i$154 = 0;
        final int length$155;
        if (isTuple$152) {
            array$153 = ((.ceylon.language.Tuple)iterable$150).$getArray$();
            i$154 = ((.ceylon.language.Tuple)iterable$150).$getFirst$();
            length$155 = i$154 + ((.ceylon.language.Tuple)iterable$150).$getLength$();
        } else if (isArray$151) {
            array$153 = ((.ceylon.language.Array)iterable$150).toArray();
            length$155 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$153);
        } else {
            array$153 = null;
            length$155 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$148 = isTuple$152 || isArray$151 ? null : iterable$150.iterator();
        loop_12: while (isTuple$152 || isArray$151 ? i$154 < length$155 : !((elem$147 = index$iterator$$148.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$152 || isArray$151) elem$147 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$153, i$154++);
            final long index = ((.ceylon.language.Integer)elem$147).longValue();
            final long from;
            if (someBoolean) {
                from = index;
                
                final class ohNo_ {
                    
                    private ohNo_() {
                    }
                    
                    long ohNo() {
                        return from + 1L;
                    }
                }
                final ohNo_ ohNo = new ohNo_();
                doforelse$146 = false;
                break loop_12;
            }
        }
        if (doforelse$146) {
            return 0L;
        }
        return 0L;
    }
}
final class bug1227_onlySpecifiedElse_ {
    
    private bug1227_onlySpecifiedElse_() {
    }
    
    static long bug1227_onlySpecifiedElse(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        final long from;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$158 = l;
        final boolean isArray$159 = iterable$158 instanceof .ceylon.language.Array;
        final boolean isTuple$160 = iterable$158 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$158).$getArray$() != null;
        .java.lang.Object elem$156 = null;
        final .java.lang.Object array$161;
        int i$162 = 0;
        final int length$163;
        if (isTuple$160) {
            array$161 = ((.ceylon.language.Tuple)iterable$158).$getArray$();
            i$162 = ((.ceylon.language.Tuple)iterable$158).$getFirst$();
            length$163 = i$162 + ((.ceylon.language.Tuple)iterable$158).$getLength$();
        } else if (isArray$159) {
            array$161 = ((.ceylon.language.Array)iterable$158).toArray();
            length$163 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$161);
        } else {
            array$161 = null;
            length$163 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$157 = isTuple$160 || isArray$159 ? null : iterable$158.iterator();
        loop_13: while (isTuple$160 || isArray$159 ? i$162 < length$163 : !((elem$156 = index$iterator$$157.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$160 || isArray$159) elem$156 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$161, i$162++);
            final long index = ((.ceylon.language.Integer)elem$156).longValue();
            throw new .ceylon.language.Exception(null, null);
        }
        from = 0L;
        return from;
    }
}
final class bug1227_function_ {
    
    private bug1227_function_() {
    }
    
    static long bug1227_function(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> l) {
        final boolean someBoolean = ((.ceylon.language.Boolean).ceylon.language.nothing_.get_()).booleanValue();
        
        final class from_ {
            
            private from_() {
                this.from = null;
            }
            private .ceylon.language.Callable<? extends .ceylon.language.Integer> from;
            
            long from() {
                if (from == null) throw new .com.redhat.ceylon.compiler.java.language.UninitializedMethodError(); else return from.$call$().longValue();
            }
        }
        final from_ from = new from_();
        boolean doforelse$164 = true;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$168 = l;
        final boolean isArray$169 = iterable$168 instanceof .ceylon.language.Array;
        final boolean isTuple$170 = iterable$168 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$168).$getArray$() != null;
        .java.lang.Object elem$165 = null;
        final .java.lang.Object array$171;
        int i$172 = 0;
        final int length$173;
        if (isTuple$170) {
            array$171 = ((.ceylon.language.Tuple)iterable$168).$getArray$();
            i$172 = ((.ceylon.language.Tuple)iterable$168).$getFirst$();
            length$173 = i$172 + ((.ceylon.language.Tuple)iterable$168).$getLength$();
        } else if (isArray$169) {
            array$171 = ((.ceylon.language.Array)iterable$168).toArray();
            length$173 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$171);
        } else {
            array$171 = null;
            length$173 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> index$iterator$$166 = isTuple$170 || isArray$169 ? null : iterable$168.iterator();
        loop_14: while (isTuple$170 || isArray$169 ? i$172 < length$173 : !((elem$165 = index$iterator$$166.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$170 || isArray$169) elem$165 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$171, i$172++);
            final long index = ((.ceylon.language.Integer)elem$165).longValue();
            if (someBoolean) {
                from.from = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "Integer()", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Integer $call$() {
                        return .ceylon.language.Integer.instance(index);
                    }
                };
                doforelse$164 = false;
                break loop_14;
            }
        }
        if (doforelse$164) {
            return 0L;
        }
        return from.from();
    }
}