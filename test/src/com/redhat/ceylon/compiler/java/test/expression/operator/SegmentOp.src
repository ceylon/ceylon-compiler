package com.redhat.ceylon.compiler.java.test.expression.operator;

class SegmentOp implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SegmentOp() {
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> $int(final long start, final long length) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> segment = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.measure_.<.ceylon.language.Integer>measure(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(start), length);
        return segment;
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Character> $char(final int start, final long length) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Character> segment = (.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential).ceylon.language.measure_.<.ceylon.language.Character>measure(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(start), length);
        return segment;
    }
    
    public final <T extends .ceylon.language.Enumerable<T>>.ceylon.language.Sequential<? extends T> t(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T start, final long length) {
        final .ceylon.language.Sequential<? extends T> segment = (.ceylon.language.Sequential<? extends T>)(.ceylon.language.Sequential).ceylon.language.measure_.<T>measure($reified$T, (T)start, length);
        return (.ceylon.language.Sequential<? extends T>)(.ceylon.language.Sequential)segment;
    }
    
    public final <T extends .ceylon.language.Enumerable<T>, S>.ceylon.language.Sequential<? extends T> t2(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .java.lang.Object start, final long length) {
        final .ceylon.language.Sequential<? extends T> segment = (.ceylon.language.Sequential<? extends T>)(.ceylon.language.Sequential).ceylon.language.measure_.<T>measure($reified$T, (T)start, length);
        return (.ceylon.language.Sequential<? extends T>)(.ceylon.language.Sequential)segment;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.SegmentOp.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.SegmentOp.class);
}