package com.redhat.ceylon.compiler.java.test.expression.invoke;

class InvocationWithVarargsAndComprehensions implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    InvocationWithVarargsAndComprehensions() {
    }
    
    private final void m$priv$() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$b$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m$priv$$canonical$($ceylontmp$b$0);
            }
            returning null;
        );
    }
    
    private void m$priv$$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> b) {
        final .ceylon.language.Sequence t = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.String.instance("a"),
                .ceylon.language.empty_.get_()});
    }
    
    private final void m$priv$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> b) {
        (
            let
            {
                m$priv$$canonical$(b);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.invoke.InvocationWithVarargsAndComprehensions.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.InvocationWithVarargsAndComprehensions.class);
}