package com.redhat.ceylon.compiler.java.test.expression.invoke;

class DefaultedAndSequenced implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    DefaultedAndSequenced() {
    }
    
    private final void m$priv$(final .java.lang.String s) {
        (
            let
            {
                long $ceylontmp$i$0 = m$i(s);
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m$priv$$canonical$(s, $ceylontmp$i$0, $ceylontmp$b$1);
            }
            returning null;
        );
    }
    
    private final long m$i(final .java.lang.String s) {
        return 1L;
    }
    
    private final void m$priv$(final .java.lang.String s, final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$b$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m$priv$$canonical$(s, i, $ceylontmp$b$2);
            }
            returning null;
        );
    }
    
    private void m$priv$$canonical$(final .java.lang.String s, final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> b) {
    }
    
    private final void m$priv$(final .java.lang.String s, final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> b) {
        (
            let
            {
                m$priv$$canonical$(s, i, b);
            }
            returning null;
        );
    }
    
    private final .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced self$priv$() {
        return this;
    }
    
    private final void positional$priv$() {
        m$priv$("");
        m$priv$("", 2L);
        m$priv$("", 2L, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(false),
                .ceylon.language.Boolean.instance(false)});
        m$priv$("", 2L, x);
    }
    
    private final void qmePositional$priv$() {
        self$priv$().m$priv$("");
        self$priv$().m$priv$("", 2L);
        self$priv$().m$priv$("", 2L, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(false),
                .ceylon.language.Boolean.instance(false)});
        self$priv$().m$priv$("", 2L, x);
    }
    
    private final void qtePositional$priv$() {
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv$("");
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv$("", 2L);
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv$("", 2L, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)}));
        final .ceylon.language.Sequential<? extends .ceylon.language.Boolean> x = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(false),
                .ceylon.language.Boolean.instance(false)});
        new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced().m$priv$("", 2L, x);
    }
    
    private final void namedArgs$priv$() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$3$argthis$ = this;
                .java.lang.String arg$3$0 = "";
                long arg$3$1 = arg$3$argthis$.m$i(arg$3$0);
                .ceylon.language.Sequential arg$3$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m$priv$(arg$3$0, arg$3$1, arg$3$2);
            }
            returning null;
        );
        (
            let
            {
                .java.lang.String arg$4$0 = "";
                long arg$4$1 = 2L;
                .ceylon.language.Sequential arg$4$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                m$priv$(arg$4$0, arg$4$1, arg$4$2);
            }
            returning null;
        );
        (
            let
            {
                .java.lang.String arg$5$0 = "";
                long arg$5$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$5$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)});
                m$priv$(arg$5$0, arg$5$1, arg$5$2);
            }
            returning null;
        );
        (
            let
            {
                .java.lang.String arg$6$0 = "";
                long arg$6$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$6$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.true_.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        .ceylon.language.Boolean.instance(true)});
                m$priv$(arg$6$0, arg$6$1, arg$6$2);
            }
            returning null;
        );
    }
    
    private final void qmeNamedArgs$priv$() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$7$callable$ = self$priv$();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$7$argthis$ = arg$7$callable$;
                .java.lang.String arg$7$0 = "";
                long arg$7$1 = arg$7$argthis$.m$i(arg$7$0);
                .ceylon.language.Sequential arg$7$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$7$callable$.m$priv$(arg$7$0, arg$7$1, arg$7$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$8$callable$ = self$priv$();
                .java.lang.String arg$8$0 = "";
                long arg$8$1 = 2L;
                .ceylon.language.Sequential arg$8$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$8$callable$.m$priv$(arg$8$0, arg$8$1, arg$8$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$9$callable$ = self$priv$();
                .java.lang.String arg$9$0 = "";
                long arg$9$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$9$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)});
                arg$9$callable$.m$priv$(arg$9$0, arg$9$1, arg$9$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$10$callable$ = self$priv$();
                .java.lang.String arg$10$0 = "";
                long arg$10$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$10$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.true_.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        .ceylon.language.Boolean.instance(true)});
                arg$10$callable$.m$priv$(arg$10$0, arg$10$1, arg$10$2);
            }
            returning null;
        );
    }
    
    private final void qteNamedArgs$priv$() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$11$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$11$argthis$ = arg$11$callable$;
                .java.lang.String arg$11$0 = "";
                long arg$11$1 = arg$11$argthis$.m$i(arg$11$0);
                .ceylon.language.Sequential arg$11$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$11$callable$.m$priv$(arg$11$0, arg$11$1, arg$11$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$12$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .java.lang.String arg$12$0 = "";
                long arg$12$1 = 2L;
                .ceylon.language.Sequential arg$12$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                arg$12$callable$.m$priv$(arg$12$0, arg$12$1, arg$12$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$13$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .java.lang.String arg$13$0 = "";
                long arg$13$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$13$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)});
                arg$13$callable$.m$priv$(arg$13$0, arg$13$1, arg$13$2);
            }
            returning null;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced arg$14$callable$ = new .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced();
                .java.lang.String arg$14$0 = "";
                long arg$14$1 = 2L;
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> arg$14$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.true_.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        .ceylon.language.Boolean.instance(true)});
                arg$14$callable$.m$priv$(arg$14$0, arg$14$1, arg$14$2);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.invoke.DefaultedAndSequenced.class);
}