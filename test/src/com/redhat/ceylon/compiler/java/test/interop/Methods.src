package com.redhat.ceylon.compiler.java.test.interop;

final class methods_ {
    
    private methods_() {
    }
    
    static void methods() {
        final .java.io.File f1 = new .java.io.File("file1");
        final .java.io.File f2 = new .java.io.File("file2");
        .ceylon.language.print_.print(.ceylon.language.Boolean.instance(f1.canRead()));
        final long cmp = f1.compareTo(f2);
        f1.listFiles();
    }
}
final class overloadedMethodsAndSubClasses_ {
    
    private overloadedMethodsAndSubClasses_() {
    }
    
    static void overloadedMethodsAndSubClasses() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        inst.method();
        inst.method(1L);
        inst.method(1L, 2L);
        inst.topMethod();
    }
}
final class overloadedConstructors_ {
    
    private overloadedConstructors_() {
    }
    
    static void overloadedConstructors() {
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass();
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass inst2 = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass(2L);
    }
}
class OverloadedMembersAndSubClasses extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses() {
        super();
    }
    
    private final void test$priv$() {
        method();
        method(1L);
        method(1L, 2L);
        topMethod();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses.class);
}
class OverloadedMembersAndSubClasses2 extends .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembersSubClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    OverloadedMembersAndSubClasses2() {
        super(2L);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.OverloadedMembersAndSubClasses2.class);
}
final class variadicMethods_ {
    
    private variadicMethods_() {
    }
    
    static void variadicMethods() {
        
        final class box_ {
            
            private box_() {
            }
            
            <T>T box(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t) {
                return t;
            }
        }
        final box_ box = new box_();
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        java.variadicBoolean(new boolean[]{
                true,
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)).booleanValue(),
                true});
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray((.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray((.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)})));
        java.variadicBoolean(.com.redhat.ceylon.compiler.java.Util.toBooleanArray((.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                .ceylon.language.Boolean.instance(true)}), true, box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)).booleanValue()));
        java.variadicCeylonBoolean(.ceylon.language.Boolean.instance(true), box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)), .ceylon.language.Boolean.instance(true));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$0$0 = (.ceylon.language.Sequential<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp$0$0, new .ceylon.language.Boolean[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$0$0.getSize())]);
        ));
        java.variadicCeylonBoolean((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Boolean> $ceylontmp$1$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.Boolean.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Boolean.instance(true),
                        box.<.ceylon.language.Boolean>box(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(false)),
                        .ceylon.language.Boolean.instance(true)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Boolean>toArray($ceylontmp$1$0, new .ceylon.language.Boolean[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$1$0.getSize())]);
        ));
        java.variadicChar(new char[]{
                (char)97,
                (char)box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(98)).intValue(),
                (char)99});
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicChar(.com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequence<? extends .ceylon.language.Character>).ceylon.language.Tuple.instance(.ceylon.language.Character.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Character.instance(97),
                box.<.ceylon.language.Character>box(.ceylon.language.Character.$TypeDescriptor$, .ceylon.language.Character.instance(98)),
                .ceylon.language.Character.instance(99)})));
        java.variadicByte(new byte[]{
                (byte)1L,
                box.<.ceylon.language.Byte>box(.ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Byte.instance((byte)2L)).byteValue(),
                (byte)3L});
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequential<? extends .ceylon.language.Byte>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequence<? extends .ceylon.language.Byte>).ceylon.language.Tuple.instance(.ceylon.language.Byte.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Byte.instance((byte)1L),
                box.<.ceylon.language.Byte>box(.ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Byte.instance((byte)2L)),
                .ceylon.language.Byte.instance((byte)3L)})));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequence<? extends .ceylon.language.Byte>).ceylon.language.Tuple.instance(.ceylon.language.Byte.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Byte.instance((byte)1L),
                box.<.ceylon.language.Byte>box(.ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Byte.instance((byte)2L)),
                .ceylon.language.Byte.instance((byte)3L)}), (byte)1L));
        java.variadicByte(.com.redhat.ceylon.compiler.java.Util.toByteArray((.ceylon.language.Sequence<? extends .ceylon.language.Byte>).ceylon.language.Tuple.instance(.ceylon.language.Byte.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Byte.instance((byte)1L),
                box.<.ceylon.language.Byte>box(.ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Byte.instance((byte)2L)),
                .ceylon.language.Byte.instance((byte)3L)}), (byte)1L, box.<.ceylon.language.Byte>box(.ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Byte.instance((byte)2L)).byteValue()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicShort(.com.redhat.ceylon.compiler.java.Util.toShortArray((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        java.variadicLong(new long[]{
                1L,
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)).longValue(),
                3L});
        java.variadicLong(new long[]{1L});
        java.variadicLong(new long[]{box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L)).longValue()});
        java.variadicLong();
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray((.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)})));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> empty = (.ceylon.language.Sequential<? extends .ceylon.language.Integer>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> full = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L)});
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(empty));
        java.variadicLong(.com.redhat.ceylon.compiler.java.Util.toLongArray(full));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicFloat(new float[]{
                (float)1.0,
                (float)box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)).doubleValue(),
                (float)3.0});
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>).ceylon.language.Tuple.instance(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>).ceylon.language.Tuple.instance(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>).ceylon.language.Tuple.instance(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)}), 1.0, box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)).doubleValue()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray((.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicDouble(.com.redhat.ceylon.compiler.java.Util.toDoubleArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>).ceylon.language.Tuple.instance(.ceylon.language.Float.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Float.instance(1.0),
                box.<.ceylon.language.Float>box(.ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Float.instance(2.0)),
                .ceylon.language.Float.instance(3.0)})));
        java.variadicJavaString("a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")).toString(), "c");
        java.variadicJavaString("a");
        java.variadicJavaString(box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("a")).toString());
        java.variadicJavaString();
        final .ceylon.language.String string = .ceylon.language.String.instance("a");
        java.variadicJavaString((
            let
            {
                .ceylon.language.String $ceylontmp$2 = string;
            }
            returning $ceylontmp$2 != null ? $ceylontmp$2.toString() : null;
        ));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")})));
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                .ceylon.language.String.instance("c")}), "a", box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")).toString()));
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> vals = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("a");
                
                default: 
                    return null;
                
                }
            }
        };
        java.variadicJavaString(.com.redhat.ceylon.compiler.java.Util.toJavaStringArray(vals.sequence()));
        java.variadicCeylonString(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$3$0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$3$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$3$0.getSize())]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$4$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                        .ceylon.language.String.instance("c")});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$4$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$4$0.getSize())]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> emptyString = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> fullString = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$5$0 = emptyString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$5$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$5$0.getSize())]);
        ));
        java.variadicCeylonString((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$6$0 = fullString;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$6$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$6$0.getSize())]);
        ));
        java.variadicObject(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$7$0 = .ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$7$0, new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$7$0.getSize())]);
        ));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$8$0 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")),
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L))});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$8$0, new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$8$0.getSize())]);
        ));
        java.variadicObject(new .java.lang.String("a"), new .java.lang.Integer(.com.redhat.ceylon.compiler.java.Util.toInt(1L)));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$9$0 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class)), new .java.lang.Object[]{
                        new .java.lang.String("a"),
                        new .java.lang.Integer(.com.redhat.ceylon.compiler.java.Util.toInt(1L))});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$9$0, new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$9$0.getSize())]);
        ));
        java.<.ceylon.language.Integer>variadicT(.ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)), .ceylon.language.Integer.instance(3L));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$10$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$10$0, (.ceylon.language.Integer[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$10$0.getSize())]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$11$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                        .ceylon.language.Integer.instance(3L)});
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$11$0, (.ceylon.language.Integer[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$11$0.getSize())]);
        ));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)),
                .ceylon.language.Integer.instance(3L)});
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$12$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$12$0, (.ceylon.language.Integer[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$12$0.getSize())]);
        ));
        java.<.ceylon.language.Integer>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$13$0 = sequence;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.Integer>toArray($ceylontmp$13$0, (.ceylon.language.Integer[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$13$0.getSize()) + 2], .ceylon.language.Integer.instance(1L), box.<.ceylon.language.Integer>box(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(2L)));
        ));
        java.<.ceylon.language.String>variadicT(.ceylon.language.String.instance("a"), box.<.ceylon.language.String>box(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("b")), .ceylon.language.String.instance("c"));
        java.<.ceylon.language.String>variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$14$0 = vals.sequence();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$14$0, (.ceylon.language.String[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$14$0.getSize())]);
        ));
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava2<.ceylon.language.String> java2 = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava2<.ceylon.language.String>();
        java2.variadicT((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$15$0 = vals.sequence();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$15$0, (.ceylon.language.String[])new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$15$0.getSize())]);
        ));
        java.variadicObject((
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$17$0 = new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                    
                    public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                        return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                            {
                                $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                            }
                            private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                            private .ceylon.language.Integer i;
                            private boolean i$exhausted$;
                            
                            private final boolean i() {
                                final .java.lang.Object $ceylontmp$item$16 = $iterator$0.next();
                                i$exhausted$ = $ceylontmp$item$16 == .ceylon.language.finished_.get_();
                                if (i$exhausted$) {
                                    return false;
                                } else {
                                    i = (.ceylon.language.Integer)$ceylontmp$item$16;
                                    return true;
                                }
                            }
                            
                            public final .java.lang.Object next() {
                                if (this.i()) {
                                    final .ceylon.language.Integer i = this.i;
                                    return i;
                                } else return .ceylon.language.finished_.get_();
                            }
                        };
                    }
                }.sequence();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.lang.Object>toArray($ceylontmp$17$0, new .java.lang.Object[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$17$0.getSize())]);
        ));
        java.variadicInt(.com.redhat.ceylon.compiler.java.Util.toIntArray(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$18 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$18 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$18;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return i;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence()));
    }
}
final class tupleSpreading_ {
    
    private tupleSpreading_() {
    }
    
    static void tupleSpreading() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .ceylon.language.Sequence tuple = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.true_.$TypeDescriptor$, .ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.Character.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.TypesJava.class)), new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Byte.instance((byte)1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Float.instance(5.0),
                .ceylon.language.Float.instance(6.0),
                .ceylon.language.Character.instance(97),
                .ceylon.language.String.instance("foo"),
                java});
        java.takeAll(true, (byte)1L, .com.redhat.ceylon.compiler.java.Util.toShort(2L), .com.redhat.ceylon.compiler.java.Util.toInt(3L), 4L, (float)5.0, 6.0, (char)97, "foo", java);
        (
            let
            {
                .ceylon.language.Sequential tuple$19 = (.ceylon.language.Sequential)tuple;
                java.takeAll(((.ceylon.language.Boolean)tuple$19.get(.ceylon.language.Integer.instance(0L))).booleanValue(), ((.ceylon.language.Byte)tuple$19.get(.ceylon.language.Integer.instance(1L))).byteValue(), .com.redhat.ceylon.compiler.java.Util.toShort(((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(2L))).longValue()), .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(3L))).longValue()), ((.ceylon.language.Integer)tuple$19.get(.ceylon.language.Integer.instance(4L))).longValue(), (float)((.ceylon.language.Float)tuple$19.get(.ceylon.language.Integer.instance(5L))).doubleValue(), ((.ceylon.language.Float)tuple$19.get(.ceylon.language.Integer.instance(6L))).doubleValue(), (char)((.ceylon.language.Character)tuple$19.get(.ceylon.language.Integer.instance(7L))).intValue(), ((.ceylon.language.String)tuple$19.get(.ceylon.language.Integer.instance(8L))).toString(), tuple$19.get(.ceylon.language.Integer.instance(9L)));
            }
            returning null;
        );
        (
            let
            {
                .ceylon.language.Sequential tuple$21 = (.ceylon.language.Sequential)tuple.getRest();
                java.takeAll(true, ((.ceylon.language.Byte)tuple$21.get(.ceylon.language.Integer.instance(0L))).byteValue(), .com.redhat.ceylon.compiler.java.Util.toShort(((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(1L))).longValue()), .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(2L))).longValue()), ((.ceylon.language.Integer)tuple$21.get(.ceylon.language.Integer.instance(3L))).longValue(), (float)((.ceylon.language.Float)tuple$21.get(.ceylon.language.Integer.instance(4L))).doubleValue(), ((.ceylon.language.Float)tuple$21.get(.ceylon.language.Integer.instance(5L))).doubleValue(), (char)((.ceylon.language.Character)tuple$21.get(.ceylon.language.Integer.instance(6L))).intValue(), ((.ceylon.language.String)tuple$21.get(.ceylon.language.Integer.instance(7L))).toString(), tuple$21.get(.ceylon.language.Integer.instance(8L)));
            }
            returning null;
        );
        final .ceylon.language.Sequence tuple2 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.true_.$TypeDescriptor$, .ceylon.language.Byte.$TypeDescriptor$, .ceylon.language.Character.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Boolean.instance(true),
                .ceylon.language.Byte.instance((byte)1L),
                .ceylon.language.Character.instance(97),
                .ceylon.language.Character.instance(98),
                .ceylon.language.Character.instance(99)});
        (
            let
            {
                .ceylon.language.Sequential tuple$23 = (.ceylon.language.Sequential)tuple2;
                java.takeAllVariadic(((.ceylon.language.Boolean)tuple$23.get(.ceylon.language.Integer.instance(0L))).booleanValue(), ((.ceylon.language.Byte)tuple$23.get(.ceylon.language.Integer.instance(1L))).byteValue(), .com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential)tuple$23.spanFrom(.ceylon.language.Integer.instance(2L))));
            }
            returning null;
        );
        final .ceylon.language.Sequence<? extends .ceylon.language.Character> tuple3 = (.ceylon.language.Sequence<? extends .ceylon.language.Character>).ceylon.language.Tuple.instance(.ceylon.language.Character.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Character.instance(99),
                .ceylon.language.Character.instance(100)});
        java.takeAllVariadic(true, (byte)1L, .com.redhat.ceylon.compiler.java.Util.toCharArray((.ceylon.language.Sequential<? extends .ceylon.language.Character>)(.ceylon.language.Sequential)tuple3, 97, 98));
    }
}
final class comprehensions_ {
    
    private comprehensions_() {
    }
    
    static void comprehensions() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$25 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$25 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$25;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence()));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$26 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$26 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$26;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence(), 1.0));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$27 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$27 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$27;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence()));
        java.variadicFloat(.com.redhat.ceylon.compiler.java.Util.toFloatArray((.ceylon.language.Sequence<? extends .ceylon.language.Float>)(.ceylon.language.Sequence)new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Float, .java.lang.Object>(.ceylon.language.Float.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
            
            public final .ceylon.language.Iterator<.ceylon.language.Float> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Float>(.ceylon.language.Float.$TypeDescriptor$){
                    {
                        $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L)).iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer i;
                    private boolean i$exhausted$;
                    
                    private final boolean i() {
                        final .java.lang.Object $ceylontmp$item$28 = $iterator$0.next();
                        i$exhausted$ = $ceylontmp$item$28 == .ceylon.language.finished_.get_();
                        if (i$exhausted$) {
                            return false;
                        } else {
                            i = (.ceylon.language.Integer)$ceylontmp$item$28;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.i()) {
                            final .ceylon.language.Integer i = this.i;
                            return .ceylon.language.Float.instance(2.0);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence(), 1.0));
    }
}
final class moreOverloads_ {
    
    private moreOverloads_() {
    }
    
    static void moreOverloads() {
        .java.nio.file.FileSystems.newFileSystem(.java.net.URI.create(""), new .java.util.HashMap<.java.lang.String, .java.lang.Object>());
        new .java.io.BufferedReader(new .java.io.InputStreamReader(null));
        .com.redhat.ceylon.compiler.java.Util.checkNull(.java.nio.channels.ServerSocketChannel.open()).bind(new .java.net.InetSocketAddress("", .com.redhat.ceylon.compiler.java.Util.toInt(1L)));
        .java.nio.file.Files.copy(.java.nio.file.Paths.get(new .java.net.URI("", "", "")), .java.nio.file.Paths.get(new .java.net.URI("")), (
            let
            {
                .ceylon.language.Sequential<? extends .java.nio.file.CopyOption> $ceylontmp$29$0 = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.java.nio.file.StandardCopyOption, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.nio.file.StandardCopyOption.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.nio.file.StandardCopyOption.class)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 2, false){
                    
                    @.java.lang.Override
                    protected final .java.lang.Object $evaluate$(int $index$) {
                        switch ($index$) {
                        case 0: 
                            return .java.nio.file.StandardCopyOption.REPLACE_EXISTING;
                        
                        case 1: 
                            return .java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;
                        
                        default: 
                            return null;
                        
                        }
                    }
                }.sequence();
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.java.nio.file.CopyOption>toArray($ceylontmp$29$0, new .java.nio.file.CopyOption[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$29$0.getSize()) + 1], .java.nio.file.StandardCopyOption.ATOMIC_MOVE);
        ));
    }
}
final class overloadsWithPrimitives_ {
    
    private overloadsWithPrimitives_() {
    }
    
    static void overloadsWithPrimitives() {
        final .com.redhat.ceylon.compiler.java.test.interop.TypesJava java = new .com.redhat.ceylon.compiler.java.test.interop.TypesJava();
        final .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembers<.java.lang.Object> overload = new .com.redhat.ceylon.compiler.java.test.interop.JavaWithOverloadedMembers<.java.lang.Object>();
        overload.overloadedPrimitive(1L, 2L);
        overload.overloadedPrimitive(java.return_short(), 2L);
        overload.overloadedPrimitive(java.return_int(), 2L);
        overload.overloadedPrimitive(java.return_long(), 2L);
        overload.overloadedPrimitiveVariadic(new long[]{
                1L,
                2L});
        overload.overloadedPrimitiveVariadic(new long[]{
                java.return_short(),
                2L});
        overload.overloadedPrimitiveVariadic(new short[]{java.return_short()});
        overload.overloadedPrimitiveVariadic(new long[]{
                java.return_int(),
                2L});
        overload.overloadedPrimitiveVariadic(new int[]{java.return_int()});
        overload.overloadedPrimitiveVariadic(new long[]{
                java.return_long(),
                2L});
        overload.overloadedPrimitiveVariadic(new long[]{java.return_long()});
        final long a = overload.overloadedPrimitive2(.com.redhat.ceylon.compiler.java.Util.toInt(1L));
        final boolean b = overload.overloadedPrimitive2(.ceylon.language.Boolean.instance(true));
    }
}