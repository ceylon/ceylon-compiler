package com.redhat.ceylon.compiler.java.test.issues.bug08xx;

public class Bug844_Top<Element> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public Bug844_Top(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
        this.firstAttribute = (Element).ceylon.language.nothing_.get_();
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    public Element first() {
        return (Element).ceylon.language.nothing_.get_();
    }
    private final Element firstAttribute;
    
    public Element getFirstAttribute() {
        return firstAttribute;
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Top(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Top.class, $reified$Element);
    }
}
public class Bug844_Bottom<Element, First extends Element> extends .com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Top<Element> {
    
    public Bug844_Bottom(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$First, final First firstAttribute) {
        super($reified$Element);
        this.$reified$Element = $reified$Element;
        this.$reified$First = $reified$First;
        this.firstAttribute = firstAttribute;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$First;
    
    @.java.lang.Override
    public final First first() {
        return (First).ceylon.language.nothing_.get_();
    }
    private final First firstAttribute;
    
    @.java.lang.Override
    public final First getFirstAttribute() {
        return firstAttribute;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Bottom.class, $reified$Element, $reified$First);
    }
}
public abstract class Bug844_Tuple<Element, First extends Element, Rest> extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Sequence<Element> {
    
    public Bug844_Tuple(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$First, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Rest, final First first, final .java.lang.Object rest) {
        super();
        this.$reified$Element = $reified$Element;
        this.$reified$First = $reified$First;
        this.$reified$Rest = $reified$Rest;
        this.first = first;
        this.rest = (.ceylon.language.Sequential<? extends Element>)rest;
        this.$ceylon$language$Sequence$this$ = new .ceylon.language.Sequence$impl<Element>($reified$Element, this);
        this.$ceylon$language$Sequential$this$ = new .ceylon.language.Sequential$impl<Element>($reified$Element, this);
        this.$ceylon$language$List$this$ = new .ceylon.language.List$impl<Element>($reified$Element, this);
        this.$ceylon$language$Collection$this$ = new .ceylon.language.Collection$impl<Element>($reified$Element, this);
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl($reified$Element, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
        this.$ceylon$language$Correspondence$this$ = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element>(.ceylon.language.Integer.$TypeDescriptor$, $reified$Element, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$First;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Rest;
    protected final .ceylon.language.Sequence$impl<Element> $ceylon$language$Sequence$this$;
    
    @.java.lang.Override
    public .ceylon.language.Sequence$impl<? extends Element> $ceylon$language$Sequence$impl() {
        return $ceylon$language$Sequence$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends .ceylon.language.Integer> getKeys() {
        return $ceylon$language$Sequence$this$.getKeys();
    }
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return $ceylon$language$Sequence$this$.getEmpty();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> sequence() {
        return $ceylon$language$Sequence$this$.sequence();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> repeat(final long times) {
        return $ceylon$language$Sequence$this$.repeat(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence<? extends Element> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Sequence$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequence<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Sequence$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withLeading(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (.ceylon.language.Sequence)$ceylon$language$Sequence$this$.withLeading($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence withTrailing(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (.ceylon.language.Sequence)$ceylon$language$Sequence$this$.withTrailing($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence append(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.Sequential<? extends Other> elements) {
        return (.ceylon.language.Sequence)$ceylon$language$Sequence$this$.append($reified$Other, elements);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Sequence prepend(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.Sequential<? extends Other> elements) {
        return (.ceylon.language.Sequence)$ceylon$language$Sequence$this$.prepend($reified$Other, elements);
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Sequence$this$.contains(element);
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$Sequence$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$Sequence$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public Element find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Sequence$this$.find(selecting);
    }
    
    @.java.lang.Override
    public Element findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Sequence$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence slice(final long index) {
        return (.ceylon.language.Sequence<? extends .ceylon.language.List<? extends Element>>)(.ceylon.language.Sequence)$ceylon$language$Sequence$this$.slice(index);
    }
    protected final .ceylon.language.Sequential$impl<Element> $ceylon$language$Sequential$this$;
    
    @.java.lang.Override
    public .ceylon.language.Sequential$impl<? extends Element> $ceylon$language$Sequential$impl() {
        return $ceylon$language$Sequential$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> initial(final long length) {
        return $ceylon$language$Sequential$this$.initial(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> terminal(final long length) {
        return $ceylon$language$Sequential$this$.terminal(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> trim(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$Sequential$this$.trim(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> trimLeading(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$Sequential$this$.trimLeading(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> trimTrailing(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$Sequential$this$.trimTrailing(trimming);
    }
    protected final .ceylon.language.List$impl<Element> $ceylon$language$List$this$;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<? extends Element> $ceylon$language$List$impl() {
        return $ceylon$language$List$this$;
    }
    
    @.java.lang.Override
    public int hashCode() {
        return $ceylon$language$List$this$.hashCode();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object> getPermutations() {
        return $ceylon$language$List$this$.getPermutations();
    }
    
    @.java.lang.Override
    public final Element get(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this$.get(index);
    }
    
    @.java.lang.Override
    public Element getFromLast(final long index) {
        return $ceylon$language$List$this$.getFromLast(index);
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this$.defines(index);
    }
    
    @.java.lang.Override
    public boolean equals(final .java.lang.Object that) {
        return $ceylon$language$List$this$.equals(that);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends Element> sublistFrom(final long from) {
        return $ceylon$language$List$this$.sublistFrom(from);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends Element> sublistTo(final long to) {
        return $ceylon$language$List$this$.sublistTo(to);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends Element> sublist(final long from, final long to) {
        return $ceylon$language$List$this$.sublist(from, to);
    }
    
    @.java.lang.Override
    public final <Other>long patch$from(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list) {
        return $ceylon$language$List$this$.patch$from($reified$Other, list);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list) {
        return (
            let
            {
                long $ceylontmp$from$0 = patch$from($reified$Other, list);
                long $ceylontmp$length$1 = patch$length($reified$Other, list, $ceylontmp$from$0);
            }
            returning patch$canonical$($reified$Other, list, $ceylontmp$from$0, $ceylontmp$length$1);
        );
    }
    
    @.java.lang.Override
    public final <Other>long patch$length(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from) {
        return $ceylon$language$List$this$.patch$length($reified$Other, list, from);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from) {
        return (
            let
            {
                long $ceylontmp$length$2 = patch$length($reified$Other, list, from);
            }
            returning patch$canonical$($reified$Other, list, from, $ceylontmp$length$2);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from, final long length) {
        return (.ceylon.language.List)$ceylon$language$List$this$.patch($reified$Other, list, from, length);
    }
    
    private <Other>.ceylon.language.List patch$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from, final long length) {
        return (.ceylon.language.List)$ceylon$language$List$this$.patch($reified$Other, list, from, length);
    }
    
    @.java.lang.Override
    public boolean startsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.startsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean endsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.endsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean includesAt(final long index, final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includesAt(index, sublist);
    }
    
    @.java.lang.Override
    public boolean includes(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includes(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> inclusions(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.inclusions(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.firstInclusion(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.lastInclusion(sublist);
    }
    
    @.java.lang.Override
    public boolean occursAt(final long index, final .java.lang.Object element) {
        return $ceylon$language$List$this$.occursAt(index, element);
    }
    
    @.java.lang.Override
    public boolean occurs(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurs(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> occurrences(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurrences(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.firstOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.lastOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> indexesWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.indexesWhere(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstIndexWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.firstIndexWhere(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastIndexWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.lastIndexWhere(selecting);
    }
    protected final .ceylon.language.Collection$impl<Element> $ceylon$language$Collection$this$;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<? extends Element> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this$;
    }
    protected final .ceylon.language.Iterable$impl<Element, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends Element, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getPaired() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getPaired();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> getExceptLast() {
        return $ceylon$language$Iterable$this$.getExceptLast();
    }
    
    @.java.lang.Override
    public Element getFromFirst(final long index) {
        return $ceylon$language$Iterable$this$.getFromFirst(index);
    }
    
    @.java.lang.Override
    public .java.lang.Object each(final .ceylon.language.Callable<? extends .java.lang.Object> step) {
        return $ceylon$language$Iterable$this$.each(step);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Result, OtherAbsent>.ceylon.language.Iterable flatMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>> collecting) {
        return (.ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.flatMap($reified$Result, $reified$OtherAbsent, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Type>.ceylon.language.Iterable narrow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Type) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.narrow($reified$Type);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial);
    }
    
    @.java.lang.Override
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> scan(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.scan($reified$Result, initial);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locate(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locate(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends Element> locateLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locateLast(selecting);
    }
    
    @.java.lang.Override
    public Element max(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return (Element)$ceylon$language$Iterable$this$.max(comparing);
    }
    
    @.java.lang.Override
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return $ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends Element> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends Element>, ? extends .java.lang.Object> partition(final long length) {
        return $ceylon$language$Iterable$this$.partition(length);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable product(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends OtherAbsent>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.product($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public final <Other>long interpose$step(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return $ceylon$language$Iterable$this$.interpose$step($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (
            let
            {
                long $ceylontmp$step$3 = interpose$step($reified$Other, element);
            }
            returning interpose$canonical$($reified$Other, element, $ceylontmp$step$3);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    private <Other>.ceylon.language.Iterable interpose$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, Element> $ceylon$language$Correspondence$this$;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends Element> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this$;
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesAny(keys);
    }
    
    @.java.lang.Override
    public <Absent>.ceylon.language.Iterable<? extends Element, ? extends Absent> getAll(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Absent, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends Absent> keys) {
        return $ceylon$language$Correspondence$this$.getAll($reified$Absent, keys);
    }
    private final First first;
    
    @.java.lang.Override
    public final First getFirst() {
        return first;
    }
    private final .ceylon.language.Sequential<? extends Element> rest;
    
    @.java.lang.Override
    public final .ceylon.language.Sequential getRest() {
        return rest;
    }
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return new .java.lang.StringBuilder().append("(").append((
            let
            {
                .ceylon.language.String $ceylontmp$5 = (
                    let
                    {
                        .java.lang.Object safe$4 = getFirst();
                    }
                    returning safe$4 != null ? .ceylon.language.String.instance(safe$4.toString()) : null;
                );
            }
            returning $ceylontmp$5 != null ? $ceylontmp$5 : .ceylon.language.String.instance("null");
        ).toString()).append(", ").append(((.ceylon.language.Ranged<? super .ceylon.language.Integer, .ceylon.language.Character, ? extends .ceylon.language.String>)(.ceylon.language.Ranged).ceylon.language.String.instance(((.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)getRest()).toString())).spanFrom(.ceylon.language.Integer.instance(1L)).toString()).toString();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        .ceylon.language.Integer restLastIndex$7;
        if ((restLastIndex$7 = ((.ceylon.language.List<? extends Element>)(.ceylon.language.List)getRest()).getLastIndex()) != null) {
            final long restLastIndex$8 = restLastIndex$7.longValue();
            return .ceylon.language.Integer.instance(restLastIndex$8 + 1L);
        } else {
            return .ceylon.language.Integer.instance(0L);
        }
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> getReversed() {
        return (.ceylon.language.Sequence<? extends Element>)((.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)getRest()).getReversed().<First>withTrailing($reified$First, (First)(.java.lang.Object)getFirst());
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> measure(final .ceylon.language.Integer from, final long length) {
        return from.longValue() <= 0L ? (.ceylon.language.Sequential<? extends Element>)((.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)(.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, Element, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)getRest()).measure(.ceylon.language.Integer.instance(0L), length + from.longValue() - 1L)).<First>withLeading($reified$First, (First)(.java.lang.Object)getFirst()) : (.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)(.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential)((.ceylon.language.Ranged<? super .ceylon.language.Integer, Element, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)getRest()).measure(.ceylon.language.Integer.instance(from.longValue() - 1L), length);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> span(final .ceylon.language.Integer from, final .ceylon.language.Integer end) {
        return .ceylon.language.Integer.compare(from.longValue(), end.longValue()) != .ceylon.language.larger_.get_() ? ((.ceylon.language.Ranged<? super .ceylon.language.Integer, Element, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)this).measure(from, .ceylon.language.Integer.minus(end.longValue(), from.longValue()) + 1L) : ((.ceylon.language.Ranged<? super .ceylon.language.Integer, Element, ? extends .ceylon.language.Sequential<? extends Element>>)(.ceylon.language.Ranged)this).measure(end, .ceylon.language.Integer.minus(from.longValue(), end.longValue()) + 1L).getReversed().sequence();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanFrom(final .ceylon.language.Integer from) {
        return (.ceylon.language.Sequential<? extends Element>).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequential<? extends Element> spanTo(final .ceylon.language.Integer to) {
        return (.ceylon.language.Sequential<? extends Element>).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Sequence<? extends Element> $clone() {
        return this;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug08xx.Bug844_Tuple.class, $reified$Element, $reified$First, $reified$Rest);
    }
}