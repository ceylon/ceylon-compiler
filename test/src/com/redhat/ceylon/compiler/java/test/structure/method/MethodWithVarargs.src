package com.redhat.ceylon.compiler.java.test.structure.method;

class MethodWithVarargs implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodWithVarargs() {
    }
    
    public final void f1() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$7 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f1$canonical$($ceylontmp$ns$7);
            }
            returning null;
        );
    }
    
    private void f1$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$2 = ns;
        final boolean isTuple$3 = iterable$2 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$2).$getArray$() != null;
        .java.lang.Object elem$0 = null;
        final .java.lang.Object array$4;
        int i$5 = 0;
        final int length$6;
        if (isTuple$3) {
            array$4 = ((.ceylon.language.Tuple)iterable$2).$getArray$();
            i$5 = ((.ceylon.language.Tuple)iterable$2).$getFirst$();
            length$6 = i$5 + ((.ceylon.language.Tuple)iterable$2).$getLength$();
        } else {
            array$4 = null;
            length$6 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$1 = isTuple$3 ? null : iterable$2.iterator();
        loop_0: while (isTuple$3 ? i$5 < length$6 : !((elem$0 = n$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$3) elem$0 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$4, i$5++);
            final long n = ((.ceylon.language.Integer)elem$0).longValue();
        }
    }
    
    public final void f1(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        (
            let
            {
                f1$canonical$(ns);
            }
            returning null;
        );
    }
    
    public final void f2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$15 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f2$canonical$(i, $ceylontmp$ns$15);
            }
            returning null;
        );
    }
    
    private void f2$canonical$(final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$10 = ns;
        final boolean isTuple$11 = iterable$10 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$10).$getArray$() != null;
        .java.lang.Object elem$8 = null;
        final .java.lang.Object array$12;
        int i$13 = 0;
        final int length$14;
        if (isTuple$11) {
            array$12 = ((.ceylon.language.Tuple)iterable$10).$getArray$();
            i$13 = ((.ceylon.language.Tuple)iterable$10).$getFirst$();
            length$14 = i$13 + ((.ceylon.language.Tuple)iterable$10).$getLength$();
        } else {
            array$12 = null;
            length$14 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$9 = isTuple$11 ? null : iterable$10.iterator();
        loop_1: while (isTuple$11 ? i$13 < length$14 : !((elem$8 = n$iterator$$9.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$11) elem$8 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$12, i$13++);
            final long n = ((.ceylon.language.Integer)elem$8).longValue();
        }
    }
    
    public final void f2(final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        (
            let
            {
                f2$canonical$(i, ns);
            }
            returning null;
        );
    }
    
    public final void f3() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$os$23 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f3$canonical$($ceylontmp$os$23);
            }
            returning null;
        );
    }
    
    private void f3$canonical$(final .ceylon.language.Sequential<? extends .java.lang.Object> os) {
        final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> iterable$18 = os;
        final boolean isTuple$19 = iterable$18 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$18).$getArray$() != null;
        .java.lang.Object elem$16 = null;
        final .java.lang.Object array$20;
        int i$21 = 0;
        final int length$22;
        if (isTuple$19) {
            array$20 = ((.ceylon.language.Tuple)iterable$18).$getArray$();
            i$21 = ((.ceylon.language.Tuple)iterable$18).$getFirst$();
            length$22 = i$21 + ((.ceylon.language.Tuple)iterable$18).$getLength$();
        } else {
            array$20 = null;
            length$22 = 0;
        }
        .ceylon.language.Iterator<? extends .java.lang.Object> o$iterator$$17 = isTuple$19 ? null : iterable$18.iterator();
        loop_2: while (isTuple$19 ? i$21 < length$22 : !((elem$16 = o$iterator$$17.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$19) elem$16 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$20, i$21++);
            final .java.lang.Object o = elem$16;
        }
    }
    
    public final void f3(final .ceylon.language.Sequential<? extends .java.lang.Object> os) {
        (
            let
            {
                f3$canonical$(os);
            }
            returning null;
        );
    }
    
    private final void m$priv$() {
        f1((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f2(1L, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f1();
        f2(1L);
        f1((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f2(1L, (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.Integer.instance(1L);
                
                case 1: 
                    return .ceylon.language.Integer.instance(2L);
                
                case 2: 
                    return .ceylon.language.Integer.instance(3L);
                
                default: 
                    return null;
                
                }
            }
        }}, .ceylon.language.empty_.get_()));
        f3((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.String.instance("foo"),
                .ceylon.language.Float.instance(5.0)}, .ceylon.language.empty_.get_()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.method.MethodWithVarargs.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodWithVarargs.class);
}