package com.redhat.ceylon.compiler.java.test.structure.klass;

class SerializableClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable, .com.redhat.ceylon.compiler.java.runtime.serialization.Serializable {
    
    protected SerializableClass() {
        this((.com.redhat.ceylon.compiler.java.runtime.serialization.$Serialization$)null);
    }
    
    public SerializableClass(final .com.redhat.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        this.array = null;
    }
    
    SerializableClass(final .ceylon.language.Array<.ceylon.language.Integer> array) {
        this.array = array;
    }
    private final .ceylon.language.Array<.ceylon.language.Integer> array;
    
    public final .ceylon.language.Array<.ceylon.language.Integer> getArray() {
        return array;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class);
    
    @.java.lang.Override
    public .java.util.Collection<.ceylon.language.serialization.ReachableReference> $references$() {
        .java.util.Collection<.ceylon.language.serialization.ReachableReference> reference = new .java.util.ArrayList<.ceylon.language.serialization.ReachableReference>();
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "array")));
        return reference;
    }
    
    @.java.lang.Override
    public .java.lang.Object $get$(final .ceylon.language.serialization.ReachableReference reference) {
        switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "com.redhat.ceylon.compiler.java.test.structure.klass::SerializableClass.array": 
            return this.array;
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        }
    }
    
    @.java.lang.Override
    public void $set$(final .ceylon.language.serialization.ReachableReference reference, final .java.lang.Object instance) {
        final .java.lang.invoke.MethodHandles.Lookup lookup = .java.lang.invoke.MethodHandles.lookup();
        if (reference instanceof .ceylon.language.serialization.Member) switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "com.redhat.ceylon.compiler.java.test.structure.klass::SerializableClass.array": 
            .com.redhat.ceylon.compiler.java.Util.setter(lookup, "array").invokeExact(this, (.ceylon.language.Array<.ceylon.language.Integer>)(.ceylon.language.Array<.ceylon.language.Integer>)instance);
            break;
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        } else throw new .ceylon.language.AssertionError("unexpected reachable reference " + reference);
    }
}