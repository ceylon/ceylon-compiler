package com.redhat.ceylon.compiler.java.test.structure.method;

interface MethodRefinementWithMpl {
    
    public abstract .ceylon.language.Callable<? extends .ceylon.language.String> two(final .java.lang.String s);
    
    public abstract .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> three(final .java.lang.String s);
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodRefinementWithMpl.class);
}
class MethodRefinementWithMplSub implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.method.MethodRefinementWithMpl {
    
    MethodRefinementWithMplSub() {
    }
    
    @.java.lang.Override
    public final .ceylon.language.Callable<? extends .ceylon.language.String> two(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                final long i = ((.ceylon.language.Integer)$param$0).longValue();
                return .ceylon.language.String.instance(s + .ceylon.language.Integer.toString(i));
            }
        };
    }
    
    @.java.lang.Override
    public final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> three(final .java.lang.String s) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Boolean.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Boolean)(Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final long i = ((.ceylon.language.Integer)$param$0).longValue();
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Boolean.$TypeDescriptor$), "String(Boolean)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final boolean b = ((.ceylon.language.Boolean)$param$0).booleanValue();
                        return .ceylon.language.String.instance(s + .ceylon.language.Integer.toString(i) + .ceylon.language.Boolean.toString(b));
                    }
                };
            }
        };
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.method.MethodRefinementWithMplSub.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodRefinementWithMplSub.class);
}