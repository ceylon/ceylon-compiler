package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfIsNotObject implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    ForIfIsNotObject() {
    }
    
    private final .java.lang.Object nowt$priv$(final .java.lang.Object n) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    public final void m(final .ceylon.language.Sequential<? extends .java.lang.Object> xs) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.java.lang.Object> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .java.lang.Object> $iterator$0;
                    private .java.lang.Object x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.java.lang.Object)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    
                    private final boolean $next$1() {
                        while (true) {
                            if (!this.x()) break;
                            if (!(x != null)) {
                                break;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final .java.lang.Object x = this.x;
                            return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsNotObject.this.nowt$priv$(x);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    public final void mvar(final .ceylon.language.Sequential<? extends .java.lang.Object> ys) {
        .ceylon.language.print_.print(new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Object, .java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.java.lang.Object> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$){
                    {
                        $iterator$0 = ys.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .java.lang.Object> $iterator$0;
                    private .java.lang.Object y;
                    private boolean y$exhausted$;
                    
                    private final boolean y() {
                        final .java.lang.Object $ceylontmp$item$2 = $iterator$0.next();
                        y$exhausted$ = $ceylontmp$item$2 == .ceylon.language.finished_.get_();
                        if (y$exhausted$) {
                            return false;
                        } else {
                            y = (.java.lang.Object)$ceylontmp$item$2;
                            return true;
                        }
                    }
                    private .java.lang.Object x$4;
                    
                    private final boolean $next$1() {
                        while (true) {
                            if (!this.y()) break;
                            .java.lang.Object x$3 = null;
                            if (!((x$3 = y) != null)) {
                                x$4 = x$3;
                                break;
                            }
                        }
                        return !y$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final .java.lang.Object y = this.y;
                            final .java.lang.Object x$4 = this.x$4;
                            return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsNotObject.this.nowt$priv$(x$4);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsNotObject();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsNotObject.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfIsNotObject.class);
}