package com.redhat.ceylon.compiler.java.test.structure.concrete;

class ListImplementor<X> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.List<X> {
    
    ListImplementor(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X) {
        this.$reified$X = $reified$X;
        this.$ceylon$language$List$this$ = new .ceylon.language.List$impl<X>($reified$X, this);
        this.$ceylon$language$Collection$this$ = new .ceylon.language.Collection$impl<X>($reified$X, this);
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl($reified$X, .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
        this.$ceylon$language$Correspondence$this$ = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X>(.ceylon.language.Integer.$TypeDescriptor$, $reified$X, this);
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    protected final .ceylon.language.List$impl<X> $ceylon$language$List$this$;
    
    @.java.lang.Override
    public .ceylon.language.List$impl<? extends X> $ceylon$language$List$impl() {
        return $ceylon$language$List$this$;
    }
    
    @.java.lang.Override
    public X getLast() {
        return (X)$ceylon$language$List$this$.getLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends .ceylon.language.Integer> getKeys() {
        return $ceylon$language$List$this$.getKeys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends X>, ? extends .java.lang.Object> getPermutations() {
        return $ceylon$language$List$this$.getPermutations();
    }
    
    @.java.lang.Override
    public X getFirst() {
        return (X)$ceylon$language$List$this$.getFirst();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this$.getSize();
    }
    
    @.java.lang.Override
    public final X get(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this$.get(index);
    }
    
    @.java.lang.Override
    public X getFromLast(final long index) {
        return $ceylon$language$List$this$.getFromLast(index);
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this$.defines(index);
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$List$this$.contains(element);
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$List$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$List$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> repeat(final long times) {
        return $ceylon$language$List$this$.repeat(times);
    }
    
    @.java.lang.Override
    public X find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.find(selecting);
    }
    
    @.java.lang.Override
    public X findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> sublistFrom(final long from) {
        return $ceylon$language$List$this$.sublistFrom(from);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> sublistTo(final long to) {
        return $ceylon$language$List$this$.sublistTo(to);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> sublist(final long from, final long to) {
        return $ceylon$language$List$this$.sublist(from, to);
    }
    
    @.java.lang.Override
    public final <Other>long patch$from(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list) {
        return $ceylon$language$List$this$.patch$from($reified$Other, list);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list) {
        return (
            let
            {
                long $ceylontmp$from$0 = patch$from($reified$Other, list);
                long $ceylontmp$length$1 = patch$length($reified$Other, list, $ceylontmp$from$0);
            }
            returning patch$canonical$($reified$Other, list, $ceylontmp$from$0, $ceylontmp$length$1);
        );
    }
    
    @.java.lang.Override
    public final <Other>long patch$length(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from) {
        return $ceylon$language$List$this$.patch$length($reified$Other, list, from);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from) {
        return (
            let
            {
                long $ceylontmp$length$2 = patch$length($reified$Other, list, from);
            }
            returning patch$canonical$($reified$Other, list, from, $ceylontmp$length$2);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.List patch(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from, final long length) {
        return (.ceylon.language.List)$ceylon$language$List$this$.patch($reified$Other, list, from, length);
    }
    
    private <Other>.ceylon.language.List patch$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .ceylon.language.List<? extends Other> list, final long from, final long length) {
        return (.ceylon.language.List)$ceylon$language$List$this$.patch($reified$Other, list, from, length);
    }
    
    @.java.lang.Override
    public boolean startsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.startsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean endsWith(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.endsWith(sublist);
    }
    
    @.java.lang.Override
    public boolean includesAt(final long index, final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includesAt(index, sublist);
    }
    
    @.java.lang.Override
    public boolean includes(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.includes(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> inclusions(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.inclusions(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.firstInclusion(sublist);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastInclusion(final .ceylon.language.List<? extends .java.lang.Object> sublist) {
        return $ceylon$language$List$this$.lastInclusion(sublist);
    }
    
    @.java.lang.Override
    public boolean occursAt(final long index, final .java.lang.Object element) {
        return $ceylon$language$List$this$.occursAt(index, element);
    }
    
    @.java.lang.Override
    public boolean occurs(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurs(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> occurrences(final .java.lang.Object element) {
        return $ceylon$language$List$this$.occurrences(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.firstOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastOccurrence(final .java.lang.Object element) {
        return $ceylon$language$List$this$.lastOccurrence(element);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> indexesWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.indexesWhere(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer firstIndexWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.firstIndexWhere(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer lastIndexWhere(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$List$this$.lastIndexWhere(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trim(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trim(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trimLeading(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trimLeading(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> trimTrailing(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> trimming) {
        return $ceylon$language$List$this$.trimTrailing(trimming);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequence slice(final long index) {
        return (.ceylon.language.Sequence<? extends .ceylon.language.List<? extends X>>)(.ceylon.language.Sequence)$ceylon$language$List$this$.slice(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> initial(final long length) {
        return $ceylon$language$List$this$.initial(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.List<? extends X> terminal(final long length) {
        return $ceylon$language$List$this$.terminal(length);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$List$this$.collect($reified$Result, collecting);
    }
    protected final .ceylon.language.Collection$impl<X> $ceylon$language$Collection$this$;
    
    @.java.lang.Override
    public .ceylon.language.Collection$impl<? extends X> $ceylon$language$Collection$impl() {
        return $ceylon$language$Collection$this$;
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Collection$this$.toString();
    }
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this$.getEmpty();
    }
    protected final .ceylon.language.Iterable$impl<X, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends X, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getPaired() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends X>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getPaired();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends X>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getExceptLast() {
        return $ceylon$language$Iterable$this$.getExceptLast();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> getDistinct() {
        return $ceylon$language$Iterable$this$.getDistinct();
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> sequence() {
        return $ceylon$language$Iterable$this$.sequence();
    }
    
    @.java.lang.Override
    public .java.lang.Object each(final .ceylon.language.Callable<? extends .java.lang.Object> step) {
        return $ceylon$language$Iterable$this$.each(step);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Result, OtherAbsent>.ceylon.language.Iterable flatMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>> collecting) {
        return (.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.flatMap($reified$Result, $reified$OtherAbsent, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Type>.ceylon.language.Iterable narrow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Type) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.narrow($reified$Type);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial);
    }
    
    @.java.lang.Override
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> scan(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.scan($reified$Result, initial);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends X> locate(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locate(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends X> locateLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locateLast(selecting);
    }
    
    @.java.lang.Override
    public X max(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return (X)$ceylon$language$Iterable$this$.max(comparing);
    }
    
    @.java.lang.Override
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return $ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends X> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends X, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends X>, ? extends .java.lang.Object> partition(final long length) {
        return $ceylon$language$Iterable$this$.partition(length);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable product(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.product($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public final <Other>long interpose$step(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return $ceylon$language$Iterable$this$.interpose$step($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (
            let
            {
                long $ceylontmp$step$3 = interpose$step($reified$Other, element);
            }
            returning interpose$canonical$($reified$Other, element, $ceylontmp$step$3);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    private <Other>.ceylon.language.Iterable interpose$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    @.java.lang.Override
    public final <Group>.ceylon.language.Map<? extends Group, ? extends .ceylon.language.Sequence<? extends X>> group(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Group, final .ceylon.language.Callable<? extends Group> grouping) {
        return $ceylon$language$Iterable$this$.group($reified$Group, grouping);
    }
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    protected final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, X> $ceylon$language$Correspondence$this$;
    
    @.java.lang.Override
    public .ceylon.language.Correspondence$impl<? super .ceylon.language.Integer, ? extends X> $ceylon$language$Correspondence$impl() {
        return $ceylon$language$Correspondence$this$;
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesEvery(keys);
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> keys) {
        return $ceylon$language$Correspondence$this$.definesAny(keys);
    }
    
    @.java.lang.Override
    public <Absent>.ceylon.language.Iterable<? extends X, ? extends Absent> getAll(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Absent, final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends Absent> keys) {
        return $ceylon$language$Correspondence$this$.getAll($reified$Absent, keys);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> $clone() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> measure(final .ceylon.language.Integer from, final long length) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLastIndex() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> span(final .ceylon.language.Integer from, final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanFrom(final .ceylon.language.Integer from) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> spanTo(final .ceylon.language.Integer to) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final int hashCode() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object other) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final X getFromFirst(final long index) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor<X> getReversed() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends X> iterator() {
        throw new .ceylon.language.Exception(null, null);
    }
    
    @.java.lang.Override
    public final .ceylon.language.List<? extends X> getRest() {
        return (.ceylon.language.List<? extends X>).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.ListImplementor.class, $reified$X);
    }
}