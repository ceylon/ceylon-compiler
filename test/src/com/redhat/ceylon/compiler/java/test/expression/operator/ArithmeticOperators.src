package com.redhat.ceylon.compiler.java.test.expression.operator;

abstract class MyInteger extends .java.lang.Object implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Integral<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>, .ceylon.language.Exponentiable<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger, .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>, .java.io.Serializable {
    
    MyInteger() {
        super();
        this.$ceylon$language$Integral$this$ = new .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$, this);
        this.$ceylon$language$Number$this$ = new .ceylon.language.Number$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$, this);
        this.$ceylon$language$Invertible$this$ = new .ceylon.language.Invertible$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$, this);
        this.$ceylon$language$Comparable$this$ = new .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$, this);
        this.$ceylon$language$Enumerable$this$ = new .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger>(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$, this);
    }
    protected final .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Integral$this$;
    
    @.java.lang.Override
    public .ceylon.language.Integral$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Integral$impl() {
        return $ceylon$language$Integral$this$;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger modulo(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger modulus) {
        return (.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger)$ceylon$language$Integral$this$.modulo(modulus);
    }
    
    @.java.lang.Override
    public boolean divides(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Integral$this$.divides(other);
    }
    protected final .ceylon.language.Number$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Number$this$;
    
    @.java.lang.Override
    public .ceylon.language.Number$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Number$impl() {
        return $ceylon$language$Number$this$;
    }
    
    @.java.lang.Override
    public long getSign() {
        return $ceylon$language$Number$this$.getSign();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getMagnitude() {
        return (.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger)$ceylon$language$Number$this$.getMagnitude();
    }
    protected final .ceylon.language.Invertible$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Invertible$this$;
    
    @.java.lang.Override
    public .ceylon.language.Invertible$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Invertible$impl() {
        return $ceylon$language$Invertible$this$;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger minus(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return (.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger)$ceylon$language$Invertible$this$.minus(other);
    }
    protected final .ceylon.language.Comparable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Comparable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Comparable$impl<? super .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Comparable$impl() {
        return $ceylon$language$Comparable$this$;
    }
    
    @.java.lang.Override
    public boolean largerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Comparable$this$.largerThan(other);
    }
    
    @.java.lang.Override
    public boolean smallerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Comparable$this$.smallerThan(other);
    }
    
    @.java.lang.Override
    public boolean notSmallerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Comparable$this$.notSmallerThan(other);
    }
    
    @.java.lang.Override
    public boolean notLargerThan(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Comparable$this$.notLargerThan(other);
    }
    protected final .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Enumerable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger> $ceylon$language$Enumerable$impl() {
        return $ceylon$language$Enumerable$this$;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getPredecessor() {
        return (.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger)$ceylon$language$Enumerable$this$.getPredecessor();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getSuccessor() {
        return (.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger)$ceylon$language$Enumerable$this$.getSuccessor();
    }
    
    @.java.lang.Override
    public long offsetSign(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger other) {
        return $ceylon$language$Enumerable$this$.offsetSign(other);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger.class);
}
class ArithmeticOperators implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected ArithmeticOperators() {
        super();
        this.initN = null;
        this.initI = null;
        this.n1 = 0L;
        this.n2 = 0L;
        this.i1 = 0L;
        this.boxedN1 = null;
        this.boxedN2 = null;
        this.boxedI1 = null;
    }
    
    ArithmeticOperators(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initN, final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initI) {
        this.initN = initN;
        this.initI = initI;
        this.n1 = 0L;
        this.n2 = 0L;
        this.i1 = 0L;
        this.boxedN1 = getInitN$priv$();
        this.boxedN2 = getInitN$priv$();
        this.boxedI1 = getInitI$priv$();
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initN;
    
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getInitN$priv$() {
        return initN;
    }
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initI;
    
    private final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getInitI$priv$() {
        return initI;
    }
    private long n1;
    
    public final long getN1() {
        return n1;
    }
    
    public final void setN1(final long n1) {
        this.n1 = n1;
    }
    private long n2;
    
    public final long getN2() {
        return n2;
    }
    
    public final void setN2(final long n2) {
        this.n2 = n2;
    }
    private long i1;
    
    public final long getI1() {
        return i1;
    }
    
    public final void setI1(final long i1) {
        this.i1 = i1;
    }
    
    public final long getGetterN1() {
        return getN1();
    }
    
    public final void setGetterN1(final long getterN1) {
        setN1(getterN1);
    }
    
    public final long getGetterN2() {
        return getN2();
    }
    
    public final void setGetterN2(final long getterN2) {
        setN2(getterN2);
    }
    
    public final long getGetterI1() {
        return getI1();
    }
    
    public final void setGetterI1(final long getterI1) {
        setI1(getterI1);
    }
    private .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedN1;
    
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getBoxedN1() {
        return boxedN1;
    }
    
    public final void setBoxedN1(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedN1) {
        this.boxedN1 = boxedN1;
    }
    private .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedN2;
    
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getBoxedN2() {
        return boxedN2;
    }
    
    public final void setBoxedN2(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedN2) {
        this.boxedN2 = boxedN2;
    }
    private .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedI1;
    
    public final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger getBoxedI1() {
        return boxedI1;
    }
    
    public final void setBoxedI1(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger boxedI1) {
        this.boxedI1 = boxedI1;
    }
    
    private final void unboxedAttributes$priv$() {
        (
            let
            {
                long $ceylontmp$op$0 = getN1();
                setN1($ceylontmp$op$0 + 1);
            }
            returning $ceylontmp$op$0;
        );
        (
            let
            {
                long $ceylontmp$op$1 = getN1() + 1;
                setN1($ceylontmp$op$1);
            }
            returning $ceylontmp$op$1;
        );
        (
            let
            {
                long $ceylontmp$op$2 = getN1();
                setN1($ceylontmp$op$2 - 1);
            }
            returning $ceylontmp$op$2;
        );
        (
            let
            {
                long $ceylontmp$op$3 = getN1() - 1;
                setN1($ceylontmp$op$3);
            }
            returning $ceylontmp$op$3;
        );
        setI1(getN1());
        setI1(-getN1());
        setN1(getN1() + getN2());
        setI1(getN1() - getN2());
        setN1(getN1() * getN2());
        setN1(getN1() / getN2());
        setN1(getN1() % getN2());
        setN1(.ceylon.language.Integer.power(getN1(), getN2()));
        (
            let
            {
                long $ceylontmp$op$4 = getN1() + getN2();
                setN1($ceylontmp$op$4);
            }
            returning $ceylontmp$op$4;
        );
        (
            let
            {
                long $ceylontmp$op$5 = getN1() * getN1();
                setN1($ceylontmp$op$5);
            }
            returning $ceylontmp$op$5;
        );
        (
            let
            {
                long $ceylontmp$op$6 = getN1() / getN2();
                setN1($ceylontmp$op$6);
            }
            returning $ceylontmp$op$6;
        );
        (
            let
            {
                long $ceylontmp$op$7 = getN1() % getN2();
                setN1($ceylontmp$op$7);
            }
            returning $ceylontmp$op$7;
        );
    }
    
    private final void unboxedGetterAttributes$priv$() {
        (
            let
            {
                long $ceylontmp$op$8 = getGetterN1();
                setGetterN1($ceylontmp$op$8 + 1);
            }
            returning $ceylontmp$op$8;
        );
        (
            let
            {
                long $ceylontmp$op$9 = getGetterN1() + 1;
                setGetterN1($ceylontmp$op$9);
            }
            returning $ceylontmp$op$9;
        );
        (
            let
            {
                long $ceylontmp$op$10 = getGetterN1();
                setGetterN1($ceylontmp$op$10 - 1);
            }
            returning $ceylontmp$op$10;
        );
        (
            let
            {
                long $ceylontmp$op$11 = getGetterN1() - 1;
                setGetterN1($ceylontmp$op$11);
            }
            returning $ceylontmp$op$11;
        );
        setGetterI1(getGetterN1());
        setGetterI1(-getGetterN1());
        setGetterN1(getGetterN1() + getGetterN2());
        setGetterI1(getGetterN1() - getGetterN2());
        setGetterN1(getGetterN1() * getGetterN2());
        setGetterN1(getGetterN1() / getGetterN2());
        setGetterN1(getGetterN1() % getGetterN2());
        setGetterN1(.ceylon.language.Integer.power(getGetterN1(), getGetterN2()));
        (
            let
            {
                long $ceylontmp$op$12 = getGetterN1() + getGetterN2();
                setGetterN1($ceylontmp$op$12);
            }
            returning $ceylontmp$op$12;
        );
        (
            let
            {
                long $ceylontmp$op$13 = getGetterN1() * getGetterN1();
                setGetterN1($ceylontmp$op$13);
            }
            returning $ceylontmp$op$13;
        );
        (
            let
            {
                long $ceylontmp$op$14 = getGetterN1() / getGetterN2();
                setGetterN1($ceylontmp$op$14);
            }
            returning $ceylontmp$op$14;
        );
        (
            let
            {
                long $ceylontmp$op$15 = getGetterN1() % getGetterN2();
                setGetterN1($ceylontmp$op$15);
            }
            returning $ceylontmp$op$15;
        );
    }
    
    private final void unboxedQualifiedAttributes$priv$() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$16 = this;
                long $ceylontmp$opV$17 = $ceylontmp$opE$16.getN1();
                $ceylontmp$opE$16.setN1($ceylontmp$opV$17 + 1);
            }
            returning $ceylontmp$opV$17;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$18 = this;
                long $ceylontmp$opV$19 = $ceylontmp$opE$18.getN1() + 1;
                $ceylontmp$opE$18.setN1($ceylontmp$opV$19);
            }
            returning $ceylontmp$opV$19;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$20 = this;
                long $ceylontmp$opV$21 = $ceylontmp$opE$20.getN1();
                $ceylontmp$opE$20.setN1($ceylontmp$opV$21 - 1);
            }
            returning $ceylontmp$opV$21;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$22 = this;
                long $ceylontmp$opV$23 = $ceylontmp$opE$22.getN1() - 1;
                $ceylontmp$opE$22.setN1($ceylontmp$opV$23);
            }
            returning $ceylontmp$opV$23;
        );
        this.setI1(this.getN1());
        this.setI1(-this.getN1());
        this.setN1(this.getN1() + this.getN2());
        this.setI1(this.getN1() - this.getN2());
        this.setN1(this.getN1() * this.getN2());
        this.setN1(this.getN1() / this.getN2());
        this.setN1(this.getN1() % this.getN2());
        this.setN1(.ceylon.language.Integer.power(this.getN1(), this.getN2()));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$24 = this;
                long $ceylontmp$opV$25 = $ceylontmp$opE$24.getN1() + this.getN2();
                $ceylontmp$opE$24.setN1($ceylontmp$opV$25);
            }
            returning $ceylontmp$opV$25;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$26 = this;
                long $ceylontmp$opV$27 = $ceylontmp$opE$26.getN1() * this.getN1();
                $ceylontmp$opE$26.setN1($ceylontmp$opV$27);
            }
            returning $ceylontmp$opV$27;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$28 = this;
                long $ceylontmp$opV$29 = $ceylontmp$opE$28.getN1() / this.getN2();
                $ceylontmp$opE$28.setN1($ceylontmp$opV$29);
            }
            returning $ceylontmp$opV$29;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$30 = this;
                long $ceylontmp$opV$31 = $ceylontmp$opE$30.getN1() % this.getN2();
                $ceylontmp$opE$30.setN1($ceylontmp$opV$31);
            }
            returning $ceylontmp$opV$31;
        );
    }
    
    public .java.lang.Object unboxedQualifiedGetterAttributes() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$32 = this;
                long $ceylontmp$opV$33 = $ceylontmp$opE$32.getGetterN1();
                $ceylontmp$opE$32.setGetterN1($ceylontmp$opV$33 + 1);
            }
            returning $ceylontmp$opV$33;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$34 = this;
                long $ceylontmp$opV$35 = $ceylontmp$opE$34.getGetterN1() + 1;
                $ceylontmp$opE$34.setGetterN1($ceylontmp$opV$35);
            }
            returning $ceylontmp$opV$35;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$36 = this;
                long $ceylontmp$opV$37 = $ceylontmp$opE$36.getGetterN1();
                $ceylontmp$opE$36.setGetterN1($ceylontmp$opV$37 - 1);
            }
            returning $ceylontmp$opV$37;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$38 = this;
                long $ceylontmp$opV$39 = $ceylontmp$opE$38.getGetterN1() - 1;
                $ceylontmp$opE$38.setGetterN1($ceylontmp$opV$39);
            }
            returning $ceylontmp$opV$39;
        );
        this.setGetterI1(this.getGetterN1());
        this.setGetterI1(-this.getGetterN1());
        this.setGetterN1(this.getGetterN1() + this.getGetterN2());
        this.setGetterI1(this.getGetterN1() - this.getGetterN2());
        this.setGetterN1(this.getGetterN1() * this.getGetterN2());
        this.setGetterN1(this.getGetterN1() / this.getGetterN2());
        this.setGetterN1(this.getGetterN1() % this.getGetterN2());
        this.setGetterN1(.ceylon.language.Integer.power(this.getGetterN1(), this.getGetterN2()));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$40 = this;
                long $ceylontmp$opV$41 = $ceylontmp$opE$40.getGetterN1() + this.getGetterN2();
                $ceylontmp$opE$40.setGetterN1($ceylontmp$opV$41);
            }
            returning $ceylontmp$opV$41;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$42 = this;
                long $ceylontmp$opV$43 = $ceylontmp$opE$42.getGetterN1() * this.getGetterN1();
                $ceylontmp$opE$42.setGetterN1($ceylontmp$opV$43);
            }
            returning $ceylontmp$opV$43;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$44 = this;
                long $ceylontmp$opV$45 = $ceylontmp$opE$44.getGetterN1() / this.getGetterN2();
                $ceylontmp$opE$44.setGetterN1($ceylontmp$opV$45);
            }
            returning $ceylontmp$opV$45;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$46 = this;
                long $ceylontmp$opV$47 = $ceylontmp$opE$46.getGetterN1() % this.getGetterN2();
                $ceylontmp$opE$46.setGetterN1($ceylontmp$opV$47);
            }
            returning $ceylontmp$opV$47;
        );
        return null;
    }
    
    public .java.lang.Object boxedQualifiedAttributes() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$48 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$49 = $ceylontmp$opE$48.getBoxedN1();
                $ceylontmp$opE$48.setBoxedN1($ceylontmp$opV$49.getSuccessor());
            }
            returning $ceylontmp$opV$49;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$50 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$51 = $ceylontmp$opE$50.getBoxedN1().getSuccessor();
                $ceylontmp$opE$50.setBoxedN1($ceylontmp$opV$51);
            }
            returning $ceylontmp$opV$51;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$52 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$53 = $ceylontmp$opE$52.getBoxedN1();
                $ceylontmp$opE$52.setBoxedN1($ceylontmp$opV$53.getPredecessor());
            }
            returning $ceylontmp$opV$53;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$54 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$55 = $ceylontmp$opE$54.getBoxedN1().getPredecessor();
                $ceylontmp$opE$54.setBoxedN1($ceylontmp$opV$55);
            }
            returning $ceylontmp$opV$55;
        );
        this.setBoxedI1(this.getBoxedN1());
        this.setBoxedI1(this.getBoxedN1().getNegated());
        this.setBoxedN1(this.getBoxedN1().plus(this.getBoxedN2()));
        this.setBoxedI1(this.getBoxedN1().minus(this.getBoxedN2()));
        this.setBoxedN1(this.getBoxedN1().times(this.getBoxedN2()));
        this.setBoxedN1(this.getBoxedN1().divided(this.getBoxedN2()));
        this.setBoxedN1(this.getBoxedN1().remainder(this.getBoxedN2()));
        this.setBoxedN1(this.getBoxedN1().power(this.getBoxedN2()));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$56 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$57 = $ceylontmp$opE$56.getBoxedN1().plus(this.getBoxedN2());
                $ceylontmp$opE$56.setBoxedN1($ceylontmp$opV$57);
            }
            returning $ceylontmp$opV$57;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$58 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$59 = $ceylontmp$opE$58.getBoxedN1().times(this.getBoxedN1());
                $ceylontmp$opE$58.setBoxedN1($ceylontmp$opV$59);
            }
            returning $ceylontmp$opV$59;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$60 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$61 = $ceylontmp$opE$60.getBoxedN1().divided(this.getBoxedN2());
                $ceylontmp$opE$60.setBoxedN1($ceylontmp$opV$61);
            }
            returning $ceylontmp$opV$61;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators $ceylontmp$opE$62 = this;
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$63 = $ceylontmp$opE$62.getBoxedN1().remainder(this.getBoxedN2());
                $ceylontmp$opE$62.setBoxedN1($ceylontmp$opV$63);
            }
            returning $ceylontmp$opV$63;
        );
        return null;
    }
    
    private final void unboxedLocals$priv$() {
        long n1 = 0L;
        long n2 = 0L;
        long i1 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        i1 = n1;
        i1 = -n1;
        n1 = n1 + n2;
        i1 = n1 - n2;
        n1 = n1 * n2;
        n1 = n1 / n2;
        n1 = n1 % n2;
        n1 = .ceylon.language.Integer.power(n1, n2);
        n1 += n2;
        n1 *= n1;
        n1 /= n2;
        n1 %= n2;
    }
    
    private final void unboxedLocalGetters$priv$() {
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong n1 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong n2 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        final .com.redhat.ceylon.compiler.java.language.VariableBoxLong i1 = new .com.redhat.ceylon.compiler.java.language.VariableBoxLong(0L);
        
        final class getterN1$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private getterN1$getter$_() {
            }
            
            public long get_() {
                return n1.ref;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong getterN1$getter$_ = new getterN1$getter$_();
        
        final class getterN1$setter$_ {
            
            private getterN1$setter$_() {
            }
            private long value;
            
            public void set_(final long getterN1) {
                n1.ref = getterN1;
            }
        }
        final getterN1$setter$_ getterN1$setter$_ = new getterN1$setter$_();
        
        final class getterN2$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private getterN2$getter$_() {
            }
            
            public long get_() {
                return n2.ref;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong getterN2$getter$_ = new getterN2$getter$_();
        
        final class getterN2$setter$_ {
            
            private getterN2$setter$_() {
            }
            private long value;
            
            public void set_(final long getterN2) {
                n2.ref = getterN2;
            }
        }
        final getterN2$setter$_ getterN2$setter$_ = new getterN2$setter$_();
        
        final class getterI1$getter$_ implements .com.redhat.ceylon.compiler.java.language.GetterLong {
            
            private getterI1$getter$_() {
            }
            
            public long get_() {
                return i1.ref;
            }
        }
        final .com.redhat.ceylon.compiler.java.language.GetterLong getterI1$getter$_ = new getterI1$getter$_();
        
        final class getterI1$setter$_ {
            
            private getterI1$setter$_() {
            }
            private long value;
            
            public void set_(final long getterI1) {
                i1.ref = getterI1;
            }
        }
        final getterI1$setter$_ getterI1$setter$_ = new getterI1$setter$_();
        (
            let
            {
                long $ceylontmp$op$64 = getterN1$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$64 + 1);
            }
            returning $ceylontmp$op$64;
        );
        (
            let
            {
                long $ceylontmp$op$65 = getterN1$getter$_.get_() + 1;
                getterN1$setter$_.set_($ceylontmp$op$65);
            }
            returning $ceylontmp$op$65;
        );
        (
            let
            {
                long $ceylontmp$op$66 = getterN1$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$66 - 1);
            }
            returning $ceylontmp$op$66;
        );
        (
            let
            {
                long $ceylontmp$op$67 = getterN1$getter$_.get_() - 1;
                getterN1$setter$_.set_($ceylontmp$op$67);
            }
            returning $ceylontmp$op$67;
        );
        getterI1$setter$_.set_(getterN1$getter$_.get_());
        getterI1$setter$_.set_(-getterN1$getter$_.get_());
        getterN1$setter$_.set_(getterN1$getter$_.get_() + getterN2$getter$_.get_());
        getterI1$setter$_.set_(getterN1$getter$_.get_() - getterN2$getter$_.get_());
        getterN1$setter$_.set_(getterN1$getter$_.get_() * getterN2$getter$_.get_());
        getterN1$setter$_.set_(getterN1$getter$_.get_() / getterN2$getter$_.get_());
        getterN1$setter$_.set_(getterN1$getter$_.get_() % getterN2$getter$_.get_());
        getterN1$setter$_.set_(.ceylon.language.Integer.power(getterN1$getter$_.get_(), getterN2$getter$_.get_()));
        (
            let
            {
                long $ceylontmp$op$68 = getterN1$getter$_.get_() + getterN2$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$68);
            }
            returning $ceylontmp$op$68;
        );
        (
            let
            {
                long $ceylontmp$op$69 = getterN1$getter$_.get_() * getterN1$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$69);
            }
            returning $ceylontmp$op$69;
        );
        (
            let
            {
                long $ceylontmp$op$70 = getterN1$getter$_.get_() / getterN2$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$70);
            }
            returning $ceylontmp$op$70;
        );
        (
            let
            {
                long $ceylontmp$op$71 = getterN1$getter$_.get_() % getterN2$getter$_.get_();
                getterN1$setter$_.set_($ceylontmp$op$71);
            }
            returning $ceylontmp$op$71;
        );
    }
    
    private final void boxedLocals$priv$() {
        .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger n1 = getInitN$priv$();
        .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger n2 = getInitN$priv$();
        .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger i1 = getInitI$priv$();
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$72 = n1;
                n1 = $ceylontmp$op$72.getSuccessor();
            }
            returning $ceylontmp$op$72;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$73 = n1.getSuccessor();
                n1 = $ceylontmp$op$73;
            }
            returning $ceylontmp$op$73;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$74 = n1;
                n1 = $ceylontmp$op$74.getPredecessor();
            }
            returning $ceylontmp$op$74;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$75 = n1.getPredecessor();
                n1 = $ceylontmp$op$75;
            }
            returning $ceylontmp$op$75;
        );
        i1 = n1;
        i1 = n1.getNegated();
        n1 = n1.plus(n2);
        i1 = n1.minus(n2);
        n1 = n1.times(n2);
        n1 = n1.divided(n2);
        n1 = n1.remainder(n2);
        n1 = n1.power(n2);
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$76 = n1.plus(n2);
                n1 = $ceylontmp$op$76;
            }
            returning $ceylontmp$op$76;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$77 = n1.times(n1);
                n1 = $ceylontmp$op$77;
            }
            returning $ceylontmp$op$77;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$78 = n1.divided(n2);
                n1 = $ceylontmp$op$78;
            }
            returning $ceylontmp$op$78;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$op$79 = n1.remainder(n2);
                n1 = $ceylontmp$op$79;
            }
            returning $ceylontmp$op$79;
        );
    }
    
    private final void unboxedToplevel$priv$() {
        (
            let
            {
                long $ceylontmp$op$80 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$80 + 1);
            }
            returning $ceylontmp$op$80;
        );
        (
            let
            {
                long $ceylontmp$op$81 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() + 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$81);
            }
            returning $ceylontmp$op$81;
        );
        (
            let
            {
                long $ceylontmp$op$82 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$82 - 1);
            }
            returning $ceylontmp$op$82;
        );
        (
            let
            {
                long $ceylontmp$op$83 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() - 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$83);
            }
            returning $ceylontmp$op$83;
        );
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelI1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelI1_.set_(-.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() + .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelI1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() - .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() * .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() / .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() % .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(.ceylon.language.Integer.power(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_(), .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_()));
        (
            let
            {
                long $ceylontmp$op$84 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() + .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$84);
            }
            returning $ceylontmp$op$84;
        );
        (
            let
            {
                long $ceylontmp$op$85 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() * .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$85);
            }
            returning $ceylontmp$op$85;
        );
        (
            let
            {
                long $ceylontmp$op$86 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() / .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$86);
            }
            returning $ceylontmp$op$86;
        );
        (
            let
            {
                long $ceylontmp$op$87 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_() % .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_($ceylontmp$op$87);
            }
            returning $ceylontmp$op$87;
        );
    }
    
    private final void unboxedToplevelGetter$priv$() {
        (
            let
            {
                long $ceylontmp$op$88 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$88 + 1);
            }
            returning $ceylontmp$op$88;
        );
        (
            let
            {
                long $ceylontmp$op$89 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() + 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$89);
            }
            returning $ceylontmp$op$89;
        );
        (
            let
            {
                long $ceylontmp$op$90 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$90 - 1);
            }
            returning $ceylontmp$op$90;
        );
        (
            let
            {
                long $ceylontmp$op$91 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() - 1;
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$91);
            }
            returning $ceylontmp$op$91;
        );
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterI1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterI1_.set_(-.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() + .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterI1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() - .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() * .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() / .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() % .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_());
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_(.ceylon.language.Integer.power(.com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_(), .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_()));
        (
            let
            {
                long $ceylontmp$op$92 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() + .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$92);
            }
            returning $ceylontmp$op$92;
        );
        (
            let
            {
                long $ceylontmp$op$93 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() * .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$93);
            }
            returning $ceylontmp$op$93;
        );
        (
            let
            {
                long $ceylontmp$op$94 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() / .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$94);
            }
            returning $ceylontmp$op$94;
        );
        (
            let
            {
                long $ceylontmp$op$95 = .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.get_() % .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN2_.get_();
                .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelGetterN1_.set_($ceylontmp$op$95);
            }
            returning $ceylontmp$op$95;
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators.class);
}
class ArithmeticOperatorsSub extends .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperators {
    
    protected ArithmeticOperatorsSub() {
        super();
    }
    
    ArithmeticOperatorsSub(final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initN, final .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger initI) {
        super(initN, initI);
    }
    
    @.java.lang.Override
    public final .java.lang.Object unboxedQualifiedGetterAttributes() {
        (
            let
            {
                long $ceylontmp$opV$97 = super.getGetterN1();
                super.setGetterN1($ceylontmp$opV$97 + 1);
            }
            returning $ceylontmp$opV$97;
        );
        (
            let
            {
                long $ceylontmp$opV$99 = super.getGetterN1() + 1;
                super.setGetterN1($ceylontmp$opV$99);
            }
            returning $ceylontmp$opV$99;
        );
        (
            let
            {
                long $ceylontmp$opV$101 = super.getGetterN1();
                super.setGetterN1($ceylontmp$opV$101 - 1);
            }
            returning $ceylontmp$opV$101;
        );
        (
            let
            {
                long $ceylontmp$opV$103 = super.getGetterN1() - 1;
                super.setGetterN1($ceylontmp$opV$103);
            }
            returning $ceylontmp$opV$103;
        );
        super.setGetterI1(super.getGetterN1());
        super.setGetterI1(-super.getGetterN1());
        super.setGetterN1(super.getGetterN1() + super.getGetterN2());
        super.setGetterI1(super.getGetterN1() - super.getGetterN2());
        super.setGetterN1(super.getGetterN1() * super.getGetterN2());
        super.setGetterN1(super.getGetterN1() / super.getGetterN2());
        super.setGetterN1(super.getGetterN1() % super.getGetterN2());
        super.setGetterN1(.ceylon.language.Integer.power(super.getGetterN1(), super.getGetterN2()));
        (
            let
            {
                long $ceylontmp$opV$105 = super.getGetterN1() + super.getGetterN2();
                super.setGetterN1($ceylontmp$opV$105);
            }
            returning $ceylontmp$opV$105;
        );
        (
            let
            {
                long $ceylontmp$opV$107 = super.getGetterN1() * super.getGetterN1();
                super.setGetterN1($ceylontmp$opV$107);
            }
            returning $ceylontmp$opV$107;
        );
        (
            let
            {
                long $ceylontmp$opV$109 = super.getGetterN1() / super.getGetterN2();
                super.setGetterN1($ceylontmp$opV$109);
            }
            returning $ceylontmp$opV$109;
        );
        (
            let
            {
                long $ceylontmp$opV$111 = super.getGetterN1() % super.getGetterN2();
                super.setGetterN1($ceylontmp$opV$111);
            }
            returning $ceylontmp$opV$111;
        );
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.Object boxedQualifiedAttributes() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$113 = super.getBoxedN1();
                super.setBoxedN1($ceylontmp$opV$113.getSuccessor());
            }
            returning $ceylontmp$opV$113;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$115 = super.getBoxedN1().getSuccessor();
                super.setBoxedN1($ceylontmp$opV$115);
            }
            returning $ceylontmp$opV$115;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$117 = super.getBoxedN1();
                super.setBoxedN1($ceylontmp$opV$117.getPredecessor());
            }
            returning $ceylontmp$opV$117;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$119 = super.getBoxedN1().getPredecessor();
                super.setBoxedN1($ceylontmp$opV$119);
            }
            returning $ceylontmp$opV$119;
        );
        super.setBoxedI1(super.getBoxedN1());
        super.setBoxedI1(super.getBoxedN1().getNegated());
        super.setBoxedN1(super.getBoxedN1().plus(super.getBoxedN2()));
        super.setBoxedI1(super.getBoxedN1().minus(super.getBoxedN2()));
        super.setBoxedN1(super.getBoxedN1().times(super.getBoxedN2()));
        super.setBoxedN1(super.getBoxedN1().divided(super.getBoxedN2()));
        super.setBoxedN1(super.getBoxedN1().remainder(super.getBoxedN2()));
        super.setBoxedN1(super.getBoxedN1().power(super.getBoxedN2()));
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$121 = super.getBoxedN1().plus(super.getBoxedN2());
                super.setBoxedN1($ceylontmp$opV$121);
            }
            returning $ceylontmp$opV$121;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$123 = super.getBoxedN1().times(super.getBoxedN1());
                super.setBoxedN1($ceylontmp$opV$123);
            }
            returning $ceylontmp$opV$123;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$125 = super.getBoxedN1().divided(super.getBoxedN2());
                super.setBoxedN1($ceylontmp$opV$125);
            }
            returning $ceylontmp$opV$125;
        );
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.expression.operator.MyInteger $ceylontmp$opV$127 = super.getBoxedN1().remainder(super.getBoxedN2());
                super.setBoxedN1($ceylontmp$opV$127);
            }
            returning $ceylontmp$opV$127;
        );
        return null;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperatorsSub.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.operator.ArithmeticOperatorsSub.class);
}
final class toplevelN1_ {
    
    private toplevelN1_() {
    }
    private static long value;
    private static volatile boolean $init$value = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = 0L;
            $initException$ = null;
            $init$value = true;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = 0L;
            $init$value = false;
        }
    }
    
    public static long get_() {
        if (toplevelN1_.$init$value) {
            return value;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'toplevelN1\' before it was set");
        }
    }
    
    public static void set_(final long toplevelN1) {
        if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
        value = toplevelN1;
    }
}
final class toplevelN2_ {
    
    private toplevelN2_() {
    }
    private static long value;
    private static volatile boolean $init$value = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = 0L;
            $initException$ = null;
            $init$value = true;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = 0L;
            $init$value = false;
        }
    }
    
    public static long get_() {
        if (toplevelN2_.$init$value) {
            return value;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'toplevelN2\' before it was set");
        }
    }
    
    public static void set_(final long toplevelN2) {
        if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
        value = toplevelN2;
    }
}
final class toplevelI1_ {
    
    private toplevelI1_() {
    }
    private static long value;
    private static volatile boolean $init$value = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = 0L;
            $initException$ = null;
            $init$value = true;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = 0L;
            $init$value = false;
        }
    }
    
    public static long get_() {
        if (toplevelI1_.$init$value) {
            return value;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'toplevelI1\' before it was set");
        }
    }
    
    public static void set_(final long toplevelI1) {
        if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
        value = toplevelI1;
    }
}
final class toplevelGetterN1_ {
    
    private toplevelGetterN1_() {
    }
    
    public static long get_() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.get_();
    }
    
    public static void set_(final long toplevelGetterN1) {
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN1_.set_(toplevelGetterN1);
    }
}
final class toplevelGetterN2_ {
    
    private toplevelGetterN2_() {
    }
    
    public static long get_() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.get_();
    }
    
    public static void set_(final long toplevelGetterN2) {
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelN2_.set_(toplevelGetterN2);
    }
}
final class toplevelGetterI1_ {
    
    private toplevelGetterI1_() {
    }
    
    public static long get_() {
        return .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelI1_.get_();
    }
    
    public static void set_(final long toplevelGetterI1) {
        .com.redhat.ceylon.compiler.java.test.expression.operator.toplevelI1_.set_(toplevelGetterI1);
    }
}