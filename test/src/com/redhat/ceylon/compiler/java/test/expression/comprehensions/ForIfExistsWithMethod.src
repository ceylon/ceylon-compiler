package com.redhat.ceylon.compiler.java.test.expression.comprehensions;

class ForIfExistsWithMethod implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ForIfExistsWithMethod() {
    }
    
    private final .ceylon.language.Integer give$priv$() {
        return .ceylon.language.Integer.instance(0L);
    }
    
    public final .ceylon.language.Sequential<? extends .ceylon.language.Integer> m(final .ceylon.language.Sequential<? extends .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod> xs) {
        return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = xs.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod> $iterator$0;
                    private .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        x$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = (.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    private long y$2;
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod x = this.x;
                            .ceylon.language.Integer y$1 = null;
                            if ((y$1 = x.give$priv$()) != null) {
                                y$2 = y$1.longValue();
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final long y$2 = this.y$2;
                            final .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod x = this.x;
                            return .ceylon.language.Integer.instance(y$2);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.comprehensions.ForIfExistsWithMethod.class);
}