package com.redhat.ceylon.compiler.java.test.expression.ref;

class FunctionalParameterRef implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    protected FunctionalParameterRef() {
        super();
        this.nullary = null;
        this.unary = null;
        this.binary = null;
        this.ternary = null;
        this.nary = null;
        this.nullarySequenced = null;
        this.unarySequenced = null;
        this.binarySequenced = null;
        this.ternarySequenced = null;
        this.narySequenced = null;
        this.unaryUnaryMpl = null;
    }
    
    FunctionalParameterRef(final .ceylon.language.Callable<? extends .ceylon.language.String> nullary, final .ceylon.language.Callable<? extends .ceylon.language.String> unary, final .ceylon.language.Callable<? extends .ceylon.language.String> binary, final .ceylon.language.Callable<? extends .ceylon.language.String> ternary, final .ceylon.language.Callable<? extends .ceylon.language.String> nary, final .ceylon.language.Callable<? extends .ceylon.language.String> nullarySequenced, final .ceylon.language.Callable<? extends .ceylon.language.String> unarySequenced, final .ceylon.language.Callable<? extends .ceylon.language.String> binarySequenced, final .ceylon.language.Callable<? extends .ceylon.language.String> ternarySequenced, final .ceylon.language.Callable<? extends .ceylon.language.String> narySequenced, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryUnaryMpl) {
        this.nullary = nullary;
        this.unary = unary;
        this.binary = binary;
        this.ternary = ternary;
        this.nary = nary;
        this.nullarySequenced = nullarySequenced;
        this.unarySequenced = unarySequenced;
        this.binarySequenced = binarySequenced;
        this.ternarySequenced = ternarySequenced;
        this.narySequenced = narySequenced;
        this.unaryUnaryMpl = unaryUnaryMpl;
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> nullary;
    
    public final .java.lang.String nullary() {
        return nullary.$call$().toString();
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> unary;
    
    public final .java.lang.String unary(final .java.lang.String s) {
        return unary.$call$(.ceylon.language.String.instance(s)).toString();
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> binary;
    
    public final .java.lang.String binary(final .java.lang.String s1, final .java.lang.String s2) {
        return binary.$call$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2)).toString();
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> ternary;
    
    public final .java.lang.String ternary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return ternary.$call$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2), .ceylon.language.String.instance(s3)).toString();
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> nary;
    
    public final .java.lang.String nary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return nary.$call$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2), .ceylon.language.String.instance(s3), .ceylon.language.String.instance(s4)).toString();
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> nullarySequenced;
    
    public final .java.lang.String nullarySequenced() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning nullarySequenced$canonical$($ceylontmp$s$0);
        );
    }
    
    private .java.lang.String nullarySequenced$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return nullarySequenced.$callvariadic$(s).toString();
    }
    
    public final .java.lang.String nullarySequenced(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return nullarySequenced$canonical$(s);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> unarySequenced;
    
    public final .java.lang.String unarySequenced(final .java.lang.String s1) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning unarySequenced$canonical$(s1, $ceylontmp$s$1);
        );
    }
    
    private .java.lang.String unarySequenced$canonical$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return unarySequenced.$callvariadic$(.ceylon.language.String.instance(s1), s).toString();
    }
    
    public final .java.lang.String unarySequenced(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return unarySequenced$canonical$(s1, s);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> binarySequenced;
    
    public final .java.lang.String binarySequenced(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning binarySequenced$canonical$(s1, s2, $ceylontmp$s$2);
        );
    }
    
    private .java.lang.String binarySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return binarySequenced.$callvariadic$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2), s).toString();
    }
    
    public final .java.lang.String binarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return binarySequenced$canonical$(s1, s2, s);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> ternarySequenced;
    
    public final .java.lang.String ternarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$3 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning ternarySequenced$canonical$(s1, s2, s3, $ceylontmp$s$3);
        );
    }
    
    private .java.lang.String ternarySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return ternarySequenced.$callvariadic$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2), .ceylon.language.String.instance(s3), s).toString();
    }
    
    public final .java.lang.String ternarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return ternarySequenced$canonical$(s1, s2, s3, s);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.String> narySequenced;
    
    public final .java.lang.String narySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$4 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning narySequenced$canonical$(s1, s2, s3, s4, $ceylontmp$s$4);
        );
    }
    
    private .java.lang.String narySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return narySequenced.$callvariadic$(.ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2), .ceylon.language.String.instance(s3), .ceylon.language.String.instance(s4), s).toString();
    }
    
    public final .java.lang.String narySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return narySequenced$canonical$(s1, s2, s3, s4, s);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryUnaryMpl;
    
    public final .ceylon.language.Callable<? extends .ceylon.language.String> unaryUnaryMpl(final .java.lang.String s) {
        return unaryUnaryMpl.$call$(.ceylon.language.String.instance(s));
    }
    
    public final void simple() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String()(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "String()", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        return .ceylon.language.String.instance($instance$.nullary());
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("nullary()").equals(nullaryRef.$call$((.java.lang.Object)this).$call$())) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryRef(this)()"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return .ceylon.language.String.instance($instance$.unary(s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("unary(u)").equals(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(u)\" == unaryRef(this)(\"u\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return .ceylon.language.String.instance($instance$.binary(s1, s2));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("binary(b1, b2)").equals(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String, String)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return .ceylon.language.String.instance($instance$.ternary(s1, s2, s3));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("ternary(t1, t2, t3)").equals(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String, String, String)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return .ceylon.language.String.instance($instance$.nary(s1, s2, s3, s4));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("nary(n1, n2, n3, n4)").equals(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\")"));
        }
    }
    
    public final void sequenced() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String*)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "String(String*)", (short)0){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$0});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{((.ceylon.language.String)$param$0).toString()}, $param$1));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$0,
                                $param$1});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                ((.ceylon.language.String)$param$0).toString(),
                                ((.ceylon.language.String)$param$1).toString()}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                ((.ceylon.language.String)$param$0).toString(),
                                ((.ceylon.language.String)$param$1).toString(),
                                ((.ceylon.language.String)$param$2).toString()}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.nullarySequenced(s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("nullarySequenced([])").equals(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([])\" == nullaryRef(this)()"));
        }
        if (.ceylon.language.String.instance("nullarySequenced([r1])").equals(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("r1")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1])\" == nullaryRef(this)(\"r1\")"));
        }
        if (.ceylon.language.String.instance("nullarySequenced([r1, r2])").equals(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1, r2])\" == nullaryRef(this)(\"r1\", \"r2\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String*)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String*)", (short)1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0.get(.ceylon.language.Integer.instance(0))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1;
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$1});
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{((.ceylon.language.String)$param$1).toString()}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$1,
                                $param$2});
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                ((.ceylon.language.String)$param$1).toString(),
                                ((.ceylon.language.String)$param$2).toString()}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.unarySequenced(s1, s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("unarySequenced(s; [])").equals(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [])\" == unaryRef(this)(\"s\")"));
        }
        if (.ceylon.language.String.instance("unarySequenced(s; [r1])").equals(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("r1")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1])\" == unaryRef(this)(\"s\", \"r1\")"));
        }
        if (.ceylon.language.String.instance("unarySequenced(s; [r1, r2])").equals(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1, r2])\" == unaryRef(this)(\"s\", \"r1\", \"r2\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String, String*)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String*)", (short)2){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1.get(.ceylon.language.Integer.instance(1))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1.spanFrom(.ceylon.language.Integer.instance(2));
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2;
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$2});
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{((.ceylon.language.String)$param$2).toString()}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.binarySequenced(s1, s2, s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("binarySequenced(s1, s2; [])").equals(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [])\" == binaryRef(this)(\"s1\", \"s2\")"));
        }
        if (.ceylon.language.String.instance("binarySequenced(s1, s2; [r1])").equals(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("r1")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\")"));
        }
        if (.ceylon.language.String.instance("binarySequenced(s1, s2; [r1, r2])").equals(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1, r2])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\", \"r2\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String, String, String*)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String*)", (short)3){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2.get(.ceylon.language.Integer.instance(2))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2.spanFrom(.ceylon.language.Integer.instance(3));
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s3, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3;
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0.length - 3, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.ternarySequenced(s1, s2, s3, s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [])").equals(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\")"));
        }
        if (.ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1])").equals(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("r1")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\")"));
        }
        if (.ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1, r2])").equals(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1, r2])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\", \"r2\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(String, String, String, String, String*)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String, String*)", (short)4){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$3.get(.ceylon.language.Integer.instance(3))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3.spanFrom(.ceylon.language.Integer.instance(4));
                        return $calltyped$(s1, s2, s3, s4, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0.length - 4, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.narySequenced(s1, s2, s3, s4, s));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [])").equals(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\")"));
        }
        if (.ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1])").equals(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("r1")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\")"));
        }
        if (.ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1, r2])").equals(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")})))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1, r2])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\", \"r2\")"));
        }
    }
    
    public final void mpl() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>>> unaryUnaryRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$), "String(Integer)(String)(FunctionalParameterRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(Integer)(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.unaryUnaryMpl(s);
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("unaryUnaryMpl(s, 1)").equals(unaryUnaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s")).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L)))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryUnaryMpl(s, 1)\" == unaryUnaryRef(this)(\"s\")(1)"));
        }
    }
    
    public final void assortedLanguage() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Boolean>> objectEqualsRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Boolean>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Boolean.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)(Object)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Boolean> $call$(final .java.lang.Object $param$0) {
                final .java.lang.Object $instance$ = $param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Boolean>(.ceylon.language.Boolean.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Boolean $call$(final .java.lang.Object $param$0) {
                        final .java.lang.Object that = $param$0;
                        return .ceylon.language.Boolean.instance($instance$.equals(that));
                    }
                };
            }
        };
        if (objectEqualsRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object)this).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "objectEqualsRef(this)(this)"));
        }
        if (!objectEqualsRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("")).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!objectEqualsRef(this)(\"\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Boolean>> stringEqualsRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Boolean>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Boolean.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "Boolean(Object)(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Boolean> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $instance$ = (.ceylon.language.String)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Boolean>(.ceylon.language.Boolean.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Boolean $call$(final .java.lang.Object $param$0) {
                        final .java.lang.Object that = $param$0;
                        return .ceylon.language.Boolean.instance($instance$.equals(that));
                    }
                };
            }
        };
        if (stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("")).$call$((.java.lang.Object).ceylon.language.String.instance("")).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stringEqualsRef(\"\")(\"\")"));
        }
        if (!stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("")).$call$((.java.lang.Object)this).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!stringEqualsRef(\"\")(this)"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Integer>> integerPlus = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Integer>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer)(Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Integer> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Integer $instance$ = (.ceylon.language.Integer)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Integer other = (.ceylon.language.Integer)$param$0;
                        return $instance$.plus(other);
                    }
                };
            }
        };
        if (.ceylon.language.Integer.instance(2L).equals(integerPlus.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L)).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L)))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "2 == integerPlus(1)(1)"));
        }
        if (.ceylon.language.Integer.instance(1L).equals(integerPlus.$call$((.java.lang.Object).ceylon.language.Integer.instance(0L)).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L)))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1 == integerPlus(0)(1)"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> stringPlus = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $instance$ = (.ceylon.language.String)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String other = (.ceylon.language.String)$param$0;
                        return $instance$.plus(other);
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("foobar").equals(stringPlus.$call$((.java.lang.Object).ceylon.language.String.instance("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"foobar\" == stringPlus(\"foo\")(\"bar\")"));
        }
        if (stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("foobar")).$call$((.java.lang.Object)stringPlus.$call$((.java.lang.Object).ceylon.language.String.instance("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar"))).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stringEqualsRef(\"foobar\")(stringPlus(\"foo\")(\"bar\"))"));
        }
    }
    
    public .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.Inner Inner$new$(final .java.lang.String s) {
        return new Inner(s);
    }
    
    public class Inner implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
        
        protected Inner(final .java.lang.String s) {
            this.s = s;
        }
        private final .java.lang.String s;
        
        private final .java.lang.String getS$priv$() {
            return s;
        }
        
        public final .java.lang.String m(final .java.lang.String s2) {
            return new .java.lang.StringBuilder().append("Inner(").append(getS$priv$()).append(").m(").append(s2).append(")").toString();
        }
        
        @.java.lang.Override
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.Inner.class));
        }
    }
    
    public final void innerClass() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> innerMRef = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.Inner.class))), "String(String)(FunctionalParameterRef.Inner)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.Inner $instance$ = (.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.Inner)$param$0;
                return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0).toString();
                        return .ceylon.language.String.instance($instance$.m(s2));
                    }
                };
            }
        };
        if (.ceylon.language.String.instance("Inner(foo).m(bar)").equals(innerMRef.$call$((.java.lang.Object)Inner$new$("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar")))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"Inner(foo).m(bar)\" == innerMRef(Inner(\"foo\"))(\"bar\")"));
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class functionalParameterRef_ {
    
    private functionalParameterRef_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void functionalParameterRef() {
        final .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef mr = (
            let
            {
                .ceylon.language.Callable arg$35$0 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "String()", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("nullary")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$() {
                        return .ceylon.language.String.instance("nullary()");
                    }
                };
                .ceylon.language.Callable arg$35$1 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("unary")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("unary(").append(s).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$2 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String)", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("binary")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("binary(").append(s1).append(", ").append(s2).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$3 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String)", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("ternary")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("ternary(").append(s1).append(", ").append(s2).append(", ").append(s3).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$4 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String)", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("nary")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("nary(").append(s1).append(", ").append(s2).append(", ").append(s3).append(", ").append(s4).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$5 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "String(String*)", (short)0)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("nullarySequenced")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$0});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$0,
                                $param$1});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2});
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("nullarySequenced(").append(s.toString()).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$6 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String*)", (short)1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("unarySequenced")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0.get(.ceylon.language.Integer.instance(0))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1;
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$1});
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{
                                $param$1,
                                $param$2});
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("unarySequenced(").append(s1).append("; ").append(s.toString()).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$7 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String*)", (short)2)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("binarySequenced")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1.get(.ceylon.language.Integer.instance(1))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1.spanFrom(.ceylon.language.Integer.instance(2));
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2;
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{$param$2});
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("binarySequenced(").append(s1).append(", ").append(s2).append("; ").append(s.toString()).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$8 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String*)", (short)3)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("ternarySequenced")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2.get(.ceylon.language.Integer.instance(2))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2.spanFrom(.ceylon.language.Integer.instance(3));
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s3, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3;
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0.length - 3, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("ternarySequenced(").append(s1).append(", ").append(s2).append(", ").append(s3).append("; ").append(s.toString()).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$9 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String, String*)", (short)4)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("narySequenced")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$3.get(.ceylon.language.Integer.instance(3))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3.spanFrom(.ceylon.language.Integer.instance(4));
                        return $calltyped$(s1, s2, s3, s4, s);
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0.length - 4, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("narySequenced(").append(s1).append(", ").append(s2).append(", ").append(s3).append(", ").append(s4).append("; ").append(s.toString()).append(")").toString());
                    }
                };
                .ceylon.language.Callable arg$35$10 = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(Integer)(String)", (short)-1)
                @.com.redhat.ceylon.compiler.java.metadata.LocalDeclaration(qualifier = "1")
                @.com.redhat.ceylon.compiler.java.metadata.Name("unaryUnaryMpl")
                @.com.redhat.ceylon.compiler.java.metadata.Method
                {
                    
                    @.java.lang.Override
                    @.com.redhat.ceylon.compiler.java.metadata.Ignore
                    public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
                            
                            @.java.lang.Override
                            @.com.redhat.ceylon.compiler.java.metadata.Ignore
                            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                                final long i = ((.ceylon.language.Integer)$param$0).longValue();
                                return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("unaryUnaryMpl(").append(s).append(", ").append(i).append(")").toString());
                            }
                        };
                    }
                };
            }
            returning new .com.redhat.ceylon.compiler.java.test.expression.ref.FunctionalParameterRef(arg$35$0, arg$35$1, arg$35$2, arg$35$3, arg$35$4, arg$35$5, arg$35$6, arg$35$7, arg$35$8, arg$35$9, arg$35$10);
        );
        mr.simple();
        mr.sequenced();
        mr.mpl();
        mr.assortedLanguage();
        mr.innerClass();
    }
}