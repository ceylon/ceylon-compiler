package com.redhat.ceylon.compiler.java.test.structure.concrete;

interface Iterable {
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.Iterable.class);
}
class NameCollision implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.concrete.Iterable, .ceylon.language.Iterable<.ceylon.language.Integer, .java.lang.Object>, .java.io.Serializable {
    
    NameCollision() {
        this.$ceylon$language$Iterable$this$ = new .ceylon.language.Iterable$impl(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, this);
        this.$ceylon$language$Category$this$ = new .ceylon.language.Category$impl<.java.lang.Object>(.ceylon.language.Object.$TypeDescriptor$, this);
        this.empty = true;
    }
    protected final .ceylon.language.Iterable$impl<.ceylon.language.Integer, .java.lang.Object> $ceylon$language$Iterable$this$;
    
    @.java.lang.Override
    public .ceylon.language.Iterable$impl<? extends .ceylon.language.Integer, ? extends .java.lang.Object> $ceylon$language$Iterable$impl() {
        return $ceylon$language$Iterable$this$;
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable getPaired() {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .ceylon.language.Integer>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.getPaired();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getCycled() {
        return $ceylon$language$Iterable$this$.getCycled();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Integer>, ? extends .java.lang.Object> getIndexed() {
        return $ceylon$language$Iterable$this$.getIndexed();
    }
    
    @.java.lang.Override
    public .java.lang.String toString() {
        return $ceylon$language$Iterable$this$.toString();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getCoalesced() {
        return $ceylon$language$Iterable$this$.getCoalesced();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getExceptLast() {
        return $ceylon$language$Iterable$this$.getExceptLast();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getRest() {
        return $ceylon$language$Iterable$this$.getRest();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> getDistinct() {
        return $ceylon$language$Iterable$this$.getDistinct();
    }
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$Iterable$this$.getSize();
    }
    
    @.java.lang.Override
    public boolean longerThan(final long length) {
        return $ceylon$language$Iterable$this$.longerThan(length);
    }
    
    @.java.lang.Override
    public boolean shorterThan(final long length) {
        return $ceylon$language$Iterable$this$.shorterThan(length);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer getFromFirst(final long index) {
        return $ceylon$language$Iterable$this$.getFromFirst(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.Integer> sequence() {
        return $ceylon$language$Iterable$this$.sequence();
    }
    
    @.java.lang.Override
    public .java.lang.Object indexes() {
        return $ceylon$language$Iterable$this$.indexes();
    }
    
    @.java.lang.Override
    public .java.lang.Object each(final .ceylon.language.Callable<? extends .java.lang.Object> step) {
        return $ceylon$language$Iterable$this$.each(step);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object> map(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.map($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public <Result, OtherAbsent>.ceylon.language.Iterable flatMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends OtherAbsent>> collecting) {
        return (.ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.flatMap($reified$Result, $reified$OtherAbsent, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.filter(selecting);
    }
    
    @.java.lang.Override
    public <Type>.ceylon.language.Iterable narrow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Type) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.narrow($reified$Type);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends Result> fold(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.fold($reified$Result, initial);
    }
    
    @.java.lang.Override
    public <Result>.java.lang.Object reduce(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.reduce($reified$Result, accumulating);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> scan(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final Result initial) {
        return $ceylon$language$Iterable$this$.scan($reified$Result, initial);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer findLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.findLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Integer> locate(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locate(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Integer> locateLast(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locateLast(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Integer>, ? extends .java.lang.Object> locations(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.locations(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Integer max(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return (.ceylon.language.Integer)$ceylon$language$Iterable$this$.max(comparing);
    }
    
    @.java.lang.Override
    public <Result, Args extends .ceylon.language.Sequential<? extends .java.lang.Object>>.ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends Result, ? extends .java.lang.Object>> spread(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Args, final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends Result>> method) {
        return $ceylon$language$Iterable$this$.spread($reified$Result, $reified$Args, method);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.Integer> sort(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this$.sort(comparing);
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Sequential<? extends Result> collect(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.collect($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Sequential<? extends .ceylon.language.Integer> select(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.select(selecting);
    }
    
    @.java.lang.Override
    public long count(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.count(selecting);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this$.every(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> skip(final long skipping) {
        return $ceylon$language$Iterable$this$.skip(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> take(final long taking) {
        return $ceylon$language$Iterable$this$.take(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> skipWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> skipping) {
        return $ceylon$language$Iterable$this$.skipWhile(skipping);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> takeWhile(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> taking) {
        return $ceylon$language$Iterable$this$.takeWhile(taking);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> repeat(final long times) {
        return $ceylon$language$Iterable$this$.repeat(times);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> by(final long step) {
        return $ceylon$language$Iterable$this$.by(step);
    }
    
    @.java.lang.Override
    public <Default>.ceylon.language.Iterable defaultNullElements(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Default, final Default defaultValue) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.defaultNullElements($reified$Default, defaultValue);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .ceylon.language.Integer>, ? extends .java.lang.Object> partition(final long length) {
        return $ceylon$language$Iterable$this$.partition(length);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable follow(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other head) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.follow($reified$Other, head);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable chain(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.chain($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public <Other, OtherAbsent>.ceylon.language.Iterable product(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$OtherAbsent, final .ceylon.language.Iterable<? extends Other, ? extends OtherAbsent> other) {
        return (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)$ceylon$language$Iterable$this$.product($reified$Other, $reified$OtherAbsent, other);
    }
    
    @.java.lang.Override
    public final <Other>long interpose$step(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return $ceylon$language$Iterable$this$.interpose$step($reified$Other, element);
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element) {
        return (
            let
            {
                long $ceylontmp$step$0 = interpose$step($reified$Other, element);
            }
            returning interpose$canonical$($reified$Other, element, $ceylontmp$step$0);
        );
    }
    
    @.java.lang.Override
    public <Other>.ceylon.language.Iterable interpose(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    private <Other>.ceylon.language.Iterable interpose$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Other, final Other element, final long step) {
        return (.ceylon.language.Iterable)$ceylon$language$Iterable$this$.interpose($reified$Other, element, step);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Map<? extends .ceylon.language.Integer, ? extends .ceylon.language.Integer> frequencies() {
        return $ceylon$language$Iterable$this$.frequencies();
    }
    
    @.java.lang.Override
    public final <Result>.ceylon.language.Map<? extends .ceylon.language.Integer, ? extends Result> tabulate(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this$.tabulate($reified$Result, collecting);
    }
    
    @.java.lang.Override
    public final <Group>.ceylon.language.Map<? extends Group, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Integer>> group(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Group, final .ceylon.language.Callable<? extends Group> grouping) {
        return $ceylon$language$Iterable$this$.group($reified$Group, grouping);
    }
    
    @.java.lang.Override
    public final <Group, Result>.ceylon.language.Map<? extends Group, ? extends Result> summarize(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Group, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Result, final .ceylon.language.Callable<? extends Group> grouping, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this$.summarize($reified$Group, $reified$Result, grouping, accumulating);
    }
    protected final .ceylon.language.Category$impl<.java.lang.Object> $ceylon$language$Category$this$;
    
    @.java.lang.Override
    public .ceylon.language.Category$impl<? super .java.lang.Object> $ceylon$language$Category$impl() {
        return $ceylon$language$Category$this$;
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsEvery(elements);
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this$.containsAny(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iterator() {
        return (.ceylon.language.Iterator<? extends .ceylon.language.Integer>).ceylon.language.nothing_.get_();
    }
    private final boolean empty;
    
    @.java.lang.Override
    public final boolean getEmpty() {
        return empty;
    }
    
    @.java.lang.Override
    public final boolean contains(final .java.lang.Object element) {
        return false;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getFirst() {
        return (.ceylon.language.Integer).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Integer getLast() {
        return (.ceylon.language.Integer).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.concrete.NameCollision.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.concrete.NameCollision.class);
}