package com.redhat.ceylon.compiler.java.test.structure.constructor;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
        value = "T",
        variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
class CtorConcreteDelegationSuper<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    CtorConcreteDelegationSuper(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        this.$reified$T = $reified$T;
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("super");
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorConcreteDelegationSuper.class, $reified$T);
    }
}
class C<T> extends .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorConcreteDelegationSuper<T> {
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_ x$delegation$_ = null;
    
    private static final class x$delegation$_ {
        
        private x$delegation$_() {
        }
    }
    
    private C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_ $name$) {
        super($reified$T);
        this.$reified$T = $reified$T;
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("1");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("X");
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x_ x_ = null;
    
    public static final class x_ {
        
        private x_() {
        }
    }
    
    public C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x_ $name$) {
        this($reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("5");
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.y_ y_ = null;
    
    public static final class y_ {
        
        private y_() {
        }
    }
    
    public C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.y_ $name$) {
        this($reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        $return$$0: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Y");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("5");
    }
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z$delegation$_ z$delegation$_ = null;
    
    private static final class z$delegation$_ {
        
        private z$delegation$_() {
        }
    }
    
    private C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z$delegation$_ $name$) {
        this($reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Z");
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z_ z_ = null;
    
    public static final class z_ {
        
        private z_() {
        }
    }
    
    public C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z_ $name$) {
        this($reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x$delegation$_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        $return$$1: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Z");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("5");
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.C.alpha_ alpha_ = null;
    
    public static final class alpha_ {
        
        private alpha_() {
        }
    }
    
    public C(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.alpha_ $name$) {
        this($reified$T, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z$delegation$_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
        $return$$2: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("alpha");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("5");
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.C.class, $reified$T);
    }
}
class ExtendsBasic<X> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour$delegation$_ pour$delegation$_ = null;
    
    private static final class pour$delegation$_ {
        
        private pour$delegation$_() {
        }
    }
    
    private ExtendsBasic(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour$delegation$_ $name$, final X who$param$) {
        this.$reified$X = $reified$X;
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("1");
        final X who;
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("For");
        who = who$param$;
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour_ pour_ = null;
    
    public static final class pour_ {
        
        private pour_() {
        }
    }
    
    public ExtendsBasic(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour_ $name$, final X who$param$) {
        this($reified$X, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour$delegation$_, who$param$);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.monde_ monde_ = null;
    
    public static final class monde_ {
        
        private monde_() {
        }
    }
    
    public ExtendsBasic(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.monde_ $name$) {
        this($reified$X, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour$delegation$_, (X)null);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        $return$$3: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("World");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.class, $reified$X);
    }
}
class Hello implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    @.com.redhat.ceylon.compiler.java.metadata.NoInitCheck
    private final .java.lang.String who;
    
    private final .java.lang.String getWho$priv$() {
        return who;
    }
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour$delegation$_ pour$delegation$_ = null;
    
    private static final class pour$delegation$_ {
        
        private pour$delegation$_() {
        }
    }
    
    private Hello(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour$delegation$_ $name$, final .java.lang.String who$param$) {
        this.who = who$param$;
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour_ pour_ = null;
    
    public static final class pour_ {
        
        private pour_() {
        }
    }
    
    public Hello(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour_ $name$, final .java.lang.String who$param$) {
        this(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour$delegation$_, who$param$);
        .ceylon.language.print_.print(.ceylon.language.String.instance("Hello " + getWho$priv$()));
    }
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.monde_ monde_ = null;
    
    public static final class monde_ {
        
        private monde_() {
        }
    }
    
    public Hello(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.monde_ $name$) {
        this(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.pour$delegation$_, "world");
        $return$$4: do {
        }         while (false);
        .ceylon.language.print_.print(.ceylon.language.String.instance("Hello " + getWho$priv$()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.Hello.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class runCtorConcreteDelegation_ {
    
    private runCtorConcreteDelegation_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    public static void runCtorConcreteDelegation() {
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.C<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.x_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[super, 1, X, 2, 3, 4, 5]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.C<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.y_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[super, 1, X, 2, Y, 3, 4, 5]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.C<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.z_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[super, 1, X, 2, 3, Z, 4, 5]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.C<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.constructor.C.alpha_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[super, 1, X, 2, 3, Z, 4, alpha, 5]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.pour_, .ceylon.language.String.instance("tom"));
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[1, For, 2, 3]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .com.redhat.ceylon.compiler.java.test.structure.constructor.ExtendsBasic.monde_);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[1, For, 2, World, 3]");
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.runCtorConcreteDelegation_.runCtorConcreteDelegation();
    }
}