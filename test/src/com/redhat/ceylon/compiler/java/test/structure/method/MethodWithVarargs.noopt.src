package com.redhat.ceylon.compiler.java.test.structure.method;

class MethodWithVarargs implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodWithVarargs() {
    }
    
    public final void f1() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$2 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f1$canonical$($ceylontmp$ns$2);
            }
            returning null;
        );
    }
    
    private void f1$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        .java.lang.Object elem$0;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$1 = ns.iterator();
        loop_0: while (!((elem$0 = n$iterator$$1.next()) instanceof .ceylon.language.Finished)) {
            final long n = ((.ceylon.language.Integer)elem$0).longValue();
        }
    }
    
    public final void f1(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        (
            let
            {
                f1$canonical$(ns);
            }
            returning null;
        );
    }
    
    public final void f2(final long i) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.Integer> $ceylontmp$ns$5 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f2$canonical$(i, $ceylontmp$ns$5);
            }
            returning null;
        );
    }
    
    private void f2$canonical$(final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        .java.lang.Object elem$3;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> n$iterator$$4 = ns.iterator();
        loop_1: while (!((elem$3 = n$iterator$$4.next()) instanceof .ceylon.language.Finished)) {
            final long n = ((.ceylon.language.Integer)elem$3).longValue();
        }
    }
    
    public final void f2(final long i, final .ceylon.language.Sequential<? extends .ceylon.language.Integer> ns) {
        (
            let
            {
                f2$canonical$(i, ns);
            }
            returning null;
        );
    }
    
    public final void f3() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$os$8 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                f3$canonical$($ceylontmp$os$8);
            }
            returning null;
        );
    }
    
    private void f3$canonical$(final .ceylon.language.Sequential<? extends .java.lang.Object> os) {
        .java.lang.Object elem$6;
        .ceylon.language.Iterator<? extends .java.lang.Object> o$iterator$$7 = os.iterator();
        loop_2: while (!((elem$6 = o$iterator$$7.next()) instanceof .ceylon.language.Finished)) {
            final .java.lang.Object o = elem$6;
        }
    }
    
    public final void f3(final .ceylon.language.Sequential<? extends .java.lang.Object> os) {
        (
            let
            {
                f3$canonical$(os);
            }
            returning null;
        );
    }
    
    private final void m$priv$() {
        f1((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f2(1L, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f1();
        f2(1L);
        f1((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f2(1L, (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}, .ceylon.language.empty_.get_()));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.Integer.instance(1L);
                
                case 1: 
                    return .ceylon.language.Integer.instance(2L);
                
                case 2: 
                    return .ceylon.language.Integer.instance(3L);
                
                default: 
                    return null;
                
                }
            }
        }}, .ceylon.language.empty_.get_()));
        f3((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)}));
        f3((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.String.instance("foo"),
                .ceylon.language.Float.instance(5.0)}, .ceylon.language.empty_.get_()));
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.method.MethodWithVarargs.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.method.MethodWithVarargs.class);
}