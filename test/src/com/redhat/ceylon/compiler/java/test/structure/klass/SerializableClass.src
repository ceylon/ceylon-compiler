package com.redhat.ceylon.compiler.java.test.structure.klass;

class SerializableClass implements .com.redhat.ceylon.compiler.java.runtime.serialization.Serializable, .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    public SerializableClass(final .com.redhat.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        this.sharedVariableInteger = 0L;
        this.sharedInteger = 0L;
        this.sharedOptionalInteger = null;
        this.deferred = 0L;
    }
    
    SerializableClass() {
        this.sharedVariableInteger = 1L;
        this.sharedInteger = 1L;
        this.sharedOptionalInteger = null;
        deferred = 1L;
    }
    
    @.java.lang.Override
    public void $serialize$(final .ceylon.language.serialization.Deconstructor deconstructor) {
        deconstructor.<.ceylon.language.Integer>putValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedVariableInteger"), .ceylon.language.Integer.instance(this.sharedVariableInteger));
        deconstructor.<.ceylon.language.Integer>putValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedInteger"), .ceylon.language.Integer.instance(this.sharedInteger));
        deconstructor.<.ceylon.language.Integer>putValue(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedOptionalInteger"), this.sharedOptionalInteger);
        deconstructor.<.ceylon.language.Integer>putValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "deferred"), .ceylon.language.Integer.instance(this.deferred));
    }
    
    @.java.lang.Override
    public void $deserialize$(final .ceylon.language.serialization.Deconstructed deconstructed) {
        final .java.lang.invoke.MethodHandles.Lookup lookup = .java.lang.invoke.MethodHandles.lookup();
        this.sharedVariableInteger = (
            let
            {
                .java.lang.Object valueOrRef$0 = deconstructed.<.ceylon.language.Integer>getValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedVariableInteger"));
            }
            returning valueOrRef$0 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$0).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$0;
        ).longValue();
        .com.redhat.ceylon.compiler.java.Util.setter(lookup, "sharedInteger").invokeExact(this, (long)(
            let
            {
                .java.lang.Object valueOrRef$1 = deconstructed.<.ceylon.language.Integer>getValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedInteger"));
            }
            returning valueOrRef$1 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$1).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$1;
        ).longValue());
        .com.redhat.ceylon.compiler.java.Util.setter(lookup, "sharedOptionalInteger").invokeExact(this, (.ceylon.language.Integer)(
            let
            {
                .java.lang.Object valueOrRef$2 = deconstructed.<.ceylon.language.Integer>getValue(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$), ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedOptionalInteger"));
            }
            returning valueOrRef$2 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$2).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$2;
        ));
        .com.redhat.ceylon.compiler.java.Util.setter(lookup, "deferred").invokeExact(this, (long)(
            let
            {
                .java.lang.Object valueOrRef$3 = deconstructed.<.ceylon.language.Integer>getValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "deferred"));
            }
            returning valueOrRef$3 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$3).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$3;
        ).longValue());
    }
    private long sharedVariableInteger;
    
    public final long getSharedVariableInteger() {
        return sharedVariableInteger;
    }
    
    public final void setSharedVariableInteger(final long sharedVariableInteger) {
        this.sharedVariableInteger = sharedVariableInteger;
    }
    private final long sharedInteger;
    
    public final long getSharedInteger() {
        return sharedInteger;
    }
    private final .ceylon.language.Integer sharedOptionalInteger;
    
    public final .ceylon.language.Integer getSharedOptionalInteger() {
        return sharedOptionalInteger;
    }
    private final long deferred;
    
    public final long getDeferred() {
        return deferred;
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass.class);
}
class SerializableSubclass extends .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableClass implements .com.redhat.ceylon.compiler.java.runtime.serialization.Serializable {
    
    public SerializableSubclass(final .com.redhat.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        super(ignored);
    }
    
    SerializableSubclass() {
        super();
        this.$init$variableInteger = false;
        this.$init$integer = false;
    }
    
    @.java.lang.Override
    public void $serialize$(final .ceylon.language.serialization.Deconstructor deconstructor) {
        super.$serialize$(deconstructor);
        if (variablePartner == null) throw new .ceylon.language.AssertionError("instance cannot be serialized: com.redhat.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variablePartner has not been initialized");
        deconstructor.<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>putValue(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variablePartner"), this.getVariablePartner());
        if (partner == null) throw new .ceylon.language.AssertionError("instance cannot be serialized: com.redhat.ceylon.compiler.java.test.structure.klass::SerializableSubclass.partner has not been initialized");
        deconstructor.<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>putValue(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "partner"), this.getPartner());
        if (!$init$variableInteger) throw new .ceylon.language.AssertionError("instance cannot be serialized: com.redhat.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variableInteger has not been initialized");
        deconstructor.<.ceylon.language.Integer>putValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variableInteger"), .ceylon.language.Integer.instance(this.getVariableInteger()));
        if (!$init$integer) throw new .ceylon.language.AssertionError("instance cannot be serialized: com.redhat.ceylon.compiler.java.test.structure.klass::SerializableSubclass.integer has not been initialized");
        deconstructor.<.ceylon.language.Integer>putValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "integer"), .ceylon.language.Integer.instance(this.getInteger()));
    }
    
    @.java.lang.Override
    public void $deserialize$(final .ceylon.language.serialization.Deconstructed deconstructed) {
        super.$deserialize$(deconstructed);
        this.setVariablePartner((
            let
            {
                .java.lang.Object valueOrRef$4 = deconstructed.<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>getValue(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variablePartner"));
            }
            returning valueOrRef$4 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>)valueOrRef$4).$leakInstance$() : (.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass)valueOrRef$4;
        ));
        this.setPartner((
            let
            {
                .java.lang.Object valueOrRef$5 = deconstructed.<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>getValue(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "partner"));
            }
            returning valueOrRef$5 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass>)valueOrRef$5).$leakInstance$() : (.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass)valueOrRef$5;
        ));
        this.setVariableInteger((
            let
            {
                .java.lang.Object valueOrRef$6 = deconstructed.<.ceylon.language.Integer>getValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variableInteger"));
            }
            returning valueOrRef$6 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$6).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$6;
        ).longValue());
        this.setInteger((
            let
            {
                .java.lang.Object valueOrRef$7 = deconstructed.<.ceylon.language.Integer>getValue(.ceylon.language.Integer.$TypeDescriptor$, ((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).com.redhat.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "integer"));
            }
            returning valueOrRef$7 instanceof .ceylon.language.serialization.Reference ? ((.com.redhat.ceylon.compiler.java.runtime.serialization.$InstanceLeaker$<.ceylon.language.Integer>)valueOrRef$7).$leakInstance$() : (.ceylon.language.Integer)valueOrRef$7;
        ).longValue());
    }
    private .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass variablePartner;
    
    public final .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass getVariablePartner() {
        if (this.variablePartner != null) {
            return variablePartner;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'variablePartner\'");
        }
    }
    
    public final void setVariablePartner(final .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass variablePartner) {
        this.variablePartner = variablePartner;
    }
    private .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass partner;
    
    public final .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass getPartner() {
        if (this.partner != null) {
            return partner;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'partner\'");
        }
    }
    
    public final void setPartner(final .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass partner) {
        if (this.partner == null) {
            this.partner = partner;
            return;
        }
        throw new .ceylon.language.InitializationError("Re-initialization of \'late\' attribute");
    }
    private long variableInteger;
    private volatile transient boolean $init$variableInteger;
    
    public final long getVariableInteger() {
        if (this.$init$variableInteger) {
            return variableInteger;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'variableInteger\'");
        }
    }
    
    public final void setVariableInteger(final long variableInteger) {
        this.variableInteger = variableInteger;
        this.$init$variableInteger = true;
    }
    private long integer;
    private volatile transient boolean $init$integer;
    
    public final long getInteger() {
        if (this.$init$integer) {
            return integer;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'integer\'");
        }
    }
    
    public final void setInteger(final long integer) {
        if (!this.$init$integer) {
            this.integer = integer;
            this.$init$integer = true;
            return;
        }
        throw new .ceylon.language.InitializationError("Re-initialization of \'late\' attribute");
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class);
}