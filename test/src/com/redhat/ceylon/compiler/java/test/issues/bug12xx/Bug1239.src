package com.redhat.ceylon.compiler.java.test.issues.bug12xx;

public class LazyMap<Key, Item> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected LazyMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item) {
        super();
        this.$reified$Key = $reified$Key;
        this.$reified$Item = $reified$Item;
    }
    
    public LazyMap(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key, final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item, final .ceylon.language.Iterable<? extends .ceylon.language.Entry<? extends Key, ? extends Item>, ? extends .java.lang.Object> entries) {
        this.$reified$Key = $reified$Key;
        this.$reified$Item = $reified$Item;
    }
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Key;
    private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Item;
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.issues.bug12xx.LazyMap.class, $reified$Key, $reified$Item);
    }
}
final class bug1239_ {
    
    private bug1239_() {
    }
    private static final .java.lang.Object value;
    private static volatile boolean $init$value = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            value = new .com.redhat.ceylon.compiler.java.test.issues.bug12xx.LazyMap<.ceylon.language.String, .ceylon.language.Callable<? extends .ceylon.language.String>>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Callable<? extends .ceylon.language.String>>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$))), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 2, false){
                
                @.java.lang.Override
                protected final .java.lang.Object $evaluate$(int $index$) {
                    switch ($index$) {
                    case 0: 
                        return new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.Callable<? extends .ceylon.language.String>>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .ceylon.language.String.instance("d"), new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
                            
                            @.java.lang.Override
                            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                                final long lxx = ((.ceylon.language.Integer)$param$0).longValue();
                                return .ceylon.language.String.instance("");
                            }
                        });
                    
                    case 1: 
                        return new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.Callable<? extends .ceylon.language.String>>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .ceylon.language.String.instance("i"), new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
                            
                            @.java.lang.Override
                            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                                final long lxx = ((.ceylon.language.Integer)$param$0).longValue();
                                return .ceylon.language.String.instance("");
                            }
                        });
                    
                    default: 
                        return null;
                    
                    }
                }
            });
            $initException$ = null;
            $init$value = true;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            value = null;
            $init$value = false;
        }
    }
    
    public static .java.lang.Object get_() {
        if (bug1239_.$init$value) {
            return value;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'bug1239\' before it was set");
        }
    }
}