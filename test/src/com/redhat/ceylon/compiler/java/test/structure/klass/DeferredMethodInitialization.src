package com.redhat.ceylon.compiler.java.test.structure.klass;

class DeferredInitializedMethod implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    DeferredInitializedMethod() {
        
        final class s_ {
            
            private s_() {
                this.s$priv$ = null;
            }
            private .ceylon.language.Callable<? extends .ceylon.language.String> s$priv$;
            
            private final .java.lang.String s$priv$() {
                return (
                    let
                    {
                        .java.lang.String $ceylontmp$name$0 = s$name();
                    }
                    returning s$priv$$canonical$($ceylontmp$name$0);
                );
            }
            
            private final .java.lang.String s$name() {
                return "world";
            }
            
            private .java.lang.String s$priv$$canonical$(final .java.lang.String name) {
                if (s$priv$ == null) throw new .com.redhat.ceylon.compiler.java.language.UninitializedMethodError(); else return s$priv$.$call$(.ceylon.language.String.instance(name)).toString();
            }
            
            private final .java.lang.String s$priv$(final .java.lang.String name) {
                return s$priv$$canonical$(name);
            }
        }
        final s_ s = new s_();
        s.s$priv$ = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                final .java.lang.String name = ((.ceylon.language.String)$param$0).toString();
                return .ceylon.language.String.instance("hello " + name);
            }
        };
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.DeferredInitializedMethod.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.DeferredInitializedMethod.class);
}