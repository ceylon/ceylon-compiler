package com.redhat.ceylon.compiler.java.test.structure.reified;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.SharedAnnotation$annotation$
public class MethodClass implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    public MethodClass() {
        this.methodSpec = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "Anything()", (short)-1){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.lang.Object $call$() {
                return (
                    let
                    {
                        .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass.this.method(.ceylon.language.Integer.$TypeDescriptor$);
                    }
                    returning null;
                );
            }
        };
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public final <T>void method(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        <T>method($reified$T);
        <.ceylon.language.Integer>method(.ceylon.language.Integer.$TypeDescriptor$);
        <.java.lang.Object>method(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .ceylon.language.Callable<? extends .java.lang.Object> methodSpec;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything()")
    public final .ceylon.language.Callable<? extends .java.lang.Object> getMethodSpec() {
        return methodSpec;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public final <T>long method2(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return 2L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    private final void test$priv$() {
        getMethodSpec().$call$();
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        (
            let
            {
                long $ceylontmp$a$0 = methodWithOverloads$a($reified$T);
                long $ceylontmp$b$1 = methodWithOverloads$b($reified$T, $ceylontmp$a$0);
                methodWithOverloads$canonical$($reified$T, $ceylontmp$a$0, $ceylontmp$b$1);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$a(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return 2L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        (
            let
            {
                long $ceylontmp$b$2 = methodWithOverloads$b($reified$T, a);
                methodWithOverloads$canonical$($reified$T, a, $ceylontmp$b$2);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$b(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        return 3L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private <T>void methodWithOverloads$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a, final long b) {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public final <T>void methodWithOverloads(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.com.redhat.ceylon.compiler.java.metadata.Name("a")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long a, @.com.redhat.ceylon.compiler.java.metadata.Name("b")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long b) {
        (
            let
            {
                methodWithOverloads$canonical$($reified$T, a, b);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    private final void test2$priv$() {
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass arg$3$argthis$ = this;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$3$reified$0 = .ceylon.language.Integer.$TypeDescriptor$;
                long arg$3$0 = arg$3$argthis$.methodWithOverloads$a(arg$3$reified$0);
                long arg$3$1 = arg$3$argthis$.methodWithOverloads$b(arg$3$reified$0, arg$3$0);
                <.ceylon.language.Integer>methodWithOverloads(arg$3$reified$0, arg$3$0, arg$3$1);
            }
            returning null;
        );
        <.ceylon.language.Integer>methodWithOverloads(.ceylon.language.Integer.$TypeDescriptor$);
        (
            let
            {
                .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass arg$4$argthis$ = this;
                .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor arg$4$reified$0 = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType;
                long arg$4$0 = arg$4$argthis$.methodWithOverloads$a(arg$4$reified$0);
                long arg$4$1 = arg$4$argthis$.methodWithOverloads$b(arg$4$reified$0, arg$4$0);
                <.java.lang.Object>methodWithOverloads(arg$4$reified$0, arg$4$0, arg$4$1);
            }
            returning null;
        );
        <.java.lang.Object>methodWithOverloads(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.SharedAnnotation$annotation$
public interface MethodInterface {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface$impl $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$impl();
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T);
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public abstract <T>long methodWithOverloads$a(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T);
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a);
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public abstract <T>long methodWithOverloads$b(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a);
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public <T>void methodWithOverloads(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.com.redhat.ceylon.compiler.java.metadata.Name("a")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long a, @.com.redhat.ceylon.compiler.java.metadata.Name("b")
    @.com.redhat.ceylon.compiler.java.metadata.Defaulted
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Integer")
    final long b);
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.FormalAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "ceylon.language::Anything",
            declaredVoid = true)
    public abstract .java.lang.Object m();
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ignore
public final class MethodInterface$impl implements .java.io.Serializable {
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public MethodInterface$impl(.com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface $this) {
        this.$this = $this;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface $this;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        (
            let
            {
                long $ceylontmp$a$5 = methodWithOverloads$a($reified$T);
                long $ceylontmp$b$6 = methodWithOverloads$b($reified$T, $ceylontmp$a$5);
                methodWithOverloads$canonical$($reified$T, $ceylontmp$a$5, $ceylontmp$b$6);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$a(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return 2L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        (
            let
            {
                long $ceylontmp$b$7 = methodWithOverloads$b($reified$T, a);
                methodWithOverloads$canonical$($reified$T, a, $ceylontmp$b$7);
            }
            returning null;
        );
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$b(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        return 3L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private <T>void methodWithOverloads$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a, final long b) {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a, final long b) {
        (
            let
            {
                methodWithOverloads$canonical$($reified$T, a, b);
            }
            returning null;
        );
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.ceylon.language.SharedAnnotation$annotation$
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"com.redhat.ceylon.compiler.java.test.structure.reified::MethodInterface"})
public class MethodInterfaceImpl implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface, .java.io.Serializable {
    
    @.com.redhat.ceylon.compiler.java.metadata.Jpa
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected MethodInterfaceImpl() {
        super();
        this.$com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$ = new .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface$impl(this);
        this.c = null;
        this.m$specifier$ = null;
    }
    
    public MethodInterfaceImpl(@.com.redhat.ceylon.compiler.java.metadata.Name("c")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::MethodClass")
    final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass c) {
        this.c = c;
        this.$com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$ = new .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface$impl(this);
        this.m$specifier$ = (
            let
            {
                final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass $instance$ = .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterfaceImpl.this.getC$priv$();
            }
            returning new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "Integer()", (short)-1){
                
                @.java.lang.Override
                @.com.redhat.ceylon.compiler.java.metadata.Ignore
                public .ceylon.language.Integer $call$() {
                    return (.ceylon.language.Integer).ceylon.language.Integer.instance($instance$.method2(.ceylon.language.Integer.$TypeDescriptor$));
                }
            };
        );
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass c;
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.structure.reified::MethodClass")
    private final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodClass getC$priv$() {
        return c;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    protected final .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface$impl $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterface$impl $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$impl() {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$;
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$a(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$.methodWithOverloads$a($reified$T);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        (
            let
            {
                long $ceylontmp$a$8 = methodWithOverloads$a($reified$T);
                long $ceylontmp$b$9 = methodWithOverloads$b($reified$T, $ceylontmp$a$8);
                methodWithOverloads$canonical$($reified$T, $ceylontmp$a$8, $ceylontmp$b$9);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>long methodWithOverloads$b(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        return $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$.methodWithOverloads$b($reified$T, a);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a) {
        (
            let
            {
                long $ceylontmp$b$10 = methodWithOverloads$b($reified$T, a);
                methodWithOverloads$canonical$($reified$T, a, $ceylontmp$b$10);
            }
            returning null;
        );
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public final <T>void methodWithOverloads(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a, final long b) {
        $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$.methodWithOverloads($reified$T, a, b);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private <T>void methodWithOverloads$canonical$(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long a, final long b) {
        $com$redhat$ceylon$compiler$java$test$structure$reified$MethodInterface$this$.methodWithOverloads($reified$T, a, b);
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.Integer> m$specifier$;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
            value = "ceylon.language::Anything",
            declaredVoid = true)
    public final .java.lang.Object m() {
        return m$specifier$.$call$();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterfaceImpl.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.reified.MethodInterfaceImpl.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class method_ {
    
    private method_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public static <T>void method(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        .com.redhat.ceylon.compiler.java.test.structure.reified.method_.<T>method($reified$T);
        .com.redhat.ceylon.compiler.java.test.structure.reified.method_.<.ceylon.language.Integer>method(.ceylon.language.Integer.$TypeDescriptor$);
        .com.redhat.ceylon.compiler.java.test.structure.reified.method_.<.java.lang.Object>method(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.structure.reified.method_.method(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
}