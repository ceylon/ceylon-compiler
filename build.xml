<project name="MyProject" default="all" basedir=".">

  <property name="typechecker.jar" location="${user.home}/.ceylon/repo/com/redhat/ceylon/typechecker/0.1/com.redhat.ceylon.typechecker-0.1.jar"/>

  <!-- The Java source files for the compiler -->
  <property name="javac.src" location="langtools/src/share/classes"/>
  <property name="ceylonc.src" location="src"/>
  <property name="test.src" location="test-src"/>

  <!-- The Java and Ceylon source files for the runtime -->
  <property name="runtime.src" location="runtime"/>  
  
  <!-- Directories everything gets built into -->
  <property name="build" location="build"/>
  <property name="build.classes" location="${build}/classes"/>
  <property name="build.lib" location="${build}/lib"/>
  <property name="test.reports" location="${build}/test-reports"/>

  <property name="antlr.lib" location="lib/antlrworks-1.3.1.jar"/>
  <property name="junit.lib" location="lib/junit-4.9b2.jar"/>

  <!-- Jarfiles everything ends up in -->
  <property name="compiler.jar" location="${build.lib}/compiler.jar"/>
  <property name="runtime.jar" location="${build.lib}/runtime.jar"/>

  <!-- The directory that parser tests live in, and
       the directory test results get written into -->
  <property name="parser.test.src" location="corpus/tests"/>
  <property name="parser.test.dst" location="${build}/test/parser"/>

  <path id="compiler.classpath">
    <pathelement path="${typechecker.jar}"/>
    <pathelement path="${antlr.lib}"/>
  </path>

  <path id="test.compile.classpath">
    <path refid="compiler.classpath"/>
    <pathelement path="${build.classes}"/>
    <pathelement path="${junit.lib}"/>
  </path>

  <path id="test.run.classpath">
    <path refid="compiler.classpath"/>
    <pathelement path="${compiler.jar}"/>
    <pathelement path="${runtime.jar}"/>
    <pathelement path="${junit.lib}"/>
    <pathelement path="${build.classes}"/>
  </path>

  <path id="runtime.classpath">
    <pathelement path="${runtime.jar}"/>
    <pathelement path="${build.classes}"/>
  </path>

  <!-- Rule to build compiler classes from their Java sources -->
  <target name="compiler.classes">
    <mkdir dir="${build.classes}"/>
    <javac
       srcdir="${javac.src}:${ceylonc.src}"
       destdir="${build.classes}"
       debug="true"
       classpathref="compiler.classpath">
      <include name="com/redhat/**"/>
      <include name="com/sun/tools/javac/**"/>
      <include name="com/sun/source/**"/>
    </javac>
  	<copy todir="${build.classes}">
      <fileset dir="${ceylonc.src}">
        <include name="com/redhat/**/resources/**"/>
      </fileset>
  	</copy>
  </target>

  <!-- Rule to build compiler test classes from their Java sources -->
  <target name="test.classes" depends="compiler.classes,runtime.classes">
    <mkdir dir="${build.classes}"/>
    <javac
       srcdir="${test.src}"
       destdir="${build.classes}"
       debug="true"
       classpathref="test.compile.classpath">
      <include name="com/redhat/ceylon/compiler/test/**"/>
    </javac>
  </target>

  <!-- Rule to build compiler jar -->
  <target name="compiler.jar" depends="compiler.classes">
    <mkdir dir="${build.lib}"/>
    <jar destfile="${compiler.jar}">
      <fileset dir="${build.classes}">
        <exclude name="ceylon/**"/>
        <exclude name="com/redhat/ceylon/compiler/test/**"/>
      </fileset>
      <fileset dir="${javac.src}">
        <include name="com/sun/tools/javac/resources/*.properties"/>
      </fileset>
    </jar>
  </target>

  <!-- Rule to build runtime classes from their Java and Ceylon sources -->
  <target name="runtime.classes" depends="compiler.jar">
<!--
    <taskdef name="ceylonc" classname="com.redhat.ceylon.compiler.ant.Ceylonc">
      <classpath>
        <pathelement location="${compiler.jar}"/>
      </classpath>
    </taskdef>
    <ceylonc
       compiler="bin/ceylonc"
       srcdir="${runtime.src}"
       destdir="${build.classes}"/>
-->
    <javac
       srcdir="${runtime.src}"
       destdir="${build.classes}"/>
  </target>
  
  <!-- Rule to build runtime jar -->
  <target name="runtime.jar" depends="runtime.classes">
    <mkdir dir="${build.lib}"/>
    <jar destfile="${runtime.jar}">
      <fileset dir="${build.classes}">
        <include name="ceylon/**"/>
        <include name="com/redhat/ceylon/compiler/metadata/**"/>
      </fileset>
    </jar>
  </target>

  <!-- FIXME: Historical rule -->
  <!-- Rule to run the parser regression tests -->
  <target name="test.parser" depends="compiler.jar">
    <mkdir dir="${parser.test.dst}"/>
    <apply executable="java">
      <arg value="-ea"/>
      <arg value="-cp"/>
      <arg value="${compiler.jar}:${antlr.lib}"/>
      <arg value="com.redhat.ceylon.compiler.launcher.CeylonCompiler"/>
      <arg value="-d"/>
      <arg value="${parser.test.dst}"/>
      <fileset dir="${parser.test.src}">
  <include name="*.ceylon"/>
      </fileset>
    </apply>
    <apply executable="diff" failonerror="true">
      <arg value="-w"/>
      <arg value="${parser.test.dst}"/>
      <fileset dir="${parser.test.src}">
        <include name="*.ceylon.out"/>
      </fileset>
    </apply>
  </target>

  <!-- FIXME: Historical rule -->
  <!-- Rule to run the compiler regression tests -->
  <target name="test.compiler" depends="compiler.jar,runtime.jar">
    <exec executable="bin/compilertest" failonerror="true"/>
  </target>

  <!-- Rule to compile and test -->
  <target name="all" depends="test"/>

  <!-- Rule to clean everything up -->
  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="${antlr.dst}"/>
  </target>

  <!-- Runs the JUnit tests -->
  <target name="test" depends="test.classes,compiler.jar,runtime.jar" description="Runs the JUnit tests">
    <mkdir dir="${test.reports}"/>
  	<property name="bootclasspath" refid="test.run.classpath" />
    <junit printsummary="yes" haltonfailure="no">
      <classpath refid="test.run.classpath"/>
      <jvmarg value="-Xbootclasspath/p:${bootclasspath}"/>

      <formatter type="xml"/>

      <batchtest fork="yes" todir="${test.reports}">
        <fileset dir="${test.src}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
 
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports}"/>
    </junitreport>
  </target>
</project>
