# Ceylon notice:
# WARNING: this is a copy of javac.properties required so that we can use it
# on OSX with the Apple JVM. See https://github.com/ceylon/ceylon-compiler/issues/181
# DO NOT USE javac.properties anymore

#
# Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## standard options

javac.opt.g=\
    Generate all debugging info
javac.opt.g.none=\
    Generate no debugging info
javac.opt.g.lines.vars.source=\
    Generate only some debugging info
javac.opt.nowarn=\
    Generate no warnings
javac.opt.verbose=\
    Output messages about what the compiler is doing
javac.opt.verbose.suboptlist=\
    Enable specific messages about what the compiler is doing
javac.opt.deprecation=\
    Output source locations where deprecated APIs are used
javac.opt.classpath=\
    Specify where to find user class files and annotation processors
javac.opt.ceyloncwd=\
    Current working directory (default: the directory where the tool was run from)
javac.opt.ceylonrepo=\
    Module repository (default: ./modules). \n                             Can be specified multiple times.
javac.opt.ceylonsystemrepo=\
    System repository (default: CEYLON_HOME/repo)
javac.opt.ceyloncacherepo=\
    Cache repository (default: ~/.ceylon/cache)
javac.opt.ceylonnodefrepos=\
    Indicate that the default repositories should not be used
javac.opt.ceylonuser=\
    User name for output repository (HTTP only)
javac.opt.ceylonpass=\
    Password for output repository (HTTP only)
javac.opt.ceylonnoosgi=\
    Do not generate OSGi module information in META-INF/MANIFEST.MF in the generated car file
javac.opt.ceylonnopom=\
    Do not generate Maven module information in META-INF/maven in the generated car file
javac.opt.pack200=\
    Try to make the generated car file smaller by repacking it using `pack200`
javac.opt.sourcepath=\
    Specify where to find input source files
javac.opt.ceylonoverrides=\
    Path to module overrides file
javac.opt.ceylonsourcepath=\
    Path to source files (default: ./source)
javac.opt.ceylonresourcepath=\
    Path to resource files (default\: ./resource)
javac.opt.ceylonresourceroot=\
    Special resource folder name for CAR root files (default\: ROOT)
javac.opt.ceylonsuppresswarnings=\
    Names of warnings to be suppressed
javac.opt.bootclasspath=\
    Override location of bootstrap class files
javac.opt.Xbootclasspath.p=\
    Prepend to the bootstrap class path
javac.opt.Xbootclasspath.a=\
    Append to the bootstrap class path
javac.opt.endorseddirs=\
    Override location of endorsed standards path
javac.opt.extdirs=\
    Override location of installed extensions
javac.opt.processorpath=\
    Specify where to find annotation processors
javac.opt.processor=\
    Names of the annotation processors to run; bypasses default discovery process
javac.opt.proc.none.only=\
    Control whether annotation processing and/or compilation is done.
javac.opt.d=\
    Specify where to place generated class files
javac.opt.ceylonout=\
    Output module repository (default: ./modules)
javac.opt.ceylonoffline=\
    Offline mode that will prevent the module loader from connecting to remote repositories
javac.opt.ceylontimeout=\
    Timeout for remote repository options, in milliseconds
javac.opt.ceyloncontinue=\
    Tells the compiler to continue even when it encounters errors
javac.opt.ceylonflatclasspath=\
    Tells the compiler to use a flat classpath
javac.opt.ceylonautoexportmavendependencies=\
    Tells the compiler to auto-export maven dependencies
javac.opt.sourceDest=\
    Specify where to place generated source files
javac.opt.J=\
    Pass <flag> directly to the runtime system
javac.opt.encoding=\
    Specify character encoding used by source files
javac.opt.target=\
    Generate class files for specific VM version
javac.opt.source=\
    Provide source compatibility with specified release
javac.opt.Werror=\
    Terminate compilation if warnings occur
javac.opt.A=\
    Options to pass to annotation processors
javac.opt.implicit=\
    Specify whether or not to generate class files for implicitly referenced files
javac.opt.pkginfo=\
    Specify handling of package-info files
javac.opt.arg.class=\
    <class>
javac.opt.arg.class.list=\
    <class1>[,<class2>,<class3>...]
javac.opt.arg.flag=\
    <flag>
javac.opt.arg.key.equals.value=\
    key[=value]
javac.opt.arg.path=\
    <path>
javac.opt.arg.dirs=\
    <dirs>
javac.opt.arg.directory=\
    <directory>
javac.opt.arg.encoding=\
    <encoding>
javac.opt.arg.release=\
    <release>
javac.opt.arg.number=\
    <number>
javac.opt.arg.value=\
    <value>
javac.opt.arg.url=\
    <url>
javac.opt.src=\
    Specify location of Ceylon sources for package name calculation
javac.opt.arg.src=\
    <path>

## extended options

javac.opt.maxerrs=\
    Set the maximum number of errors to print
javac.opt.maxwarns=\
    Set the maximum number of warnings to print
javac.opt.nogj=\
    Don't accept generics in the language
javac.opt.moreinfo=\
    Print extended information for type variables
javac.opt.printflat=\
    Print abstract syntax tree after inner class conversion
javac.opt.printsearch=\
    Print information where classfiles are searched
javac.opt.prompt=\
    Stop after each error
javac.opt.retrofit=\
    Retrofit existing classfiles with generic types
javac.opt.s=\
    Emit java sources instead of classfiles
javac.opt.scramble=\
    Scramble private identifiers in bytecode
javac.opt.scrambleall=\
    Scramble package visible identifiers in bytecode
javac.opt.version=\
    Version information
javac.opt.arg.pathname=\
    <pathname>
javac.opt.arg.file=\
    <filename>
javac.opt.Xlint=\
    Enable recommended warnings
javac.opt.Xlint.suboptlist=\
    Enable or disable specific warnings
javac.opt.Xstdout=\
    Redirect standard output
javac.opt.X=\
    Print a synopsis of nonstandard options
javac.opt.help=\
    Print a synopsis of standard options
javac.opt.print=\
    Print out a textual representation of specified types
javac.opt.printRounds=\
    Print information about rounds of annotation processing
javac.opt.printProcessorInfo=\
    Print information about which annotations a processor is asked to process
javac.opt.prefer=\
    Specify which file to read when both a source file and class file are found for an implicitly compiled class
javac.opt.AT=\
    Read options and filenames from file
    
## errors

javac.err.empty.A.argument=\
    -A requires an argument; use ''-Akey'' or ''-Akey=value''
javac.err.invalid.arg=\
    invalid argument: {0}
javac.err.invalid.A.key=\
     key in annotation processor option ''{0}'' is not a dot-separated sequence of identifiers
javac.err.invalid.flag=\
    invalid flag: {0}
javac.err.invalid.target=\
    invalid target release: {0}
javac.err.no.source.files=\
    no source files or modules
javac.err.req.arg=\
    {0} requires an argument
javac.err.invalid.source=\
    invalid source release: {0}
javac.err.error.writing.file=\
    error writing {0}; {1}
javac.warn.source.target.conflict=\
    source release {0} requires target release {1}
javac.warn.target.default.source.conflict=\
    target release {0} conflicts with default source release {1}
javac.err.dir.not.found=\
    directory not found: {0}
javac.err.file.not.found=\
    file not found: {0}
javac.err.file.not.directory=\
    not a directory: {0}
javac.err.file.not.file=\
    not a file: {0}
## messages

javac.msg.usage.header=\
Usage: {0} <options> <module or file...>\n\
where possible javac options include:

javac.msg.usage=\
    Usage: {0} <options> <source files> <module names>\n\
    use --help for a list of possible options

javac.msg.usage.nonstandard.footer=\
These options are non-standard and subject to change without notice.
	
javac.msg.bug=\
An exception has occurred in the compiler ({0}).

javac.msg.io=\
\n\nAn input/output error occurred.\n\
Consult the following stack trace for details.\n

javac.msg.proc.annotation.uncaught.exception=\
\n\nAn annotation processor threw an uncaught exception.\n\
Consult the following stack trace for details.\n

javac.msg.resource=\
\n\nThe system is out of resources.\n\
Consult the following stack trace for details.\n

javac.version=Version: {1}
javac.fullVersion={0} full version "{1}"

## Ceylon
javac.ceylon=\
    {0}
javac.ceylon.err.output.repo.not.supported=\
    output repository URL not supported (should be HTTP or HTTPS): {0}
javac.err.module.not.found=\
    Module {0} not found in source directories: {1}
javac.err.unsupported.encoding=\
    Unsupported encoding: {0}
